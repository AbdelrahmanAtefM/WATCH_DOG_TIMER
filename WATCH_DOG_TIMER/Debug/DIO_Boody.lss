
DIO_Boody.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00004598  0000462c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080019a  0080019a  00004766  2**0
                  ALLOC
  3 .stab         00004698  00000000  00000000  00004768  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000193e  00000000  00000000  00008e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a73e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000a8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000ab12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000e5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f900  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000fae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000fde7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010801  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <main>
      8a:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 22 	jmp	0x455e	; 0x455e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 22 	jmp	0x455e	; 0x455e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 22 	jmp	0x4536	; 0x4536 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 22 	jmp	0x456e	; 0x456e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 9b 22 	jmp	0x4536	; 0x4536 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 b7 22 	jmp	0x456e	; 0x456e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e6 57       	subi	r30, 0x76	; 118
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <M_WDT_void_WDTEnable>:

///***************** Functions **********//
///
/////***function to enable WDT
void M_WDT_void_WDTEnable(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	///******* To enable WDT
	 // Set WDE bit in WDTCR_REG
    SetBit(WDTCR_REG , WDE);
     ef2:	a1 e4       	ldi	r26, 0x41	; 65
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e1 e4       	ldi	r30, 0x41	; 65
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	8c 93       	st	X, r24
    /// ***** To select (2.1s) window time
    SetBit(WDTCR_REG , WDP0);
     f00:	a1 e4       	ldi	r26, 0x41	; 65
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e4       	ldi	r30, 0x41	; 65
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	8c 93       	st	X, r24
    SetBit(WDTCR_REG , WDP1);
     f0e:	a1 e4       	ldi	r26, 0x41	; 65
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e4       	ldi	r30, 0x41	; 65
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	8c 93       	st	X, r24
    SetBit(WDTCR_REG , WDP2);
     f1c:	a1 e4       	ldi	r26, 0x41	; 65
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e1 e4       	ldi	r30, 0x41	; 65
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	84 60       	ori	r24, 0x04	; 4
     f28:	8c 93       	st	X, r24

}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <M_WDT_void_WDTDisable>:
void M_WDT_void_WDTDisable(void)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
	 SetBit(WDTCR_REG , WDTOE);
     f38:	a1 e4       	ldi	r26, 0x41	; 65
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e1 e4       	ldi	r30, 0x41	; 65
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 61       	ori	r24, 0x10	; 16
     f44:	8c 93       	st	X, r24
	 ClrBit(WDTCR_REG , WDE);
     f46:	a1 e4       	ldi	r26, 0x41	; 65
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e1 e4       	ldi	r30, 0x41	; 65
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	87 7f       	andi	r24, 0xF7	; 247
     f52:	8c 93       	st	X, r24


}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <M_WDT_void_WDTRefresh>:
void M_WDT_void_WDTRefresh(void)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
   asm("WDR");
     f62:	a8 95       	wdr
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <M_TIMER1_void_Pwm1Int>:
///***************** INCLUDES **********//
#include "TIMER1_Int.h"
///***************** Functions **********//

void M_TIMER1_void_Pwm1Int(void)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
   //// ***** To enable  pin OC1A(PD5) direction to output
   M_DIO_void_SetPinDirection(PORTD_ID, PIN5, OUTPUT);
     f72:	84 e0       	ldi	r24, 0x04	; 4
     f74:	65 e0       	ldi	r22, 0x05	; 5
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
   ////TO enable TIMER1 FAST PWM(ICR1)
	// Clear WGM10 in TCCR1A_REG
	ClrBit(TCCR1A_REG ,WGM10);
     f7c:	af e4       	ldi	r26, 0x4F	; 79
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ef e4       	ldi	r30, 0x4F	; 79
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	8c 93       	st	X, r24
	// Set   WGM11 in TCCR1A_REG
	SetBit(TCCR1A_REG ,WGM11);
     f8a:	af e4       	ldi	r26, 0x4F	; 79
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ef e4       	ldi	r30, 0x4F	; 79
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	82 60       	ori	r24, 0x02	; 2
     f96:	8c 93       	st	X, r24
	// Set   WGM12 in TCCR1B_REG
	SetBit(TCCR1B_REG ,WGM12);
     f98:	ae e4       	ldi	r26, 0x4E	; 78
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ee e4       	ldi	r30, 0x4E	; 78
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 60       	ori	r24, 0x08	; 8
     fa4:	8c 93       	st	X, r24
	// Set   WGM13 in TCCR1B_REG
	SetBit(TCCR1B_REG ,WGM13);
     fa6:	ae e4       	ldi	r26, 0x4E	; 78
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ee e4       	ldi	r30, 0x4E	; 78
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 61       	ori	r24, 0x10	; 16
     fb2:	8c 93       	st	X, r24

#if   TIMER1_FAST_PWM1_MODE  == NON_Inverted
	////TO enable TIMER1 FAST PWM(ICR1) NON INVERTED MODE
	// Set   COM1A1 in TCCR1A_REG
	SetBit(TCCR1A_REG ,COM1A1);
     fb4:	af e4       	ldi	r26, 0x4F	; 79
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ef e4       	ldi	r30, 0x4F	; 79
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 68       	ori	r24, 0x80	; 128
     fc0:	8c 93       	st	X, r24
	// Clear COM1A0 in TCCR1A_REG
	ClrBit(TCCR1A_REG ,COM1A0);
     fc2:	af e4       	ldi	r26, 0x4F	; 79
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ef e4       	ldi	r30, 0x4F	; 79
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 7b       	andi	r24, 0xBF	; 191
     fce:	8c 93       	st	X, r24
	SetBit(TCCR1B_REG ,COM1A1);
	// Set COM1A0 in TCCR1A_REG
	SetBit(TCCR1A_REG ,COM1A0);
#endif

}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <M_TIMER1_void_Pwm1SetFrequancy>:
void M_TIMER1_void_Pwm1SetFrequancy(u32 Local_u32Frequancy)
{
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <M_TIMER1_void_Pwm1SetFrequancy+0xa>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <M_TIMER1_void_Pwm1SetFrequancy+0xc>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	69 83       	std	Y+1, r22	; 0x01
     fe8:	7a 83       	std	Y+2, r23	; 0x02
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	9c 83       	std	Y+4, r25	; 0x04
    ICR1_REG = ((F_OSC * 1000000)/TIMER1_PRESCALER)/Local_u32Frequancy;
     fee:	06 e4       	ldi	r16, 0x46	; 70
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	84 e2       	ldi	r24, 0x24	; 36
     ff4:	94 ef       	ldi	r25, 0xF4	; 244
     ff6:	a0 e0       	ldi	r26, 0x00	; 0
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	3a 81       	ldd	r19, Y+2	; 0x02
     ffe:	4b 81       	ldd	r20, Y+3	; 0x03
    1000:	5c 81       	ldd	r21, Y+4	; 0x04
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 42 22 	call	0x4484	; 0x4484 <__udivmodsi4>
    100a:	da 01       	movw	r26, r20
    100c:	c9 01       	movw	r24, r18
    100e:	f8 01       	movw	r30, r16
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <M_TIMER1_void_Pwm1SetDutycycle>:
void M_TIMER1_void_Pwm1SetDutycycle(f32 Local_u8DutySycle)
{
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <M_TIMER1_void_Pwm1SetDutycycle+0xa>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <M_TIMER1_void_Pwm1SetDutycycle+0xc>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	69 83       	std	Y+1, r22	; 0x01
    1038:	7a 83       	std	Y+2, r23	; 0x02
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	9c 83       	std	Y+4, r25	; 0x04
#if    TIMER1_FAST_PWM1_MODE  == NON_Inverted
		OCR1A_REG = (((Local_u8DutySycle * ICR1_REG)/100)-1);
    103e:	0a e4       	ldi	r16, 0x4A	; 74
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	e6 e4       	ldi	r30, 0x46	; 70
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	cc 01       	movw	r24, r24
    104c:	a0 e0       	ldi	r26, 0x00	; 0
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	29 81       	ldd	r18, Y+1	; 0x01
    1062:	3a 81       	ldd	r19, Y+2	; 0x02
    1064:	4b 81       	ldd	r20, Y+3	; 0x03
    1066:	5c 81       	ldd	r21, Y+4	; 0x04
    1068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	48 ec       	ldi	r20, 0xC8	; 200
    107a:	52 e4       	ldi	r21, 0x42	; 66
    107c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e8       	ldi	r20, 0x80	; 128
    108e:	5f e3       	ldi	r21, 0x3F	; 63
    1090:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	f8 01       	movw	r30, r16
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	80 83       	st	Z, r24

#elif  TIMER1_FAST_PWM1_MODE  == Inverted

#endif
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	08 95       	ret

000010bc <M_TIMER1_void_Pwm1Start>:
void M_TIMER1_void_Pwm1Start(void)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	    ClrBit(TCCR1B_REG , CS11);
	    SetBit(TCCR1B_REG , CS12);

#elif TIMER1_PRESCALER == 256
  ////******To select clock in 256 clear (CS11 ,CS10) and Set (CS12) in TCCR1B_REG
	    ClrBit(TCCR1B_REG , CS10);
    10c4:	ae e4       	ldi	r26, 0x4E	; 78
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ee e4       	ldi	r30, 0x4E	; 78
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8e 7f       	andi	r24, 0xFE	; 254
    10d0:	8c 93       	st	X, r24
		ClrBit(TCCR1B_REG , CS11);
    10d2:	ae e4       	ldi	r26, 0x4E	; 78
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ee e4       	ldi	r30, 0x4E	; 78
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8d 7f       	andi	r24, 0xFD	; 253
    10de:	8c 93       	st	X, r24
		SetBit(TCCR1B_REG , CS12);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	8c 93       	st	X, r24

#endif

}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <M_TIMER1_void_Pwm1Stop>:
void M_TIMER1_void_Pwm1Stop(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	////*** To stop timer clear  three bits ( CS12 ,CS11 ,CS10) in TCCR1B_REG
	 ClrBit(TCCR1B_REG , CS10);
    10fc:	ae e4       	ldi	r26, 0x4E	; 78
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ee e4       	ldi	r30, 0x4E	; 78
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8e 7f       	andi	r24, 0xFE	; 254
    1108:	8c 93       	st	X, r24
	 ClrBit(TCCR1B_REG , CS11);
    110a:	ae e4       	ldi	r26, 0x4E	; 78
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ee e4       	ldi	r30, 0x4E	; 78
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8d 7f       	andi	r24, 0xFD	; 253
    1116:	8c 93       	st	X, r24
	 ClrBit(TCCR1B_REG , CS12);
    1118:	ae e4       	ldi	r26, 0x4E	; 78
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	ee e4       	ldi	r30, 0x4E	; 78
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8b 7f       	andi	r24, 0xFB	; 251
    1124:	8c 93       	st	X, r24

}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <M_TIMER0_void_Timer0Int>:
u32 MTimer0_u32NumOfCM =0;
void (*CallBack)(void);
///***************** FUNCTIONS **********//
/// M_TIMER0_void_Timer0Int is a function to initialize Timer0///
void M_TIMER0_void_Timer0Int(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
   /// To enable TIMER0 overflow INT
   // Set TOIEO in TIMSK_REG
	  SetBit(TIMSK_REG , TOIE0);
#elif TIMER0_MODE == CTC_MODE
	  /// To Enable CTC_MODE clear WGM00 and  set WGM01 in TCCR0_REG
	  	  ClrBit(TCCR0_REG ,WGM00 );
    1134:	a3 e5       	ldi	r26, 0x53	; 83
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e3 e5       	ldi	r30, 0x53	; 83
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8f 7b       	andi	r24, 0xBF	; 191
    1140:	8c 93       	st	X, r24
	  	  SetBit(TCCR0_REG ,WGM01 );
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 60       	ori	r24, 0x08	; 8
    114e:	8c 93       	st	X, r24
	  /// To enable TIMER0 compare match INT
	   // Set OCIE0 in TIMSK_REG
	  	 SetBit(TIMSK_REG , OCIE0);
    1150:	a9 e5       	ldi	r26, 0x59	; 89
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e9 e5       	ldi	r30, 0x59	; 89
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	82 60       	ori	r24, 0x02	; 2
    115c:	8c 93       	st	X, r24
#endif //// end if for  TIMER0_MODE

}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <M_TIMER0_U8_Timer0SetTime>:
///M_TIMER0_U8_Timer0SetTime function to set time
void M_TIMER0_U8_Timer0SetTime(u32 Loacl_u8DesierdTime_ms)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	2d 97       	sbiw	r28, 0x0d	; 13
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	6a 87       	std	Y+10, r22	; 0x0a
    117a:	7b 87       	std	Y+11, r23	; 0x0b
    117c:	8c 87       	std	Y+12, r24	; 0x0c
    117e:	9d 87       	std	Y+13, r25	; 0x0d

	/// time of the tick  time
    u32 Local_u32TickTime = TIMER0_PRESCALER / FOSC ;  /// results will be in micro sec
    1180:	80 e4       	ldi	r24, 0x40	; 64
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a0 e0       	ldi	r26, 0x00	; 0
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	8e 83       	std	Y+6, r24	; 0x06
    118a:	9f 83       	std	Y+7, r25	; 0x07
    118c:	a8 87       	std	Y+8, r26	; 0x08
    118e:	b9 87       	std	Y+9, r27	; 0x09
    /// the number of the total ticks
    u32 Local_u32TotalTicks =  (Loacl_u8DesierdTime_ms *1000) / Local_u32TickTime;
    1190:	8a 85       	ldd	r24, Y+10	; 0x0a
    1192:	9b 85       	ldd	r25, Y+11	; 0x0b
    1194:	ac 85       	ldd	r26, Y+12	; 0x0c
    1196:	bd 85       	ldd	r27, Y+13	; 0x0d
    1198:	28 ee       	ldi	r18, 0xE8	; 232
    119a:	33 e0       	ldi	r19, 0x03	; 3
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	0e 94 04 22 	call	0x4408	; 0x4408 <__mulsi3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	2e 81       	ldd	r18, Y+6	; 0x06
    11ae:	3f 81       	ldd	r19, Y+7	; 0x07
    11b0:	48 85       	ldd	r20, Y+8	; 0x08
    11b2:	59 85       	ldd	r21, Y+9	; 0x09
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	0e 94 42 22 	call	0x4484	; 0x4484 <__udivmodsi4>
    11bc:	da 01       	movw	r26, r20
    11be:	c9 01       	movw	r24, r18
    11c0:	8a 83       	std	Y+2, r24	; 0x02
    11c2:	9b 83       	std	Y+3, r25	; 0x03
    11c4:	ac 83       	std	Y+4, r26	; 0x04
    11c6:	bd 83       	std	Y+5, r27	; 0x05
    	 //// TCNT0_REG will start from the reminded ticks number
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
    	 MTimer0_u32NumOfOV++;
     }
#elif TIMER0_MODE == CTC_MODE
     u8 Local_8uCounter = 255;
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	03 c0       	rjmp	.+6      	; 0x11d4 <M_TIMER0_U8_Timer0SetTime+0x70>
     while(Local_u32TotalTicks % Local_8uCounter)
     {
    	 Local_8uCounter--;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	81 50       	subi	r24, 0x01	; 1
    11d2:	89 83       	std	Y+1, r24	; 0x01
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
    	 MTimer0_u32NumOfOV++;
     }
#elif TIMER0_MODE == CTC_MODE
     u8 Local_8uCounter = 255;
     while(Local_u32TotalTicks % Local_8uCounter)
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	9b 81       	ldd	r25, Y+3	; 0x03
    11e2:	ac 81       	ldd	r26, Y+4	; 0x04
    11e4:	bd 81       	ldd	r27, Y+5	; 0x05
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 42 22 	call	0x4484	; 0x4484 <__udivmodsi4>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	a1 05       	cpc	r26, r1
    11f6:	b1 05       	cpc	r27, r1
    11f8:	51 f7       	brne	.-44     	; 0x11ce <M_TIMER0_U8_Timer0SetTime+0x6a>
     {
    	 Local_8uCounter--;
     }
     MTimer0_u32NumOfCM = Local_u32TotalTicks /Local_8uCounter ;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	ac 81       	ldd	r26, Y+4	; 0x04
    120a:	bd 81       	ldd	r27, Y+5	; 0x05
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 42 22 	call	0x4484	; 0x4484 <__udivmodsi4>
    1214:	da 01       	movw	r26, r20
    1216:	c9 01       	movw	r24, r18
    1218:	80 93 9f 01 	sts	0x019F, r24
    121c:	90 93 a0 01 	sts	0x01A0, r25
    1220:	a0 93 a1 01 	sts	0x01A1, r26
    1224:	b0 93 a2 01 	sts	0x01A2, r27
     OCR0_REG = Local_8uCounter - 1;
    1228:	ec e5       	ldi	r30, 0x5C	; 92
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	81 50       	subi	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24

#endif
}
    1232:	2d 96       	adiw	r28, 0x0d	; 13
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <M_TIMER0_void_Timer0Start>:
/// M_TIMER0_void_Timer0Start to let Timer0 start

void M_TIMER0_void_Timer0Start(void)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	/// Selecting prescaler
#if  TIMER0_PRESCALER == 1024       /// 1024 mode
	 /// set   CS00 in TCCR0_REG
	    SetBit(TCCR0_REG , CS00);
    124c:	a3 e5       	ldi	r26, 0x53	; 83
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e3 e5       	ldi	r30, 0x53	; 83
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	81 60       	ori	r24, 0x01	; 1
    1258:	8c 93       	st	X, r24
     /// clear CS01 in TCCR0_REG
        ClrBit(TCCR0_REG , CS01);
    125a:	a3 e5       	ldi	r26, 0x53	; 83
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e3 e5       	ldi	r30, 0x53	; 83
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8d 7f       	andi	r24, 0xFD	; 253
    1266:	8c 93       	st	X, r24
     /// set   CS02 in TCCR0_REG
        SetBit(TCCR0_REG , CS02);
    1268:	a3 e5       	ldi	r26, 0x53	; 83
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e3 e5       	ldi	r30, 0x53	; 83
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	84 60       	ori	r24, 0x04	; 4
    1274:	8c 93       	st	X, r24
        SetBit(TCCR0_REG , CS01);
	/// clear CS00 in TCCR0_REG
        ClrBit(TCCR0_REG , CS00);
#endif //// end if for  PRESCALER

}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <M_TIMER0_void_Timer0Stop>:
///M_TIMER0_void_Timer0Stop to stop Timer0
void M_TIMER0_void_Timer0Stop(void)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	///clear the three bits (CS00 , CS01 ,CS02 )
	ClrBit(TCCR0_REG , CS00);
    1284:	a3 e5       	ldi	r26, 0x53	; 83
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e3 e5       	ldi	r30, 0x53	; 83
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8e 7f       	andi	r24, 0xFE	; 254
    1290:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS01);
    1292:	a3 e5       	ldi	r26, 0x53	; 83
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e3 e5       	ldi	r30, 0x53	; 83
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS02);
    12a0:	a3 e5       	ldi	r26, 0x53	; 83
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e3 e5       	ldi	r30, 0x53	; 83
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8b 7f       	andi	r24, 0xFB	; 251
    12ac:	8c 93       	st	X, r24
}
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <M_TIMER0_void_Pwm0Int>:



/////****M_TIMER0_void_Pwm0Int function to initialize PWM0
void M_TIMER0_void_Pwm0Int(void)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
	////******set direction of  pin PB3(OC0) to OUTPUT
	M_DIO_void_SetPinDirection(PORTB_ID, PIN3, OUTPUT);
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	63 e0       	ldi	r22, 0x03	; 3
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>


#endif   //// ****** End of TIMER0_FAST_PWM_MODE
#elif TIMER0_PWM_MODE == PHASE_CORRECT
	/// To Enable FAST PMW0 set( WGM01 & WGM00 )in TCCR0_REG
	 SetBit(TCCR0_REG ,WGM00 );
    12c6:	a3 e5       	ldi	r26, 0x53	; 83
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e3 e5       	ldi	r30, 0x53	; 83
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 64       	ori	r24, 0x40	; 64
    12d2:	8c 93       	st	X, r24
	 ClrBit(TCCR0_REG ,WGM01 );
    12d4:	a3 e5       	ldi	r26, 0x53	; 83
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e3 e5       	ldi	r30, 0x53	; 83
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	87 7f       	andi	r24, 0xF7	; 247
    12e0:	8c 93       	st	X, r24
	 ////******** TIMER0 PHASE CORRECT PWM  MODE*******//
#if    TIMER0_PWM_PHASE_CORRECT  == NON_INVERTED
    /// To select  TIMER0_PWM_PHASE_CORRECT  INVERTED Mode set(COM01) and clear(COM00) in TCCR0_REG
	  SetBit(TCCR0_REG ,COM01 );
    12e2:	a3 e5       	ldi	r26, 0x53	; 83
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e3 e5       	ldi	r30, 0x53	; 83
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 62       	ori	r24, 0x20	; 32
    12ee:	8c 93       	st	X, r24
	  ClrBit(TCCR0_REG ,COM00 );
    12f0:	a3 e5       	ldi	r26, 0x53	; 83
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e3 e5       	ldi	r30, 0x53	; 83
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 7e       	andi	r24, 0xEF	; 239
    12fc:	8c 93       	st	X, r24


#endif   //// ****** TIMER0_PWM_PHASE_CORRECT

#endif    //// ****** End of TIMER0_PWM_MODE
}
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <M_TIMER0_void_Pwm0SetDutyCycle>:
/////****M_TIMER0_void_Pwm0SetDutySycle function to set duty cycle for  PWM0
void M_TIMER0_void_Pwm0SetDutyCycle(u8 Local_u8DutySycle)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01

#endif

#elif TIMER0_PWM_MODE == PHASE_CORRECT
#if    TIMER0_PWM_PHASE_CORRECT  == NON_INVERTED
	OCR0_REG = ((Local_u8DutySycle * 255 )/100);
    1310:	ec e5       	ldi	r30, 0x5C	; 92
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	48 2f       	mov	r20, r24
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	ca 01       	movw	r24, r20
    131c:	9c 01       	movw	r18, r24
    131e:	22 0f       	add	r18, r18
    1320:	33 1f       	adc	r19, r19
    1322:	c9 01       	movw	r24, r18
    1324:	96 95       	lsr	r25
    1326:	98 2f       	mov	r25, r24
    1328:	88 27       	eor	r24, r24
    132a:	97 95       	ror	r25
    132c:	87 95       	ror	r24
    132e:	82 1b       	sub	r24, r18
    1330:	93 0b       	sbc	r25, r19
    1332:	84 0f       	add	r24, r20
    1334:	95 1f       	adc	r25, r21
    1336:	24 e6       	ldi	r18, 0x64	; 100
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	b9 01       	movw	r22, r18
    133c:	0e 94 2f 22 	call	0x445e	; 0x445e <__divmodhi4>
    1340:	cb 01       	movw	r24, r22
    1342:	80 83       	st	Z, r24
#elif  TIMER0_PWM_PHASE_CORRECT  == INVERTED

#endif  //// ****** TIMER0_PWM_PHASE_CORRECT
#endif  //// ****** End of TIMER0_PWM_MODE

}
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <M_TIMER0_void_Pwm0Start>:

///*********M_TIMER0_void_Pwm0Start to Start PWM0
void M_TIMER0_void_Pwm0Start(void)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_void_Timer0Start();
    1354:	0e 94 22 09 	call	0x1244	; 0x1244 <M_TIMER0_void_Timer0Start>
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <M_TIMER0_void_Pwm0Stop>:
///*******M_TIMER0_void_Pwm0Stop to stop PWM0
void M_TIMER0_void_Pwm0Stop(void)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_void_Timer0Stop();
    1366:	0e 94 3e 09 	call	0x127c	; 0x127c <M_TIMER0_void_Timer0Stop>
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <M_TIMER0_void_Timer0SetCallBack>:

/// M_TIMER0_void_Timer0SetCallBack to set callback function
void M_TIMER0_void_Timer0SetCallBack(void (*Local_Ptr)(void))
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <M_TIMER0_void_Timer0SetCallBack+0x6>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
	CallBack = Local_Ptr;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	9a 81       	ldd	r25, Y+2	; 0x02
    1382:	90 93 aa 01 	sts	0x01AA, r25
    1386:	80 93 a9 01 	sts	0x01A9, r24

}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <__vector_10>:
}

#elif TIMER0_MODE == CTC_MODE

ISR(TIMER0_COMP_vect)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	2f 93       	push	r18
    13a0:	3f 93       	push	r19
    13a2:	4f 93       	push	r20
    13a4:	5f 93       	push	r21
    13a6:	6f 93       	push	r22
    13a8:	7f 93       	push	r23
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	af 93       	push	r26
    13b0:	bf 93       	push	r27
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Conter =0;
	    Local_u32Conter ++;
    13be:	80 91 a3 01 	lds	r24, 0x01A3
    13c2:	90 91 a4 01 	lds	r25, 0x01A4
    13c6:	a0 91 a5 01 	lds	r26, 0x01A5
    13ca:	b0 91 a6 01 	lds	r27, 0x01A6
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	a1 1d       	adc	r26, r1
    13d2:	b1 1d       	adc	r27, r1
    13d4:	80 93 a3 01 	sts	0x01A3, r24
    13d8:	90 93 a4 01 	sts	0x01A4, r25
    13dc:	a0 93 a5 01 	sts	0x01A5, r26
    13e0:	b0 93 a6 01 	sts	0x01A6, r27
	  if(Local_u32Conter ==  MTimer0_u32NumOfCM)
    13e4:	20 91 a3 01 	lds	r18, 0x01A3
    13e8:	30 91 a4 01 	lds	r19, 0x01A4
    13ec:	40 91 a5 01 	lds	r20, 0x01A5
    13f0:	50 91 a6 01 	lds	r21, 0x01A6
    13f4:	80 91 9f 01 	lds	r24, 0x019F
    13f8:	90 91 a0 01 	lds	r25, 0x01A0
    13fc:	a0 91 a1 01 	lds	r26, 0x01A1
    1400:	b0 91 a2 01 	lds	r27, 0x01A2
    1404:	28 17       	cp	r18, r24
    1406:	39 07       	cpc	r19, r25
    1408:	4a 07       	cpc	r20, r26
    140a:	5b 07       	cpc	r21, r27
    140c:	69 f4       	brne	.+26     	; 0x1428 <__vector_10+0x94>
	  {
           CallBack();
    140e:	e0 91 a9 01 	lds	r30, 0x01A9
    1412:	f0 91 aa 01 	lds	r31, 0x01AA
    1416:	09 95       	icall
		  Local_u32Conter =0;
    1418:	10 92 a3 01 	sts	0x01A3, r1
    141c:	10 92 a4 01 	sts	0x01A4, r1
    1420:	10 92 a5 01 	sts	0x01A5, r1
    1424:	10 92 a6 01 	sts	0x01A6, r1
	  }
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	ff 91       	pop	r31
    142e:	ef 91       	pop	r30
    1430:	bf 91       	pop	r27
    1432:	af 91       	pop	r26
    1434:	9f 91       	pop	r25
    1436:	8f 91       	pop	r24
    1438:	7f 91       	pop	r23
    143a:	6f 91       	pop	r22
    143c:	5f 91       	pop	r21
    143e:	4f 91       	pop	r20
    1440:	3f 91       	pop	r19
    1442:	2f 91       	pop	r18
    1444:	0f 90       	pop	r0
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	0f 90       	pop	r0
    144a:	1f 90       	pop	r1
    144c:	18 95       	reti

0000144e <M_GIE_void_GIE_EN>:
#include "GIE_Int.h"

/// *************** Functions  ************//
/// M_GIE_void_GIEEn function to Enable general interrupt
void M_GIE_void_GIE_EN (void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	///set I_BIT in SREG_REG
	SetBit(SREG_REG,I_BIT);
    1456:	af e5       	ldi	r26, 0x5F	; 95
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ef e5       	ldi	r30, 0x5F	; 95
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 68       	ori	r24, 0x80	; 128
    1462:	8c 93       	st	X, r24
}
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <M_GIE_void_GIE_DIS>:
/// M_GIE_void_GIEDIS function to Disable general interrupt
void M_GIE_void_GIE_DIS (void)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	///clear I_BIT in SREG_REG
	ClrBit(SREG_REG,I_BIT);
    1472:	af e5       	ldi	r26, 0x5F	; 95
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ef e5       	ldi	r30, 0x5F	; 95
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8f 77       	andi	r24, 0x7F	; 127
    147e:	8c 93       	st	X, r24
}
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <M_EXTI_IN0_void_EXTI_INT0EN>:

void (*EXTI_INT0_CallBack)(void);
/// **************Functions********//
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Enable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0EN(void)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    ///Enable internal interrupt for INT0
        SetBit(GICR_REG,INT0);
    148e:	ab e5       	ldi	r26, 0x5B	; 91
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e5       	ldi	r30, 0x5B	; 91
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 64       	ori	r24, 0x40	; 64
    149a:	8c 93       	st	X, r24
////  Interrupt 0 (INT0) Sense Control
/// Interrupt Request on Falling_Edge
#if SENSE_CONTROL   == Falling_Edge
	/// Set bit ISC01  on MCUCR_REG
	SetBit(MCUCR_REG ,ISC01);
    149c:	a5 e5       	ldi	r26, 0x55	; 85
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e5       	ldi	r30, 0x55	; 85
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	8c 93       	st	X, r24
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
    14aa:	a5 e5       	ldi	r26, 0x55	; 85
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e5       	ldi	r30, 0x55	; 85
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	8c 93       	st	X, r24
	/// Set bit ISC01  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC01);
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
#endif
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <M_EXTI_IN0_void_EXTI_INT0DIS>:
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Disable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0DIS()
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	///Disable internal interrupt
	    ClrBit(GICR_REG,INT0);
    14c6:	ab e5       	ldi	r26, 0x5B	; 91
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	eb e5       	ldi	r30, 0x5B	; 91
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7b       	andi	r24, 0xBF	; 191
    14d2:	8c 93       	st	X, r24
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <M_EXTI_INT0_void_Set_CallBack>:
///************** M_EXTI_INT0_void_Set_CallBack Function ********//
void M_EXTI_INT0_void_Set_CallBack (void (*local_ptr)(void))
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <M_EXTI_INT0_void_Set_CallBack+0x6>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
	EXTI_INT0_CallBack = local_ptr;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	90 93 ac 01 	sts	0x01AC, r25
    14f0:	80 93 ab 01 	sts	0x01AB, r24

}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <__vector_1>:

ISR(INT0_vect)
{
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
	EXTI_INT0_CallBack();
    1528:	e0 91 ab 01 	lds	r30, 0x01AB
    152c:	f0 91 ac 01 	lds	r31, 0x01AC
    1530:	09 95       	icall
}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <M_DIO_void_SetPinDirection>:
 */
#include "DIO_Int.h"

///  M_DIO_void_SetPinDirection takes 3 arguments PORT , PIN & DIRECTION
void M_DIO_void_SetPinDirection (u8 port , u8 pin , u8 direction)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	29 97       	sbiw	r28, 0x09	; 9
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	6a 83       	std	Y+2, r22	; 0x02
    1570:	4b 83       	std	Y+3, r20	; 0x03
	//// SWITCH too determine the Direction of Pin
	switch (direction)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	39 87       	std	Y+9, r19	; 0x09
    157a:	28 87       	std	Y+8, r18	; 0x08
    157c:	88 85       	ldd	r24, Y+8	; 0x08
    157e:	99 85       	ldd	r25, Y+9	; 0x09
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	39 f0       	breq	.+14     	; 0x1592 <M_DIO_void_SetPinDirection+0x3a>
    1584:	28 85       	ldd	r18, Y+8	; 0x08
    1586:	39 85       	ldd	r19, Y+9	; 0x09
    1588:	21 30       	cpi	r18, 0x01	; 1
    158a:	31 05       	cpc	r19, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <M_DIO_void_SetPinDirection+0x38>
    158e:	76 c0       	rjmp	.+236    	; 0x167c <M_DIO_void_SetPinDirection+0x124>
    1590:	e4 c0       	rjmp	.+456    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
		{
	 /// case  INPUT means that the Direction of Pin  = 0
		 case INPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3f 83       	std	Y+7, r19	; 0x07
    159a:	2e 83       	std	Y+6, r18	; 0x06
    159c:	8e 81       	ldd	r24, Y+6	; 0x06
    159e:	9f 81       	ldd	r25, Y+7	; 0x07
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	61 f1       	breq	.+88     	; 0x15fe <M_DIO_void_SetPinDirection+0xa6>
    15a6:	2e 81       	ldd	r18, Y+6	; 0x06
    15a8:	3f 81       	ldd	r19, Y+7	; 0x07
    15aa:	23 30       	cpi	r18, 0x03	; 3
    15ac:	31 05       	cpc	r19, r1
    15ae:	34 f4       	brge	.+12     	; 0x15bc <M_DIO_void_SetPinDirection+0x64>
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	69 f0       	breq	.+26     	; 0x15d4 <M_DIO_void_SetPinDirection+0x7c>
    15ba:	cf c0       	rjmp	.+414    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
    15bc:	2e 81       	ldd	r18, Y+6	; 0x06
    15be:	3f 81       	ldd	r19, Y+7	; 0x07
    15c0:	23 30       	cpi	r18, 0x03	; 3
    15c2:	31 05       	cpc	r19, r1
    15c4:	89 f1       	breq	.+98     	; 0x1628 <M_DIO_void_SetPinDirection+0xd0>
    15c6:	8e 81       	ldd	r24, Y+6	; 0x06
    15c8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ca:	84 30       	cpi	r24, 0x04	; 4
    15cc:	91 05       	cpc	r25, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <M_DIO_void_SetPinDirection+0x7a>
    15d0:	40 c0       	rjmp	.+128    	; 0x1652 <M_DIO_void_SetPinDirection+0xfa>
    15d2:	c3 c0       	rjmp	.+390    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                        /// Port A
			 		ClrBit(DDRA,pin);                  /// clear pin value set it to 0
    15d4:	aa e3       	ldi	r26, 0x3A	; 58
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ea e3       	ldi	r30, 0x3A	; 58
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <M_DIO_void_SetPinDirection+0x9a>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <M_DIO_void_SetPinDirection+0x96>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	ae c0       	rjmp	.+348    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
				break ;
			 	case PORTB_ID :                        /// Port B
			 		ClrBit(DDRB,pin);                 /// clear pin value set it to 0
    15fe:	a7 e3       	ldi	r26, 0x37	; 55
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e7 e3       	ldi	r30, 0x37	; 55
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <M_DIO_void_SetPinDirection+0xc4>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <M_DIO_void_SetPinDirection+0xc0>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	99 c0       	rjmp	.+306    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTC_ID :                       /// Port C
			 		ClrBit(DDRC,pin);                /// clear pin value set it to 0
    1628:	a4 e3       	ldi	r26, 0x34	; 52
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e4 e3       	ldi	r30, 0x34	; 52
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <M_DIO_void_SetPinDirection+0xee>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <M_DIO_void_SetPinDirection+0xea>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	84 c0       	rjmp	.+264    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTD_ID :                       /// Port D
			 		ClrBit(DDRD,pin);                /// clear pin value set it to 0
    1652:	a1 e3       	ldi	r26, 0x31	; 49
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e1 e3       	ldi	r30, 0x31	; 49
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <M_DIO_void_SetPinDirection+0x118>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <M_DIO_void_SetPinDirection+0x114>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	6f c0       	rjmp	.+222    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
		break;        /////// break case INPUT

		/// case  INPUT means that the Direction of Pin = 1
		 case OUTPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3d 83       	std	Y+5, r19	; 0x05
    1684:	2c 83       	std	Y+4, r18	; 0x04
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	91 05       	cpc	r25, r1
    168e:	51 f1       	breq	.+84     	; 0x16e4 <M_DIO_void_SetPinDirection+0x18c>
    1690:	2c 81       	ldd	r18, Y+4	; 0x04
    1692:	3d 81       	ldd	r19, Y+5	; 0x05
    1694:	23 30       	cpi	r18, 0x03	; 3
    1696:	31 05       	cpc	r19, r1
    1698:	34 f4       	brge	.+12     	; 0x16a6 <M_DIO_void_SetPinDirection+0x14e>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	61 f0       	breq	.+24     	; 0x16bc <M_DIO_void_SetPinDirection+0x164>
    16a4:	5a c0       	rjmp	.+180    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
    16a6:	2c 81       	ldd	r18, Y+4	; 0x04
    16a8:	3d 81       	ldd	r19, Y+5	; 0x05
    16aa:	23 30       	cpi	r18, 0x03	; 3
    16ac:	31 05       	cpc	r19, r1
    16ae:	71 f1       	breq	.+92     	; 0x170c <M_DIO_void_SetPinDirection+0x1b4>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	91 05       	cpc	r25, r1
    16b8:	e9 f1       	breq	.+122    	; 0x1734 <M_DIO_void_SetPinDirection+0x1dc>
    16ba:	4f c0       	rjmp	.+158    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                   /// Port A
			 		SetBit(DDRA,pin);             /// SET pin value set it to 1
    16bc:	aa e3       	ldi	r26, 0x3A	; 58
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ea e3       	ldi	r30, 0x3A	; 58
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <M_DIO_void_SetPinDirection+0x182>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <M_DIO_void_SetPinDirection+0x17e>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	3b c0       	rjmp	.+118    	; 0x175a <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTA_ID

			 	case PORTB_ID :                  /// Port B
			 		SetBit(DDRB,pin);           /// SET pin value set it to 1
    16e4:	a7 e3       	ldi	r26, 0x37	; 55
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e7 e3       	ldi	r30, 0x37	; 55
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <M_DIO_void_SetPinDirection+0x1aa>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <M_DIO_void_SetPinDirection+0x1a6>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	27 c0       	rjmp	.+78     	; 0x175a <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTB_ID

			 	case PORTC_ID :                  /// Port C
			 		SetBit(DDRC,pin);            /// SET pin value set it to 1
    170c:	a4 e3       	ldi	r26, 0x34	; 52
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e4 e3       	ldi	r30, 0x34	; 52
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <M_DIO_void_SetPinDirection+0x1d2>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <M_DIO_void_SetPinDirection+0x1ce>
    172e:	84 2b       	or	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	13 c0       	rjmp	.+38     	; 0x175a <M_DIO_void_SetPinDirection+0x202>
			 	break ;        /////// break case PORTC_ID

			 	case PORTD_ID :                  /// Port D
			 		SetBit(DDRD,pin);           /// SET pin value set it to 1
    1734:	a1 e3       	ldi	r26, 0x31	; 49
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e1 e3       	ldi	r30, 0x31	; 49
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <M_DIO_void_SetPinDirection+0x1fa>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <M_DIO_void_SetPinDirection+0x1f6>
    1756:	84 2b       	or	r24, r20
    1758:	8c 93       	st	X, r24

		 default:       /*  Do nothing */        break;
		       ///* default of switch (direction) */
		}

}
    175a:	29 96       	adiw	r28, 0x09	; 9
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <M_DIO_void_SetPinValue>:



void M_DIO_void_SetPinValue(u8 port , u8 pin , u8 value)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	29 97       	sbiw	r28, 0x09	; 9
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	6a 83       	std	Y+2, r22	; 0x02
    1784:	4b 83       	std	Y+3, r20	; 0x03
	  /// SWITCH too determine the Value of the Pin
		switch (value)
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	39 87       	std	Y+9, r19	; 0x09
    178e:	28 87       	std	Y+8, r18	; 0x08
    1790:	88 85       	ldd	r24, Y+8	; 0x08
    1792:	99 85       	ldd	r25, Y+9	; 0x09
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	39 f0       	breq	.+14     	; 0x17a6 <M_DIO_void_SetPinValue+0x3a>
    1798:	28 85       	ldd	r18, Y+8	; 0x08
    179a:	39 85       	ldd	r19, Y+9	; 0x09
    179c:	21 30       	cpi	r18, 0x01	; 1
    179e:	31 05       	cpc	r19, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <M_DIO_void_SetPinValue+0x38>
    17a2:	76 c0       	rjmp	.+236    	; 0x1890 <M_DIO_void_SetPinValue+0x124>
    17a4:	e4 c0       	rjmp	.+456    	; 0x196e <M_DIO_void_SetPinValue+0x202>
		{
		   /// case  LOW means that the Value of Pin = 0
          case LOW :
        	  //// SWITCH too determine the Port of the Pin
			       switch (port)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3f 83       	std	Y+7, r19	; 0x07
    17ae:	2e 83       	std	Y+6, r18	; 0x06
    17b0:	8e 81       	ldd	r24, Y+6	; 0x06
    17b2:	9f 81       	ldd	r25, Y+7	; 0x07
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	91 05       	cpc	r25, r1
    17b8:	61 f1       	breq	.+88     	; 0x1812 <M_DIO_void_SetPinValue+0xa6>
    17ba:	2e 81       	ldd	r18, Y+6	; 0x06
    17bc:	3f 81       	ldd	r19, Y+7	; 0x07
    17be:	23 30       	cpi	r18, 0x03	; 3
    17c0:	31 05       	cpc	r19, r1
    17c2:	34 f4       	brge	.+12     	; 0x17d0 <M_DIO_void_SetPinValue+0x64>
    17c4:	8e 81       	ldd	r24, Y+6	; 0x06
    17c6:	9f 81       	ldd	r25, Y+7	; 0x07
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	91 05       	cpc	r25, r1
    17cc:	69 f0       	breq	.+26     	; 0x17e8 <M_DIO_void_SetPinValue+0x7c>
    17ce:	cf c0       	rjmp	.+414    	; 0x196e <M_DIO_void_SetPinValue+0x202>
    17d0:	2e 81       	ldd	r18, Y+6	; 0x06
    17d2:	3f 81       	ldd	r19, Y+7	; 0x07
    17d4:	23 30       	cpi	r18, 0x03	; 3
    17d6:	31 05       	cpc	r19, r1
    17d8:	89 f1       	breq	.+98     	; 0x183c <M_DIO_void_SetPinValue+0xd0>
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	9f 81       	ldd	r25, Y+7	; 0x07
    17de:	84 30       	cpi	r24, 0x04	; 4
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <M_DIO_void_SetPinValue+0x7a>
    17e4:	40 c0       	rjmp	.+128    	; 0x1866 <M_DIO_void_SetPinValue+0xfa>
    17e6:	c3 c0       	rjmp	.+390    	; 0x196e <M_DIO_void_SetPinValue+0x202>
			       	{
			       	case PORTA_ID :                  /// Port A
			       		ClrBit(PORTA,pin);          ///  clear pin value set it to 0
    17e8:	ab e3       	ldi	r26, 0x3B	; 59
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	eb e3       	ldi	r30, 0x3B	; 59
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <M_DIO_void_SetPinValue+0x9a>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <M_DIO_void_SetPinValue+0x96>
    180a:	80 95       	com	r24
    180c:	84 23       	and	r24, r20
    180e:	8c 93       	st	X, r24
    1810:	ae c0       	rjmp	.+348    	; 0x196e <M_DIO_void_SetPinValue+0x202>
			       	break ;             /////// break case PORTA_ID

			       	case PORTB_ID :                 /// Port B
			       		ClrBit(PORTB,pin);          /// clear pin value set it to 0
    1812:	a8 e3       	ldi	r26, 0x38	; 56
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e8 e3       	ldi	r30, 0x38	; 56
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <M_DIO_void_SetPinValue+0xc4>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <M_DIO_void_SetPinValue+0xc0>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	99 c0       	rjmp	.+306    	; 0x196e <M_DIO_void_SetPinValue+0x202>
			       	break ;          /////// break case PORTB_ID

			       	case PORTC_ID :                 /// Port C
			       		ClrBit(PORTC,pin);          /// clear pin value set it to 0
    183c:	a5 e3       	ldi	r26, 0x35	; 53
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e5 e3       	ldi	r30, 0x35	; 53
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <M_DIO_void_SetPinValue+0xee>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <M_DIO_void_SetPinValue+0xea>
    185e:	80 95       	com	r24
    1860:	84 23       	and	r24, r20
    1862:	8c 93       	st	X, r24
    1864:	84 c0       	rjmp	.+264    	; 0x196e <M_DIO_void_SetPinValue+0x202>
			       	break ;         /////// break case PORTC_ID

			       	case PORTD_ID :                 /// Port D
			       		ClrBit(PORTD,pin);         /// clear pin value set it to 0
    1866:	a2 e3       	ldi	r26, 0x32	; 50
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e2 e3       	ldi	r30, 0x32	; 50
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <M_DIO_void_SetPinValue+0x118>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <M_DIO_void_SetPinValue+0x114>
    1888:	80 95       	com	r24
    188a:	84 23       	and	r24, r20
    188c:	8c 93       	st	X, r24
    188e:	6f c0       	rjmp	.+222    	; 0x196e <M_DIO_void_SetPinValue+0x202>
		 break;   /////// break case LOW

		 /// case  HIGH means that the Value of Pin = 1
		 case HIGH :
			 //// SWITCH too determine the Port of the Pin
			        switch (port)
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	3d 83       	std	Y+5, r19	; 0x05
    1898:	2c 83       	std	Y+4, r18	; 0x04
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	91 05       	cpc	r25, r1
    18a2:	51 f1       	breq	.+84     	; 0x18f8 <M_DIO_void_SetPinValue+0x18c>
    18a4:	2c 81       	ldd	r18, Y+4	; 0x04
    18a6:	3d 81       	ldd	r19, Y+5	; 0x05
    18a8:	23 30       	cpi	r18, 0x03	; 3
    18aa:	31 05       	cpc	r19, r1
    18ac:	34 f4       	brge	.+12     	; 0x18ba <M_DIO_void_SetPinValue+0x14e>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	61 f0       	breq	.+24     	; 0x18d0 <M_DIO_void_SetPinValue+0x164>
    18b8:	5a c0       	rjmp	.+180    	; 0x196e <M_DIO_void_SetPinValue+0x202>
    18ba:	2c 81       	ldd	r18, Y+4	; 0x04
    18bc:	3d 81       	ldd	r19, Y+5	; 0x05
    18be:	23 30       	cpi	r18, 0x03	; 3
    18c0:	31 05       	cpc	r19, r1
    18c2:	71 f1       	breq	.+92     	; 0x1920 <M_DIO_void_SetPinValue+0x1b4>
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	91 05       	cpc	r25, r1
    18cc:	e9 f1       	breq	.+122    	; 0x1948 <M_DIO_void_SetPinValue+0x1dc>
    18ce:	4f c0       	rjmp	.+158    	; 0x196e <M_DIO_void_SetPinValue+0x202>
			        	{
			        	case PORTA_ID :                /// Port A
			        		SetBit(PORTA,pin);         /// SET pin value set it to 1
    18d0:	ab e3       	ldi	r26, 0x3B	; 59
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb e3       	ldi	r30, 0x3B	; 59
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <M_DIO_void_SetPinValue+0x182>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <M_DIO_void_SetPinValue+0x17e>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	3b c0       	rjmp	.+118    	; 0x196e <M_DIO_void_SetPinValue+0x202>
			        	break ;             /////// break case PORTA_ID

			        	case PORTB_ID :                 /// Port B
			        		SetBit(PORTB,pin);         /// SET pin value set it to 1
    18f8:	a8 e3       	ldi	r26, 0x38	; 56
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <M_DIO_void_SetPinValue+0x1aa>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <M_DIO_void_SetPinValue+0x1a6>
    191a:	84 2b       	or	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	27 c0       	rjmp	.+78     	; 0x196e <M_DIO_void_SetPinValue+0x202>
			        	break ;          /////// break case PORTB_ID

			        	case PORTC_ID :                /// Port C
			        		SetBit(PORTC,pin);        /// SET pin value set it to 1
    1920:	a5 e3       	ldi	r26, 0x35	; 53
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e3       	ldi	r30, 0x35	; 53
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <M_DIO_void_SetPinValue+0x1d2>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <M_DIO_void_SetPinValue+0x1ce>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	13 c0       	rjmp	.+38     	; 0x196e <M_DIO_void_SetPinValue+0x202>
			        	break ;        /////// break case PORTC_ID

			        	case PORTD_ID :               /// Port D
			        		SetBit(PORTD,pin);        /// SET pin value set it to 1
    1948:	a2 e3       	ldi	r26, 0x32	; 50
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e2 e3       	ldi	r30, 0x32	; 50
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <M_DIO_void_SetPinValue+0x1fa>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <M_DIO_void_SetPinValue+0x1f6>
    196a:	84 2b       	or	r24, r20
    196c:	8c 93       	st	X, r24
		break;         /////// break case HIGH

		default:   /*  Do nothing */       break;
		///* default of switch (value) */
		}
}
    196e:	29 96       	adiw	r28, 0x09	; 9
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <M_DIO_void_PinTog>:
    //// Toggle Pin function //////
void M_DIO_void_PinTog(u8 port , u8 pin)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	00 d0       	rcall	.+0      	; 0x1986 <M_DIO_void_PinTog+0x6>
    1986:	00 d0       	rcall	.+0      	; 0x1988 <M_DIO_void_PinTog+0x8>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	6a 83       	std	Y+2, r22	; 0x02
	//// SWITCH too determine the Port of the Pin
	switch (port)
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	3c 83       	std	Y+4, r19	; 0x04
    1998:	2b 83       	std	Y+3, r18	; 0x03
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	91 05       	cpc	r25, r1
    19a2:	51 f1       	breq	.+84     	; 0x19f8 <M_DIO_void_PinTog+0x78>
    19a4:	2b 81       	ldd	r18, Y+3	; 0x03
    19a6:	3c 81       	ldd	r19, Y+4	; 0x04
    19a8:	23 30       	cpi	r18, 0x03	; 3
    19aa:	31 05       	cpc	r19, r1
    19ac:	34 f4       	brge	.+12     	; 0x19ba <M_DIO_void_PinTog+0x3a>
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 05       	cpc	r25, r1
    19b6:	61 f0       	breq	.+24     	; 0x19d0 <M_DIO_void_PinTog+0x50>
    19b8:	5a c0       	rjmp	.+180    	; 0x1a6e <M_DIO_void_PinTog+0xee>
    19ba:	2b 81       	ldd	r18, Y+3	; 0x03
    19bc:	3c 81       	ldd	r19, Y+4	; 0x04
    19be:	23 30       	cpi	r18, 0x03	; 3
    19c0:	31 05       	cpc	r19, r1
    19c2:	71 f1       	breq	.+92     	; 0x1a20 <M_DIO_void_PinTog+0xa0>
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	91 05       	cpc	r25, r1
    19cc:	e9 f1       	breq	.+122    	; 0x1a48 <M_DIO_void_PinTog+0xc8>
    19ce:	4f c0       	rjmp	.+158    	; 0x1a6e <M_DIO_void_PinTog+0xee>
		{

		  case PORTA_ID :                           /// Port A
			  TogBit(PORTA,pin);                    /// Toggle pin value
    19d0:	ab e3       	ldi	r26, 0x3B	; 59
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	eb e3       	ldi	r30, 0x3B	; 59
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <M_DIO_void_PinTog+0x6e>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <M_DIO_void_PinTog+0x6a>
    19f2:	84 27       	eor	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	3b c0       	rjmp	.+118    	; 0x1a6e <M_DIO_void_PinTog+0xee>
		  break ;                       //// break case PORTA_ID

		  case PORTB_ID :                            /// Port B
			  TogBit(PORTB,pin);                     /// Toggle pin value
    19f8:	a8 e3       	ldi	r26, 0x38	; 56
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e8 e3       	ldi	r30, 0x38	; 56
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <M_DIO_void_PinTog+0x96>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <M_DIO_void_PinTog+0x92>
    1a1a:	84 27       	eor	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	27 c0       	rjmp	.+78     	; 0x1a6e <M_DIO_void_PinTog+0xee>
		  break ;                      /// / break case PORTB_ID

		  case PORTC_ID :                           /// Port C
			  TogBit(PORTC,pin);                   /// Toggle pin value
    1a20:	a5 e3       	ldi	r26, 0x35	; 53
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <M_DIO_void_PinTog+0xbe>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <M_DIO_void_PinTog+0xba>
    1a42:	84 27       	eor	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	13 c0       	rjmp	.+38     	; 0x1a6e <M_DIO_void_PinTog+0xee>
		  break ;                       ///break case PORTC_ID

		  case PORTD_ID :                          /// Port D
			  TogBit(PORTD,pin);                    /// Toggle pin value
    1a48:	a2 e3       	ldi	r26, 0x32	; 50
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e2 e3       	ldi	r30, 0x32	; 50
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <M_DIO_void_PinTog+0xe6>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <M_DIO_void_PinTog+0xe2>
    1a6a:	84 27       	eor	r24, r20
    1a6c:	8c 93       	st	X, r24
		  break ;                       ///break case PORTD_ID

		  default :       /*  Do nothing */      break;
		  ///* default of switch (port) */
		}
}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <M_DIO_U8_PinRead>:
u8 M_DIO_U8_PinRead(u8 port , u8 pin)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <M_DIO_U8_PinRead+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <M_DIO_U8_PinRead+0x8>
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
    1a8c:	6b 83       	std	Y+3, r22	; 0x03
	/// local variable
	u8 local_u8_PinValue = 0;
    1a8e:	19 82       	std	Y+1, r1	; 0x01
	//// SWITCH too determine the Port of the Pin
		switch (port)
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3d 83       	std	Y+5, r19	; 0x05
    1a98:	2c 83       	std	Y+4, r18	; 0x04
    1a9a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a9c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a9e:	42 30       	cpi	r20, 0x02	; 2
    1aa0:	51 05       	cpc	r21, r1
    1aa2:	41 f1       	breq	.+80     	; 0x1af4 <M_DIO_U8_PinRead+0x78>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 05       	cpc	r25, r1
    1aac:	34 f4       	brge	.+12     	; 0x1aba <M_DIO_U8_PinRead+0x3e>
    1aae:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab2:	21 30       	cpi	r18, 0x01	; 1
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	61 f0       	breq	.+24     	; 0x1ad0 <M_DIO_U8_PinRead+0x54>
    1ab8:	52 c0       	rjmp	.+164    	; 0x1b5e <M_DIO_U8_PinRead+0xe2>
    1aba:	4c 81       	ldd	r20, Y+4	; 0x04
    1abc:	5d 81       	ldd	r21, Y+5	; 0x05
    1abe:	43 30       	cpi	r20, 0x03	; 3
    1ac0:	51 05       	cpc	r21, r1
    1ac2:	51 f1       	breq	.+84     	; 0x1b18 <M_DIO_U8_PinRead+0x9c>
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	91 05       	cpc	r25, r1
    1acc:	b9 f1       	breq	.+110    	; 0x1b3c <M_DIO_U8_PinRead+0xc0>
    1ace:	47 c0       	rjmp	.+142    	; 0x1b5e <M_DIO_U8_PinRead+0xe2>
			{

			  case PORTA_ID :                           /// Port A
				  local_u8_PinValue = GetBit(PINA,pin);                    /// Read pin value
    1ad0:	e9 e3       	ldi	r30, 0x39	; 57
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a9 01       	movw	r20, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <M_DIO_U8_PinRead+0x6c>
    1ae4:	55 95       	asr	r21
    1ae6:	47 95       	ror	r20
    1ae8:	8a 95       	dec	r24
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <M_DIO_U8_PinRead+0x68>
    1aec:	ca 01       	movw	r24, r20
    1aee:	81 70       	andi	r24, 0x01	; 1
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	35 c0       	rjmp	.+106    	; 0x1b5e <M_DIO_U8_PinRead+0xe2>
			  break ;                       //// break case PORTA_ID

			  case PORTB_ID :                            /// Port B
				  local_u8_PinValue = GetBit(PINB,pin);                     /// Read pin value
    1af4:	e6 e3       	ldi	r30, 0x36	; 54
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <M_DIO_U8_PinRead+0x90>
    1b08:	55 95       	asr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <M_DIO_U8_PinRead+0x8c>
    1b10:	ca 01       	movw	r24, r20
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	23 c0       	rjmp	.+70     	; 0x1b5e <M_DIO_U8_PinRead+0xe2>
			  break ;                      /// / break case PORTB_ID

			  case PORTC_ID :                           /// Port C
				  local_u8_PinValue = GetBit(PINC,pin);                   /// Read pin value
    1b18:	e3 e3       	ldi	r30, 0x33	; 51
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a9 01       	movw	r20, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <M_DIO_U8_PinRead+0xb4>
    1b2c:	55 95       	asr	r21
    1b2e:	47 95       	ror	r20
    1b30:	8a 95       	dec	r24
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <M_DIO_U8_PinRead+0xb0>
    1b34:	ca 01       	movw	r24, r20
    1b36:	81 70       	andi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	11 c0       	rjmp	.+34     	; 0x1b5e <M_DIO_U8_PinRead+0xe2>
			  break ;                       ///break case PORTC_ID

			  case PORTD_ID :                          /// Port D
				  local_u8_PinValue = GetBit(PIND,pin);                    /// Read pin value
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a9 01       	movw	r20, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <M_DIO_U8_PinRead+0xd8>
    1b50:	55 95       	asr	r21
    1b52:	47 95       	ror	r20
    1b54:	8a 95       	dec	r24
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <M_DIO_U8_PinRead+0xd4>
    1b58:	ca 01       	movw	r24, r20
    1b5a:	81 70       	andi	r24, 0x01	; 1
    1b5c:	89 83       	std	Y+1, r24	; 0x01
			  break ;                       ///break case PORTD_ID

			  default :       /*  Do nothing */      break;
			  ///* default of switch (port) */
			}
   return local_u8_PinValue;
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <M_ADC_void_AdcInt>:


u16 x =0;

void M_ADC_void_AdcInt(void)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
#if V_REF == AVCC
	/// Selecting voltage reference to AVCC
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG, REFS0);
    1b78:	a7 e2       	ldi	r26, 0x27	; 39
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e7 e2       	ldi	r30, 0x27	; 39
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	8c 93       	st	X, r24
	// clear REFS0 bit in ADMUX_REG
	ClrBit(ADMUX_REG ,REFS1);
    1b86:	a7 e2       	ldi	r26, 0x27	; 39
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e7 e2       	ldi	r30, 0x27	; 39
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8f 77       	andi	r24, 0x7F	; 127
    1b92:	8c 93       	st	X, r24
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG ,REFS1);
#endif
	/// selecting Adjustment  Result
	// Clear ADLAR bit on ADMUX_REG to select right adjust result
	ClrBit(ADMUX_REG , ADLAR);
    1b94:	a7 e2       	ldi	r26, 0x27	; 39
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e7 e2       	ldi	r30, 0x27	; 39
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ba0:	8c 93       	st	X, r24
	/// selecting  channel
	// clear the four bit (MUX4 MUX3 MUX2 MUX1 MUX0 ) to select ADC0
	ClrBit(ADMUX_REG , MUX0);
    1ba2:	a7 e2       	ldi	r26, 0x27	; 39
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e7 e2       	ldi	r30, 0x27	; 39
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	8e 7f       	andi	r24, 0xFE	; 254
    1bae:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX1);
    1bb0:	a7 e2       	ldi	r26, 0x27	; 39
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e7 e2       	ldi	r30, 0x27	; 39
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8d 7f       	andi	r24, 0xFD	; 253
    1bbc:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX2);
    1bbe:	a7 e2       	ldi	r26, 0x27	; 39
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e7 e2       	ldi	r30, 0x27	; 39
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8b 7f       	andi	r24, 0xFB	; 251
    1bca:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX3);
    1bcc:	a7 e2       	ldi	r26, 0x27	; 39
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e7 e2       	ldi	r30, 0x27	; 39
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	87 7f       	andi	r24, 0xF7	; 247
    1bd8:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX4);
    1bda:	a7 e2       	ldi	r26, 0x27	; 39
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e7 e2       	ldi	r30, 0x27	; 39
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 7e       	andi	r24, 0xEF	; 239
    1be6:	8c 93       	st	X, r24

	//// select  Prescaler
	// To select 128 as devision factor C the three bit (ADPS2 ADPS1 ADPS0 ) on  ADCSRA_REG to
	SetBit(ADCSRA_REG , ADPS0 );
    1be8:	a6 e2       	ldi	r26, 0x26	; 38
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e6 e2       	ldi	r30, 0x26	; 38
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	81 60       	ori	r24, 0x01	; 1
    1bf4:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1bf6:	a6 e2       	ldi	r26, 0x26	; 38
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e6 e2       	ldi	r30, 0x26	; 38
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	82 60       	ori	r24, 0x02	; 2
    1c02:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1c04:	a6 e2       	ldi	r26, 0x26	; 38
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e6 e2       	ldi	r30, 0x26	; 38
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	82 60       	ori	r24, 0x02	; 2
    1c10:	8c 93       	st	X, r24

	/// To Enable Auto Trigger mode -> free running mode
	// set ADATE bit in  ADCSRA_REG
	 SetBit(ADCSRA_REG , ADATE );
    1c12:	a6 e2       	ldi	r26, 0x26	; 38
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e6 e2       	ldi	r30, 0x26	; 38
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 62       	ori	r24, 0x20	; 32
    1c1e:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS2 );
    1c20:	a0 e5       	ldi	r26, 0x50	; 80
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e0 e5       	ldi	r30, 0x50	; 80
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8f 77       	andi	r24, 0x7F	; 127
    1c2c:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS1 );
    1c2e:	a0 e5       	ldi	r26, 0x50	; 80
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e0 e5       	ldi	r30, 0x50	; 80
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8f 7b       	andi	r24, 0xBF	; 191
    1c3a:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS0 );
    1c3c:	a0 e5       	ldi	r26, 0x50	; 80
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e0 e5       	ldi	r30, 0x50	; 80
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 7d       	andi	r24, 0xDF	; 223
    1c48:	8c 93       	st	X, r24

	///Enable the ADC circuit
	//set bit ADEN on ADCSRA_REG
	SetBit(ADCSRA_REG , ADEN );
    1c4a:	a6 e2       	ldi	r26, 0x26	; 38
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e6 e2       	ldi	r30, 0x26	; 38
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 68       	ori	r24, 0x80	; 128
    1c56:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG ,ADSC );     //// to start conversion
    M_GIE_void_GIE_EN();          //// to enable  general interrupt
	SetBit(ADCSRA_REG ,ADIE );   //// to enable  ADC interrupt

#endif
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <M_ADC_u16_AdcRead>:
#if  ADC_MODE ==  ADC_POL
u16 M_ADC_u16_AdcRead(void)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
	//u16 Local_u16_value = 0;
	////////to start conversion
	//set ADSC bit in  ADCSRA_REG
	SetBit(ADCSRA_REG ,ADSC );
    1c66:	a6 e2       	ldi	r26, 0x26	; 38
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e6 e2       	ldi	r30, 0x26	; 38
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 64       	ori	r24, 0x40	; 64
    1c72:	8c 93       	st	X, r24

   /// check  ADC Interrupt Flag to see if conversion completed or not
  	while(GetBit(ADCSRA_REG, ADIF) == 0);
    1c74:	e6 e2       	ldi	r30, 0x26	; 38
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	82 95       	swap	r24
    1c7c:	8f 70       	andi	r24, 0x0F	; 15
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	81 70       	andi	r24, 0x01	; 1
    1c84:	90 70       	andi	r25, 0x00	; 0
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	a9 f3       	breq	.-22     	; 0x1c74 <M_ADC_u16_AdcRead+0x16>
	return ADC_REG ;
    1c8a:	e4 e2       	ldi	r30, 0x24	; 36
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <H_TEMPSENSOR_void_TempSensorInt>:
 *      Author: AbdelRahman Atef
 */
#include "DIO_Int.h"
#include "TEMPSENSOR_Int.h"
void H_TEMPSENSOR_void_TempSensorInt(void)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
     M_DIO_void_SetPinDirection(PORTA_ID, PIN0, INPUT);
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
}
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <H_TEMPSENSOR_void_TempSensorRead>:
u8 H_TEMPSENSOR_void_TempSensorRead(void)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <H_TEMPSENSOR_void_TempSensorRead+0x6>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
  u8 local_u8_AdcReading=0;
    1cba:	1a 82       	std	Y+2, r1	; 0x02
  local_u8_AdcReading = M_ADC_u16_AdcRead();
    1cbc:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <M_ADC_u16_AdcRead>
    1cc0:	8a 83       	std	Y+2, r24	; 0x02
  u8 Temp =	  (((u32)local_u8_AdcReading * 500 )/1023);
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	24 ef       	ldi	r18, 0xF4	; 244
    1cce:	31 e0       	ldi	r19, 0x01	; 1
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 04 22 	call	0x4408	; 0x4408 <__mulsi3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	2f ef       	ldi	r18, 0xFF	; 255
    1ce2:	33 e0       	ldi	r19, 0x03	; 3
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 42 22 	call	0x4484	; 0x4484 <__udivmodsi4>
    1cf0:	da 01       	movw	r26, r20
    1cf2:	c9 01       	movw	r24, r18
    1cf4:	89 83       	std	Y+1, r24	; 0x01
  return Temp;
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <H_SSD_Void_SsdInt>:

#include "SSD_int.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_SSD_Void_SsdInt(void)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
	///******_Setting SSEG_LED_A_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_A_PORT, SSEG_LED_A_PIN, OUTPUT);
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_B_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_B_PORT, SSEG_LED_B_PIN, OUTPUT);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_C_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_C_PORT, SSEG_LED_C_PIN, OUTPUT);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_D_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_D_PORT, SSEG_LED_D_PIN, OUTPUT);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	63 e0       	ldi	r22, 0x03	; 3
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_E_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_E_PORT, SSEG_LED_E_PIN, OUTPUT);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	64 e0       	ldi	r22, 0x04	; 4
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_F_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_F_PORT, SSEG_LED_F_PIN, OUTPUT);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	65 e0       	ldi	r22, 0x05	; 5
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_G_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_G_PORT, SSEG_LED_G_PIN, OUTPUT);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	66 e0       	ldi	r22, 0x06	; 6
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>

	///******_Setting SSEG_DOT_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_DOT_PORT  , SSEG_DOT_PIN  , OUTPUT);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	67 e0       	ldi	r22, 0x07	; 7
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>


	///******_Setting SSEG_EN1_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN1_PORT  , SSEG_EN1_PIN   , OUTPUT);
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	66 e0       	ldi	r22, 0x06	; 6
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_EN2_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN2_PORT  , SSEG_EN2_PIN   , OUTPUT);
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	67 e0       	ldi	r22, 0x07	; 7
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>


}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <H_SSD_Void_SsdDisplay>:

void H_SSD_Void_SsdDisplay(u8 Local_u8_Num)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	a4 97       	sbiw	r28, 0x24	; 36
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	88 a3       	std	Y+32, r24	; 0x20
  ///***** Local_u8_Units is a local variable to get Units number *******//
	 u8 Local_u8_Units = Local_u8_Num %10;
    1d8a:	88 a1       	ldd	r24, Y+32	; 0x20
    1d8c:	9a e0       	ldi	r25, 0x0A	; 10
    1d8e:	69 2f       	mov	r22, r25
    1d90:	0e 94 23 22 	call	0x4446	; 0x4446 <__udivmodqi4>
    1d94:	89 2f       	mov	r24, r25
    1d96:	8f 8f       	std	Y+31, r24	; 0x1f
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
    1d98:	88 a1       	ldd	r24, Y+32	; 0x20
    1d9a:	9a e0       	ldi	r25, 0x0A	; 10
    1d9c:	69 2f       	mov	r22, r25
    1d9e:	0e 94 23 22 	call	0x4446	; 0x4446 <__udivmodqi4>
    1da2:	8e 8f       	std	Y+30, r24	; 0x1e
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    1da4:	1d 8e       	std	Y+29, r1	; 0x1d
    1da6:	77 c4       	rjmp	.+2286   	; 0x2696 <H_SSD_Void_SsdDisplay+0x922>
	 	{
///********* switch case to Display the Units number ***********//
	 switch (Local_u8_Units)
    1da8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	3c a3       	std	Y+36, r19	; 0x24
    1db0:	2b a3       	std	Y+35, r18	; 0x23
    1db2:	8b a1       	ldd	r24, Y+35	; 0x23
    1db4:	9c a1       	ldd	r25, Y+36	; 0x24
    1db6:	84 30       	cpi	r24, 0x04	; 4
    1db8:	91 05       	cpc	r25, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <H_SSD_Void_SsdDisplay+0x4a>
    1dbc:	d7 c0       	rjmp	.+430    	; 0x1f6c <H_SSD_Void_SsdDisplay+0x1f8>
    1dbe:	2b a1       	ldd	r18, Y+35	; 0x23
    1dc0:	3c a1       	ldd	r19, Y+36	; 0x24
    1dc2:	25 30       	cpi	r18, 0x05	; 5
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	ec f4       	brge	.+58     	; 0x1e02 <H_SSD_Void_SsdDisplay+0x8e>
    1dc8:	8b a1       	ldd	r24, Y+35	; 0x23
    1dca:	9c a1       	ldd	r25, Y+36	; 0x24
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	91 05       	cpc	r25, r1
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <H_SSD_Void_SsdDisplay+0x60>
    1dd2:	60 c0       	rjmp	.+192    	; 0x1e94 <H_SSD_Void_SsdDisplay+0x120>
    1dd4:	2b a1       	ldd	r18, Y+35	; 0x23
    1dd6:	3c a1       	ldd	r19, Y+36	; 0x24
    1dd8:	22 30       	cpi	r18, 0x02	; 2
    1dda:	31 05       	cpc	r19, r1
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <H_SSD_Void_SsdDisplay+0x74>
    1dde:	8b a1       	ldd	r24, Y+35	; 0x23
    1de0:	9c a1       	ldd	r25, Y+36	; 0x24
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	99 f1       	breq	.+102    	; 0x1e4c <H_SSD_Void_SsdDisplay+0xd8>
    1de6:	99 c1       	rjmp	.+818    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
    1de8:	2b a1       	ldd	r18, Y+35	; 0x23
    1dea:	3c a1       	ldd	r19, Y+36	; 0x24
    1dec:	22 30       	cpi	r18, 0x02	; 2
    1dee:	31 05       	cpc	r19, r1
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <H_SSD_Void_SsdDisplay+0x80>
    1df2:	74 c0       	rjmp	.+232    	; 0x1edc <H_SSD_Void_SsdDisplay+0x168>
    1df4:	8b a1       	ldd	r24, Y+35	; 0x23
    1df6:	9c a1       	ldd	r25, Y+36	; 0x24
    1df8:	83 30       	cpi	r24, 0x03	; 3
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <H_SSD_Void_SsdDisplay+0x8c>
    1dfe:	92 c0       	rjmp	.+292    	; 0x1f24 <H_SSD_Void_SsdDisplay+0x1b0>
    1e00:	8c c1       	rjmp	.+792    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
    1e02:	2b a1       	ldd	r18, Y+35	; 0x23
    1e04:	3c a1       	ldd	r19, Y+36	; 0x24
    1e06:	27 30       	cpi	r18, 0x07	; 7
    1e08:	31 05       	cpc	r19, r1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <H_SSD_Void_SsdDisplay+0x9a>
    1e0c:	1b c1       	rjmp	.+566    	; 0x2044 <H_SSD_Void_SsdDisplay+0x2d0>
    1e0e:	8b a1       	ldd	r24, Y+35	; 0x23
    1e10:	9c a1       	ldd	r25, Y+36	; 0x24
    1e12:	88 30       	cpi	r24, 0x08	; 8
    1e14:	91 05       	cpc	r25, r1
    1e16:	6c f4       	brge	.+26     	; 0x1e32 <H_SSD_Void_SsdDisplay+0xbe>
    1e18:	2b a1       	ldd	r18, Y+35	; 0x23
    1e1a:	3c a1       	ldd	r19, Y+36	; 0x24
    1e1c:	25 30       	cpi	r18, 0x05	; 5
    1e1e:	31 05       	cpc	r19, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <H_SSD_Void_SsdDisplay+0xb0>
    1e22:	c8 c0       	rjmp	.+400    	; 0x1fb4 <H_SSD_Void_SsdDisplay+0x240>
    1e24:	8b a1       	ldd	r24, Y+35	; 0x23
    1e26:	9c a1       	ldd	r25, Y+36	; 0x24
    1e28:	86 30       	cpi	r24, 0x06	; 6
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <H_SSD_Void_SsdDisplay+0xbc>
    1e2e:	e6 c0       	rjmp	.+460    	; 0x1ffc <H_SSD_Void_SsdDisplay+0x288>
    1e30:	74 c1       	rjmp	.+744    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
    1e32:	2b a1       	ldd	r18, Y+35	; 0x23
    1e34:	3c a1       	ldd	r19, Y+36	; 0x24
    1e36:	28 30       	cpi	r18, 0x08	; 8
    1e38:	31 05       	cpc	r19, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <H_SSD_Void_SsdDisplay+0xca>
    1e3c:	27 c1       	rjmp	.+590    	; 0x208c <H_SSD_Void_SsdDisplay+0x318>
    1e3e:	8b a1       	ldd	r24, Y+35	; 0x23
    1e40:	9c a1       	ldd	r25, Y+36	; 0x24
    1e42:	89 30       	cpi	r24, 0x09	; 9
    1e44:	91 05       	cpc	r25, r1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <H_SSD_Void_SsdDisplay+0xd6>
    1e48:	45 c1       	rjmp	.+650    	; 0x20d4 <H_SSD_Void_SsdDisplay+0x360>
    1e4a:	67 c1       	rjmp	.+718    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	 {
	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	62 e0       	ldi	r22, 0x02	; 2
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	63 e0       	ldi	r22, 0x03	; 3
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	64 e0       	ldi	r22, 0x04	; 4
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	65 e0       	ldi	r22, 0x05	; 5
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	66 e0       	ldi	r22, 0x06	; 6
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    1e92:	43 c1       	rjmp	.+646    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	63 e0       	ldi	r22, 0x03	; 3
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	64 e0       	ldi	r22, 0x04	; 4
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	65 e0       	ldi	r22, 0x05	; 5
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	66 e0       	ldi	r22, 0x06	; 6
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    1eda:	1f c1       	rjmp	.+574    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	63 e0       	ldi	r22, 0x03	; 3
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	64 e0       	ldi	r22, 0x04	; 4
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	65 e0       	ldi	r22, 0x05	; 5
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	66 e0       	ldi	r22, 0x06	; 6
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    1f22:	fb c0       	rjmp	.+502    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	63 e0       	ldi	r22, 0x03	; 3
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	64 e0       	ldi	r22, 0x04	; 4
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	65 e0       	ldi	r22, 0x05	; 5
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	66 e0       	ldi	r22, 0x06	; 6
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    1f6a:	d7 c0       	rjmp	.+430    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	61 e0       	ldi	r22, 0x01	; 1
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	62 e0       	ldi	r22, 0x02	; 2
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	63 e0       	ldi	r22, 0x03	; 3
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	64 e0       	ldi	r22, 0x04	; 4
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	65 e0       	ldi	r22, 0x05	; 5
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	66 e0       	ldi	r22, 0x06	; 6
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    1fb2:	b3 c0       	rjmp	.+358    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	61 e0       	ldi	r22, 0x01	; 1
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	62 e0       	ldi	r22, 0x02	; 2
    1fcc:	41 e0       	ldi	r20, 0x01	; 1
    1fce:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	63 e0       	ldi	r22, 0x03	; 3
    1fd6:	41 e0       	ldi	r20, 0x01	; 1
    1fd8:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	64 e0       	ldi	r22, 0x04	; 4
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	65 e0       	ldi	r22, 0x05	; 5
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	66 e0       	ldi	r22, 0x06	; 6
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    1ffa:	8f c0       	rjmp	.+286    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	41 e0       	ldi	r20, 0x01	; 1
    2002:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	62 e0       	ldi	r22, 0x02	; 2
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	63 e0       	ldi	r22, 0x03	; 3
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	64 e0       	ldi	r22, 0x04	; 4
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	65 e0       	ldi	r22, 0x05	; 5
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	66 e0       	ldi	r22, 0x06	; 6
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2042:	6b c0       	rjmp	.+214    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	61 e0       	ldi	r22, 0x01	; 1
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	62 e0       	ldi	r22, 0x02	; 2
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	63 e0       	ldi	r22, 0x03	; 3
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	64 e0       	ldi	r22, 0x04	; 4
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	65 e0       	ldi	r22, 0x05	; 5
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	66 e0       	ldi	r22, 0x06	; 6
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    208a:	47 c0       	rjmp	.+142    	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	62 e0       	ldi	r22, 0x02	; 2
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	63 e0       	ldi	r22, 0x03	; 3
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	64 e0       	ldi	r22, 0x04	; 4
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	65 e0       	ldi	r22, 0x05	; 5
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	66 e0       	ldi	r22, 0x06	; 6
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    20d2:	23 c0       	rjmp	.+70     	; 0x211a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	61 e0       	ldi	r22, 0x01	; 1
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	62 e0       	ldi	r22, 0x02	; 2
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	63 e0       	ldi	r22, 0x03	; 3
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	64 e0       	ldi	r22, 0x04	; 4
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	65 e0       	ldi	r22, 0x05	; 5
    210a:	41 e0       	ldi	r20, 0x01	; 1
    210c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	66 e0       	ldi	r22, 0x06	; 6
    2114:	41 e0       	ldi	r20, 0x01	; 1
    2116:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
  * To get units Numbers displayed on
  * Enable the SSEG_EN1_PIN = SetBit LOW
  * and
  * Disable the SSEG_EN2_PIN = SetBit HIGH
  */
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  LOW);
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	66 e0       	ldi	r22, 0x06	; 6
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	67 e0       	ldi	r22, 0x07	; 7
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e8       	ldi	r26, 0x80	; 128
    2134:	bf e3       	ldi	r27, 0x3F	; 63
    2136:	89 8f       	std	Y+25, r24	; 0x19
    2138:	9a 8f       	std	Y+26, r25	; 0x1a
    213a:	ab 8f       	std	Y+27, r26	; 0x1b
    213c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	69 8d       	ldd	r22, Y+25	; 0x19
    2140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a e7       	ldi	r20, 0x7A	; 122
    214c:	53 e4       	ldi	r21, 0x43	; 67
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8d 8b       	std	Y+21, r24	; 0x15
    2158:	9e 8b       	std	Y+22, r25	; 0x16
    215a:	af 8b       	std	Y+23, r26	; 0x17
    215c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    215e:	6d 89       	ldd	r22, Y+21	; 0x15
    2160:	7e 89       	ldd	r23, Y+22	; 0x16
    2162:	8f 89       	ldd	r24, Y+23	; 0x17
    2164:	98 8d       	ldd	r25, Y+24	; 0x18
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <H_SSD_Void_SsdDisplay+0x40c>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <H_SSD_Void_SsdDisplay+0x48a>
	else if (__tmp > 65535)
    2180:	6d 89       	ldd	r22, Y+21	; 0x15
    2182:	7e 89       	ldd	r23, Y+22	; 0x16
    2184:	8f 89       	ldd	r24, Y+23	; 0x17
    2186:	98 8d       	ldd	r25, Y+24	; 0x18
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <H_SSD_Void_SsdDisplay+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	69 8d       	ldd	r22, Y+25	; 0x19
    219a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9c 8b       	std	Y+20, r25	; 0x14
    21be:	8b 8b       	std	Y+19, r24	; 0x13
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <H_SSD_Void_SsdDisplay+0x46c>
    21c2:	89 e1       	ldi	r24, 0x19	; 25
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9a 8b       	std	Y+18, r25	; 0x12
    21c8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	9a 89       	ldd	r25, Y+18	; 0x12
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <H_SSD_Void_SsdDisplay+0x45a>
    21d2:	9a 8b       	std	Y+18, r25	; 0x12
    21d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <H_SSD_Void_SsdDisplay+0x44e>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <H_SSD_Void_SsdDisplay+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6d 89       	ldd	r22, Y+21	; 0x15
    21ec:	7e 89       	ldd	r23, Y+22	; 0x16
    21ee:	8f 89       	ldd	r24, Y+23	; 0x17
    21f0:	98 8d       	ldd	r25, Y+24	; 0x18
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	98 8b       	std	Y+16, r25	; 0x10
    2204:	8f 87       	std	Y+15, r24	; 0x0f
    2206:	8f 85       	ldd	r24, Y+15	; 0x0f
    2208:	98 89       	ldd	r25, Y+16	; 0x10
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <H_SSD_Void_SsdDisplay+0x496>
    220e:	98 8b       	std	Y+16, r25	; 0x10
    2210:	8f 87       	std	Y+15, r24	; 0x0f
	 	 	         _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  HIGH);
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	66 e0       	ldi	r22, 0x06	; 6
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>



///********* switch case to Display the Tens number ***********//
	 switch (Local_u8_Tens)
    221c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	3a a3       	std	Y+34, r19	; 0x22
    2224:	29 a3       	std	Y+33, r18	; 0x21
    2226:	89 a1       	ldd	r24, Y+33	; 0x21
    2228:	9a a1       	ldd	r25, Y+34	; 0x22
    222a:	84 30       	cpi	r24, 0x04	; 4
    222c:	91 05       	cpc	r25, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <H_SSD_Void_SsdDisplay+0x4be>
    2230:	d7 c0       	rjmp	.+430    	; 0x23e0 <H_SSD_Void_SsdDisplay+0x66c>
    2232:	29 a1       	ldd	r18, Y+33	; 0x21
    2234:	3a a1       	ldd	r19, Y+34	; 0x22
    2236:	25 30       	cpi	r18, 0x05	; 5
    2238:	31 05       	cpc	r19, r1
    223a:	ec f4       	brge	.+58     	; 0x2276 <H_SSD_Void_SsdDisplay+0x502>
    223c:	89 a1       	ldd	r24, Y+33	; 0x21
    223e:	9a a1       	ldd	r25, Y+34	; 0x22
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	91 05       	cpc	r25, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <H_SSD_Void_SsdDisplay+0x4d4>
    2246:	60 c0       	rjmp	.+192    	; 0x2308 <H_SSD_Void_SsdDisplay+0x594>
    2248:	29 a1       	ldd	r18, Y+33	; 0x21
    224a:	3a a1       	ldd	r19, Y+34	; 0x22
    224c:	22 30       	cpi	r18, 0x02	; 2
    224e:	31 05       	cpc	r19, r1
    2250:	2c f4       	brge	.+10     	; 0x225c <H_SSD_Void_SsdDisplay+0x4e8>
    2252:	89 a1       	ldd	r24, Y+33	; 0x21
    2254:	9a a1       	ldd	r25, Y+34	; 0x22
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	99 f1       	breq	.+102    	; 0x22c0 <H_SSD_Void_SsdDisplay+0x54c>
    225a:	99 c1       	rjmp	.+818    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
    225c:	29 a1       	ldd	r18, Y+33	; 0x21
    225e:	3a a1       	ldd	r19, Y+34	; 0x22
    2260:	22 30       	cpi	r18, 0x02	; 2
    2262:	31 05       	cpc	r19, r1
    2264:	09 f4       	brne	.+2      	; 0x2268 <H_SSD_Void_SsdDisplay+0x4f4>
    2266:	74 c0       	rjmp	.+232    	; 0x2350 <H_SSD_Void_SsdDisplay+0x5dc>
    2268:	89 a1       	ldd	r24, Y+33	; 0x21
    226a:	9a a1       	ldd	r25, Y+34	; 0x22
    226c:	83 30       	cpi	r24, 0x03	; 3
    226e:	91 05       	cpc	r25, r1
    2270:	09 f4       	brne	.+2      	; 0x2274 <H_SSD_Void_SsdDisplay+0x500>
    2272:	92 c0       	rjmp	.+292    	; 0x2398 <H_SSD_Void_SsdDisplay+0x624>
    2274:	8c c1       	rjmp	.+792    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
    2276:	29 a1       	ldd	r18, Y+33	; 0x21
    2278:	3a a1       	ldd	r19, Y+34	; 0x22
    227a:	27 30       	cpi	r18, 0x07	; 7
    227c:	31 05       	cpc	r19, r1
    227e:	09 f4       	brne	.+2      	; 0x2282 <H_SSD_Void_SsdDisplay+0x50e>
    2280:	1b c1       	rjmp	.+566    	; 0x24b8 <H_SSD_Void_SsdDisplay+0x744>
    2282:	89 a1       	ldd	r24, Y+33	; 0x21
    2284:	9a a1       	ldd	r25, Y+34	; 0x22
    2286:	88 30       	cpi	r24, 0x08	; 8
    2288:	91 05       	cpc	r25, r1
    228a:	6c f4       	brge	.+26     	; 0x22a6 <H_SSD_Void_SsdDisplay+0x532>
    228c:	29 a1       	ldd	r18, Y+33	; 0x21
    228e:	3a a1       	ldd	r19, Y+34	; 0x22
    2290:	25 30       	cpi	r18, 0x05	; 5
    2292:	31 05       	cpc	r19, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <H_SSD_Void_SsdDisplay+0x524>
    2296:	c8 c0       	rjmp	.+400    	; 0x2428 <H_SSD_Void_SsdDisplay+0x6b4>
    2298:	89 a1       	ldd	r24, Y+33	; 0x21
    229a:	9a a1       	ldd	r25, Y+34	; 0x22
    229c:	86 30       	cpi	r24, 0x06	; 6
    229e:	91 05       	cpc	r25, r1
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <H_SSD_Void_SsdDisplay+0x530>
    22a2:	e6 c0       	rjmp	.+460    	; 0x2470 <H_SSD_Void_SsdDisplay+0x6fc>
    22a4:	74 c1       	rjmp	.+744    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
    22a6:	29 a1       	ldd	r18, Y+33	; 0x21
    22a8:	3a a1       	ldd	r19, Y+34	; 0x22
    22aa:	28 30       	cpi	r18, 0x08	; 8
    22ac:	31 05       	cpc	r19, r1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <H_SSD_Void_SsdDisplay+0x53e>
    22b0:	27 c1       	rjmp	.+590    	; 0x2500 <H_SSD_Void_SsdDisplay+0x78c>
    22b2:	89 a1       	ldd	r24, Y+33	; 0x21
    22b4:	9a a1       	ldd	r25, Y+34	; 0x22
    22b6:	89 30       	cpi	r24, 0x09	; 9
    22b8:	91 05       	cpc	r25, r1
    22ba:	09 f4       	brne	.+2      	; 0x22be <H_SSD_Void_SsdDisplay+0x54a>
    22bc:	45 c1       	rjmp	.+650    	; 0x2548 <H_SSD_Void_SsdDisplay+0x7d4>
    22be:	67 c1       	rjmp	.+718    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	 {

	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	62 e0       	ldi	r22, 0x02	; 2
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	63 e0       	ldi	r22, 0x03	; 3
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	64 e0       	ldi	r22, 0x04	; 4
    22ec:	41 e0       	ldi	r20, 0x01	; 1
    22ee:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	65 e0       	ldi	r22, 0x05	; 5
    22f6:	41 e0       	ldi	r20, 0x01	; 1
    22f8:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	66 e0       	ldi	r22, 0x06	; 6
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2306:	43 c1       	rjmp	.+646    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	62 e0       	ldi	r22, 0x02	; 2
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	63 e0       	ldi	r22, 0x03	; 3
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	64 e0       	ldi	r22, 0x04	; 4
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	65 e0       	ldi	r22, 0x05	; 5
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	66 e0       	ldi	r22, 0x06	; 6
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    234e:	1f c1       	rjmp	.+574    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	62 e0       	ldi	r22, 0x02	; 2
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	63 e0       	ldi	r22, 0x03	; 3
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	64 e0       	ldi	r22, 0x04	; 4
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	65 e0       	ldi	r22, 0x05	; 5
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	66 e0       	ldi	r22, 0x06	; 6
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2396:	fb c0       	rjmp	.+502    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	61 e0       	ldi	r22, 0x01	; 1
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	62 e0       	ldi	r22, 0x02	; 2
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	63 e0       	ldi	r22, 0x03	; 3
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	64 e0       	ldi	r22, 0x04	; 4
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	65 e0       	ldi	r22, 0x05	; 5
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	66 e0       	ldi	r22, 0x06	; 6
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    23de:	d7 c0       	rjmp	.+430    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	61 e0       	ldi	r22, 0x01	; 1
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	62 e0       	ldi	r22, 0x02	; 2
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	63 e0       	ldi	r22, 0x03	; 3
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	64 e0       	ldi	r22, 0x04	; 4
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	65 e0       	ldi	r22, 0x05	; 5
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	66 e0       	ldi	r22, 0x06	; 6
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2426:	b3 c0       	rjmp	.+358    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	62 e0       	ldi	r22, 0x02	; 2
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	63 e0       	ldi	r22, 0x03	; 3
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	64 e0       	ldi	r22, 0x04	; 4
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	65 e0       	ldi	r22, 0x05	; 5
    245e:	41 e0       	ldi	r20, 0x01	; 1
    2460:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	66 e0       	ldi	r22, 0x06	; 6
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    246e:	8f c0       	rjmp	.+286    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	63 e0       	ldi	r22, 0x03	; 3
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	64 e0       	ldi	r22, 0x04	; 4
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	65 e0       	ldi	r22, 0x05	; 5
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	66 e0       	ldi	r22, 0x06	; 6
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    24b6:	6b c0       	rjmp	.+214    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	61 e0       	ldi	r22, 0x01	; 1
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	62 e0       	ldi	r22, 0x02	; 2
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	63 e0       	ldi	r22, 0x03	; 3
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	64 e0       	ldi	r22, 0x04	; 4
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	65 e0       	ldi	r22, 0x05	; 5
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	66 e0       	ldi	r22, 0x06	; 6
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    24fe:	47 c0       	rjmp	.+142    	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	63 e0       	ldi	r22, 0x03	; 3
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	64 e0       	ldi	r22, 0x04	; 4
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	65 e0       	ldi	r22, 0x05	; 5
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	66 e0       	ldi	r22, 0x06	; 6
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2546:	23 c0       	rjmp	.+70     	; 0x258e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	41 e0       	ldi	r20, 0x01	; 1
    254e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	61 e0       	ldi	r22, 0x01	; 1
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	62 e0       	ldi	r22, 0x02	; 2
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	63 e0       	ldi	r22, 0x03	; 3
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	64 e0       	ldi	r22, 0x04	; 4
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	65 e0       	ldi	r22, 0x05	; 5
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	66 e0       	ldi	r22, 0x06	; 6
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
 * Disable the SSEG_EN1_PIN = SetBit HIGH
 * and
 * Enable the SSEG_EN2_PIN = SetBit LOW
 *
 */
     M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN, HIGH);
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	66 e0       	ldi	r22, 0x06	; 6
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	67 e0       	ldi	r22, 0x07	; 7
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	a0 e8       	ldi	r26, 0x80	; 128
    25a8:	bf e3       	ldi	r27, 0x3F	; 63
    25aa:	8b 87       	std	Y+11, r24	; 0x0b
    25ac:	9c 87       	std	Y+12, r25	; 0x0c
    25ae:	ad 87       	std	Y+13, r26	; 0x0d
    25b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a e7       	ldi	r20, 0x7A	; 122
    25c0:	53 e4       	ldi	r21, 0x43	; 67
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	8f 83       	std	Y+7, r24	; 0x07
    25cc:	98 87       	std	Y+8, r25	; 0x08
    25ce:	a9 87       	std	Y+9, r26	; 0x09
    25d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	2c f4       	brge	.+10     	; 0x25f4 <H_SSD_Void_SsdDisplay+0x880>
		__ticks = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
    25f2:	3f c0       	rjmp	.+126    	; 0x2672 <H_SSD_Void_SsdDisplay+0x8fe>
	else if (__tmp > 65535)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	3f ef       	ldi	r19, 0xFF	; 255
    2600:	4f e7       	ldi	r20, 0x7F	; 127
    2602:	57 e4       	ldi	r21, 0x47	; 71
    2604:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2608:	18 16       	cp	r1, r24
    260a:	4c f5       	brge	.+82     	; 0x265e <H_SSD_Void_SsdDisplay+0x8ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	6b 85       	ldd	r22, Y+11	; 0x0b
    260e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2610:	8d 85       	ldd	r24, Y+13	; 0x0d
    2612:	9e 85       	ldd	r25, Y+14	; 0x0e
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e2       	ldi	r20, 0x20	; 32
    261a:	51 e4       	ldi	r21, 0x41	; 65
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <H_SSD_Void_SsdDisplay+0x8e0>
    2636:	89 e1       	ldi	r24, 0x19	; 25
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9c 83       	std	Y+4, r25	; 0x04
    263c:	8b 83       	std	Y+3, r24	; 0x03
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <H_SSD_Void_SsdDisplay+0x8ce>
    2646:	9c 83       	std	Y+4, r25	; 0x04
    2648:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	69 f7       	brne	.-38     	; 0x2636 <H_SSD_Void_SsdDisplay+0x8c2>
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <H_SSD_Void_SsdDisplay+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	6f 81       	ldd	r22, Y+7	; 0x07
    2660:	78 85       	ldd	r23, Y+8	; 0x08
    2662:	89 85       	ldd	r24, Y+9	; 0x09
    2664:	9a 85       	ldd	r25, Y+10	; 0x0a
    2666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	9e 83       	std	Y+6, r25	; 0x06
    2670:	8d 83       	std	Y+5, r24	; 0x05
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <H_SSD_Void_SsdDisplay+0x90a>
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	89 83       	std	Y+1, r24	; 0x01
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    2686:	83 e0       	ldi	r24, 0x03	; 3
    2688:	67 e0       	ldi	r22, 0x07	; 7
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	 u8 Local_u8_Units = Local_u8_Num %10;
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    2690:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	8d 8f       	std	Y+29, r24	; 0x1d
    2696:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2698:	88 3c       	cpi	r24, 0xC8	; 200
    269a:	08 f4       	brcc	.+2      	; 0x269e <H_SSD_Void_SsdDisplay+0x92a>
    269c:	85 cb       	rjmp	.-2294   	; 0x1da8 <H_SSD_Void_SsdDisplay+0x34>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);

}
}
    269e:	a4 96       	adiw	r28, 0x24	; 36
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <H_SSD_Void_SsdDisplayCountDown>:
///***********to count down and display numbers*******/
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <H_SSD_Void_SsdDisplayCountDown+0x6>
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	8a 83       	std	Y+2, r24	; 0x02

	   s8 Local_s8_Counter = 0;   ////for loop local counter
    26bc:	19 82       	std	Y+1, r1	; 0x01
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	06 c0       	rjmp	.+12     	; 0x26d0 <H_SSD_Void_SsdDisplayCountDown+0x20>
	     {
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <H_SSD_Void_SsdDisplay>
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{

	   s8 Local_s8_Counter = 0;   ////for loop local counter
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	81 50       	subi	r24, 0x01	; 1
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	88 23       	and	r24, r24
    26d4:	bc f7       	brge	.-18     	; 0x26c4 <H_SSD_Void_SsdDisplayCountDown+0x14>
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
		 }


}
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <H_SERVOMOTOR_void_ServoMotorInt>:

////***************** FUNCTIONS **********//

////***************** Function to initialize the servo motor **********//
void H_SERVOMOTOR_void_ServoMotorInt(void)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Pwm1Int();
    26e8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <M_TIMER1_void_Pwm1Int>
	M_TIMER1_void_Pwm1SetFrequancy(50);
    26ec:	62 e3       	ldi	r22, 0x32	; 50
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <M_TIMER1_void_Pwm1SetFrequancy>
}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <H_SERVOMOTOR_void_ServoMotorSetAngel>:
////***************** Function to set angel of the servo motor **********//
void H_SERVOMOTOR_void_ServoMotorSetAngel(u8 Local_u8Angel)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	00 d0       	rcall	.+0      	; 0x2704 <H_SERVOMOTOR_void_ServoMotorSetAngel+0x6>
    2704:	00 d0       	rcall	.+0      	; 0x2706 <H_SERVOMOTOR_void_ServoMotorSetAngel+0x8>
    2706:	0f 92       	push	r0
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_f32DutyCycleValue = ((5.0 * Local_u8Angel) / 180.0) + 5.0;
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	aa 27       	eor	r26, r26
    2716:	97 fd       	sbrc	r25, 7
    2718:	a0 95       	com	r26
    271a:	ba 2f       	mov	r27, r26
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 ea       	ldi	r20, 0xA0	; 160
    2732:	50 e4       	ldi	r21, 0x40	; 64
    2734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	44 e3       	ldi	r20, 0x34	; 52
    2746:	53 e4       	ldi	r21, 0x43	; 67
    2748:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 ea       	ldi	r20, 0xA0	; 160
    275a:	50 e4       	ldi	r21, 0x40	; 64
    275c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	ab 83       	std	Y+3, r26	; 0x03
    276a:	bc 83       	std	Y+4, r27	; 0x04
	M_TIMER1_void_Pwm1SetDutycycle(Local_f32DutyCycleValue);
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	ab 81       	ldd	r26, Y+3	; 0x03
    2772:	bc 81       	ldd	r27, Y+4	; 0x04
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TIMER1_void_Pwm1SetDutycycle>
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <H_SERVOMOTOR_void_ServoMotorStart>:
////***************** Function to start servo motor **********//
void H_SERVOMOTOR_void_ServoMotorStart(void)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Pwm1Start();
    2794:	0e 94 5e 08 	call	0x10bc	; 0x10bc <M_TIMER1_void_Pwm1Start>
}
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <H_SERVOMOTOR_void_ServoMotorStop>:
////***************** Function to stop servo motor **********//
void H_SERVOMOTOR_void_ServoMotorStop(void)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Pwm1Stop();
    27a6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <M_TIMER1_void_Pwm1Stop>
}
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <H_PushButton_void_PushButtonInt>:
/*********Macros ************/

/********************************_FUNCTION _****************************/
///************_H_PushButton_void_PushButtonInt to set pin direction  _***********//
void H_PushButton_void_PushButtonInt(u8 Local_u8_PushButton)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <H_PushButton_void_PushButtonInt+0x6>
    27b6:	0f 92       	push	r0
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	89 83       	std	Y+1, r24	; 0x01
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	3b 83       	std	Y+3, r19	; 0x03
    27c6:	2a 83       	std	Y+2, r18	; 0x02
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	9b 81       	ldd	r25, Y+3	; 0x03
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	91 05       	cpc	r25, r1
    27d0:	e1 f0       	breq	.+56     	; 0x280a <H_PushButton_void_PushButtonInt+0x5a>
    27d2:	2a 81       	ldd	r18, Y+2	; 0x02
    27d4:	3b 81       	ldd	r19, Y+3	; 0x03
    27d6:	23 30       	cpi	r18, 0x03	; 3
    27d8:	31 05       	cpc	r19, r1
    27da:	34 f4       	brge	.+12     	; 0x27e8 <H_PushButton_void_PushButtonInt+0x38>
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	9b 81       	ldd	r25, Y+3	; 0x03
    27e0:	81 30       	cpi	r24, 0x01	; 1
    27e2:	91 05       	cpc	r25, r1
    27e4:	61 f0       	breq	.+24     	; 0x27fe <H_PushButton_void_PushButtonInt+0x4e>
    27e6:	22 c0       	rjmp	.+68     	; 0x282c <H_PushButton_void_PushButtonInt+0x7c>
    27e8:	2a 81       	ldd	r18, Y+2	; 0x02
    27ea:	3b 81       	ldd	r19, Y+3	; 0x03
    27ec:	23 30       	cpi	r18, 0x03	; 3
    27ee:	31 05       	cpc	r19, r1
    27f0:	91 f0       	breq	.+36     	; 0x2816 <H_PushButton_void_PushButtonInt+0x66>
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	9b 81       	ldd	r25, Y+3	; 0x03
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	91 05       	cpc	r25, r1
    27fa:	99 f0       	breq	.+38     	; 0x2822 <H_PushButton_void_PushButtonInt+0x72>
    27fc:	17 c0       	rjmp	.+46     	; 0x282c <H_PushButton_void_PushButtonInt+0x7c>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Set PUSHBUTTON1_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN , INPUT);
    27fe:	84 e0       	ldi	r24, 0x04	; 4
    2800:	62 e0       	ldi	r22, 0x02	; 2
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
    2808:	11 c0       	rjmp	.+34     	; 0x282c <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Set PUSHBUTTON2_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN, INPUT);
    280a:	84 e0       	ldi	r24, 0x04	; 4
    280c:	63 e0       	ldi	r22, 0x03	; 3
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
    2814:	0b c0       	rjmp	.+22     	; 0x282c <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Set PUSHBUTTON3_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN, INPUT);
    2816:	84 e0       	ldi	r24, 0x04	; 4
    2818:	64 e0       	ldi	r22, 0x04	; 4
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
    2820:	05 c0       	rjmp	.+10     	; 0x282c <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Set PUSHBUTTON4_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN, INPUT);
    2822:	84 e0       	ldi	r24, 0x04	; 4
    2824:	65 e0       	ldi	r22, 0x05	; 5
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

}
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <H_PushButton_u8_PushButtonRead>:
///************_H_PushButton_u8_PushButtonRead to Read pin value  _***********//
u8 H_PushButton_u8_PushButtonRead (u8 Local_u8_PushButton)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	ec 97       	sbiw	r28, 0x3c	; 60
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_PushButtonValue = 0;
    284e:	19 ae       	std	Y+57, r1	; 0x39
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    2850:	8a ad       	ldd	r24, Y+58	; 0x3a
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	3c af       	std	Y+60, r19	; 0x3c
    2858:	2b af       	std	Y+59, r18	; 0x3b
    285a:	8b ad       	ldd	r24, Y+59	; 0x3b
    285c:	9c ad       	ldd	r25, Y+60	; 0x3c
    285e:	82 30       	cpi	r24, 0x02	; 2
    2860:	91 05       	cpc	r25, r1
    2862:	09 f4       	brne	.+2      	; 0x2866 <H_PushButton_u8_PushButtonRead+0x2e>
    2864:	a2 c0       	rjmp	.+324    	; 0x29aa <H_PushButton_u8_PushButtonRead+0x172>
    2866:	2b ad       	ldd	r18, Y+59	; 0x3b
    2868:	3c ad       	ldd	r19, Y+60	; 0x3c
    286a:	23 30       	cpi	r18, 0x03	; 3
    286c:	31 05       	cpc	r19, r1
    286e:	34 f4       	brge	.+12     	; 0x287c <H_PushButton_u8_PushButtonRead+0x44>
    2870:	8b ad       	ldd	r24, Y+59	; 0x3b
    2872:	9c ad       	ldd	r25, Y+60	; 0x3c
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	91 05       	cpc	r25, r1
    2878:	71 f0       	breq	.+28     	; 0x2896 <H_PushButton_u8_PushButtonRead+0x5e>
    287a:	33 c2       	rjmp	.+1126   	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
    287c:	2b ad       	ldd	r18, Y+59	; 0x3b
    287e:	3c ad       	ldd	r19, Y+60	; 0x3c
    2880:	23 30       	cpi	r18, 0x03	; 3
    2882:	31 05       	cpc	r19, r1
    2884:	09 f4       	brne	.+2      	; 0x2888 <H_PushButton_u8_PushButtonRead+0x50>
    2886:	1b c1       	rjmp	.+566    	; 0x2abe <H_PushButton_u8_PushButtonRead+0x286>
    2888:	8b ad       	ldd	r24, Y+59	; 0x3b
    288a:	9c ad       	ldd	r25, Y+60	; 0x3c
    288c:	84 30       	cpi	r24, 0x04	; 4
    288e:	91 05       	cpc	r25, r1
    2890:	09 f4       	brne	.+2      	; 0x2894 <H_PushButton_u8_PushButtonRead+0x5c>
    2892:	9f c1       	rjmp	.+830    	; 0x2bd2 <H_PushButton_u8_PushButtonRead+0x39a>
    2894:	26 c2       	rjmp	.+1100   	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Read PUSHBUTTON1_PIN value  _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN );
    2896:	84 e0       	ldi	r24, 0x04	; 4
    2898:	62 e0       	ldi	r22, 0x02	; 2
    289a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    289e:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON1 _ ************//
		if(Local_u8_PushButtonValue == PRESSED) ///check if button is pressed
    28a0:	89 ad       	ldd	r24, Y+57	; 0x39
    28a2:	88 23       	and	r24, r24
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <H_PushButton_u8_PushButtonRead+0x70>
    28a6:	1d c2       	rjmp	.+1082   	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a0 e7       	ldi	r26, 0x70	; 112
    28ae:	b2 e4       	ldi	r27, 0x42	; 66
    28b0:	8d ab       	std	Y+53, r24	; 0x35
    28b2:	9e ab       	std	Y+54, r25	; 0x36
    28b4:	af ab       	std	Y+55, r26	; 0x37
    28b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b8:	6d a9       	ldd	r22, Y+53	; 0x35
    28ba:	7e a9       	ldd	r23, Y+54	; 0x36
    28bc:	8f a9       	ldd	r24, Y+55	; 0x37
    28be:	98 ad       	ldd	r25, Y+56	; 0x38
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4a e7       	ldi	r20, 0x7A	; 122
    28c6:	53 e4       	ldi	r21, 0x43	; 67
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	89 ab       	std	Y+49, r24	; 0x31
    28d2:	9a ab       	std	Y+50, r25	; 0x32
    28d4:	ab ab       	std	Y+51, r26	; 0x33
    28d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28d8:	69 a9       	ldd	r22, Y+49	; 0x31
    28da:	7a a9       	ldd	r23, Y+50	; 0x32
    28dc:	8b a9       	ldd	r24, Y+51	; 0x33
    28de:	9c a9       	ldd	r25, Y+52	; 0x34
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e8       	ldi	r20, 0x80	; 128
    28e6:	5f e3       	ldi	r21, 0x3F	; 63
    28e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	2c f4       	brge	.+10     	; 0x28fa <H_PushButton_u8_PushButtonRead+0xc2>
		__ticks = 1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	98 ab       	std	Y+48, r25	; 0x30
    28f6:	8f a7       	std	Y+47, r24	; 0x2f
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <H_PushButton_u8_PushButtonRead+0x140>
	else if (__tmp > 65535)
    28fa:	69 a9       	ldd	r22, Y+49	; 0x31
    28fc:	7a a9       	ldd	r23, Y+50	; 0x32
    28fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2900:	9c a9       	ldd	r25, Y+52	; 0x34
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	57 e4       	ldi	r21, 0x47	; 71
    290a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290e:	18 16       	cp	r1, r24
    2910:	4c f5       	brge	.+82     	; 0x2964 <H_PushButton_u8_PushButtonRead+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	6d a9       	ldd	r22, Y+53	; 0x35
    2914:	7e a9       	ldd	r23, Y+54	; 0x36
    2916:	8f a9       	ldd	r24, Y+55	; 0x37
    2918:	98 ad       	ldd	r25, Y+56	; 0x38
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e2       	ldi	r20, 0x20	; 32
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	98 ab       	std	Y+48, r25	; 0x30
    2938:	8f a7       	std	Y+47, r24	; 0x2f
    293a:	0f c0       	rjmp	.+30     	; 0x295a <H_PushButton_u8_PushButtonRead+0x122>
    293c:	89 e1       	ldi	r24, 0x19	; 25
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9e a7       	std	Y+46, r25	; 0x2e
    2942:	8d a7       	std	Y+45, r24	; 0x2d
    2944:	8d a5       	ldd	r24, Y+45	; 0x2d
    2946:	9e a5       	ldd	r25, Y+46	; 0x2e
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <H_PushButton_u8_PushButtonRead+0x110>
    294c:	9e a7       	std	Y+46, r25	; 0x2e
    294e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	8f a5       	ldd	r24, Y+47	; 0x2f
    2952:	98 a9       	ldd	r25, Y+48	; 0x30
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	98 ab       	std	Y+48, r25	; 0x30
    2958:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	8f a5       	ldd	r24, Y+47	; 0x2f
    295c:	98 a9       	ldd	r25, Y+48	; 0x30
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	69 f7       	brne	.-38     	; 0x293c <H_PushButton_u8_PushButtonRead+0x104>
    2962:	14 c0       	rjmp	.+40     	; 0x298c <H_PushButton_u8_PushButtonRead+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2964:	69 a9       	ldd	r22, Y+49	; 0x31
    2966:	7a a9       	ldd	r23, Y+50	; 0x32
    2968:	8b a9       	ldd	r24, Y+51	; 0x33
    296a:	9c a9       	ldd	r25, Y+52	; 0x34
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	98 ab       	std	Y+48, r25	; 0x30
    2976:	8f a7       	std	Y+47, r24	; 0x2f
    2978:	8f a5       	ldd	r24, Y+47	; 0x2f
    297a:	98 a9       	ldd	r25, Y+48	; 0x30
    297c:	9c a7       	std	Y+44, r25	; 0x2c
    297e:	8b a7       	std	Y+43, r24	; 0x2b
    2980:	8b a5       	ldd	r24, Y+43	; 0x2b
    2982:	9c a5       	ldd	r25, Y+44	; 0x2c
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <H_PushButton_u8_PushButtonRead+0x14c>
    2988:	9c a7       	std	Y+44, r25	; 0x2c
    298a:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);      /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED)
    298c:	84 e0       	ldi	r24, 0x04	; 4
    298e:	62 e0       	ldi	r22, 0x02	; 2
    2990:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2994:	88 23       	and	r24, r24
    2996:	09 f0       	breq	.+2      	; 0x299a <H_PushButton_u8_PushButtonRead+0x162>
    2998:	a4 c1       	rjmp	.+840    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
	   ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED);
    299a:	84 e0       	ldi	r24, 0x04	; 4
    299c:	62 e0       	ldi	r22, 0x02	; 2
    299e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    29a2:	88 23       	and	r24, r24
    29a4:	d1 f3       	breq	.-12     	; 0x299a <H_PushButton_u8_PushButtonRead+0x162>
			    //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
				Local_u8_PushButtonValue = PRESSED;
    29a6:	19 ae       	std	Y+57, r1	; 0x39
    29a8:	9c c1       	rjmp	.+824    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON1 **************************///

		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Read PUSHBUTTON2_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN);
    29aa:	84 e0       	ldi	r24, 0x04	; 4
    29ac:	63 e0       	ldi	r22, 0x03	; 3
    29ae:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    29b2:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON2_ ************//
		if(Local_u8_PushButtonValue == PRESSED)    ///check if button is pressed
    29b4:	89 ad       	ldd	r24, Y+57	; 0x39
    29b6:	88 23       	and	r24, r24
    29b8:	09 f0       	breq	.+2      	; 0x29bc <H_PushButton_u8_PushButtonRead+0x184>
    29ba:	93 c1       	rjmp	.+806    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	a0 e7       	ldi	r26, 0x70	; 112
    29c2:	b2 e4       	ldi	r27, 0x42	; 66
    29c4:	8f a3       	std	Y+39, r24	; 0x27
    29c6:	98 a7       	std	Y+40, r25	; 0x28
    29c8:	a9 a7       	std	Y+41, r26	; 0x29
    29ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29cc:	6f a1       	ldd	r22, Y+39	; 0x27
    29ce:	78 a5       	ldd	r23, Y+40	; 0x28
    29d0:	89 a5       	ldd	r24, Y+41	; 0x29
    29d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	4a e7       	ldi	r20, 0x7A	; 122
    29da:	53 e4       	ldi	r21, 0x43	; 67
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	8b a3       	std	Y+35, r24	; 0x23
    29e6:	9c a3       	std	Y+36, r25	; 0x24
    29e8:	ad a3       	std	Y+37, r26	; 0x25
    29ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29ec:	6b a1       	ldd	r22, Y+35	; 0x23
    29ee:	7c a1       	ldd	r23, Y+36	; 0x24
    29f0:	8d a1       	ldd	r24, Y+37	; 0x25
    29f2:	9e a1       	ldd	r25, Y+38	; 0x26
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e8       	ldi	r20, 0x80	; 128
    29fa:	5f e3       	ldi	r21, 0x3F	; 63
    29fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a00:	88 23       	and	r24, r24
    2a02:	2c f4       	brge	.+10     	; 0x2a0e <H_PushButton_u8_PushButtonRead+0x1d6>
		__ticks = 1;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9a a3       	std	Y+34, r25	; 0x22
    2a0a:	89 a3       	std	Y+33, r24	; 0x21
    2a0c:	3f c0       	rjmp	.+126    	; 0x2a8c <H_PushButton_u8_PushButtonRead+0x254>
	else if (__tmp > 65535)
    2a0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a10:	7c a1       	ldd	r23, Y+36	; 0x24
    2a12:	8d a1       	ldd	r24, Y+37	; 0x25
    2a14:	9e a1       	ldd	r25, Y+38	; 0x26
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	3f ef       	ldi	r19, 0xFF	; 255
    2a1a:	4f e7       	ldi	r20, 0x7F	; 127
    2a1c:	57 e4       	ldi	r21, 0x47	; 71
    2a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a22:	18 16       	cp	r1, r24
    2a24:	4c f5       	brge	.+82     	; 0x2a78 <H_PushButton_u8_PushButtonRead+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a26:	6f a1       	ldd	r22, Y+39	; 0x27
    2a28:	78 a5       	ldd	r23, Y+40	; 0x28
    2a2a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e2       	ldi	r20, 0x20	; 32
    2a34:	51 e4       	ldi	r21, 0x41	; 65
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9a a3       	std	Y+34, r25	; 0x22
    2a4c:	89 a3       	std	Y+33, r24	; 0x21
    2a4e:	0f c0       	rjmp	.+30     	; 0x2a6e <H_PushButton_u8_PushButtonRead+0x236>
    2a50:	89 e1       	ldi	r24, 0x19	; 25
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	98 a3       	std	Y+32, r25	; 0x20
    2a56:	8f 8f       	std	Y+31, r24	; 0x1f
    2a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a5a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <H_PushButton_u8_PushButtonRead+0x224>
    2a60:	98 a3       	std	Y+32, r25	; 0x20
    2a62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a64:	89 a1       	ldd	r24, Y+33	; 0x21
    2a66:	9a a1       	ldd	r25, Y+34	; 0x22
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	9a a3       	std	Y+34, r25	; 0x22
    2a6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a70:	9a a1       	ldd	r25, Y+34	; 0x22
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	69 f7       	brne	.-38     	; 0x2a50 <H_PushButton_u8_PushButtonRead+0x218>
    2a76:	14 c0       	rjmp	.+40     	; 0x2aa0 <H_PushButton_u8_PushButtonRead+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a78:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9a a3       	std	Y+34, r25	; 0x22
    2a8a:	89 a3       	std	Y+33, r24	; 0x21
    2a8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a90:	9e 8f       	std	Y+30, r25	; 0x1e
    2a92:	8d 8f       	std	Y+29, r24	; 0x1d
    2a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <H_PushButton_u8_PushButtonRead+0x260>
    2a9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a9e:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);        /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED)
    2aa0:	84 e0       	ldi	r24, 0x04	; 4
    2aa2:	63 e0       	ldi	r22, 0x03	; 3
    2aa4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2aa8:	88 23       	and	r24, r24
    2aaa:	09 f0       	breq	.+2      	; 0x2aae <H_PushButton_u8_PushButtonRead+0x276>
    2aac:	1a c1       	rjmp	.+564    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
				while (M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED);
    2aae:	84 e0       	ldi	r24, 0x04	; 4
    2ab0:	63 e0       	ldi	r22, 0x03	; 3
    2ab2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2ab6:	88 23       	and	r24, r24
    2ab8:	d1 f3       	breq	.-12     	; 0x2aae <H_PushButton_u8_PushButtonRead+0x276>
					//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
						Local_u8_PushButtonValue = PRESSED;
    2aba:	19 ae       	std	Y+57, r1	; 0x39
    2abc:	12 c1       	rjmp	.+548    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON2 **************************///

		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Read PUSHBUTTON3_PIN value   _***********//
		Local_u8_PushButtonValue =	M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN);
    2abe:	84 e0       	ldi	r24, 0x04	; 4
    2ac0:	64 e0       	ldi	r22, 0x04	; 4
    2ac2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2ac6:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON3 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)     ///check if button is pressed
    2ac8:	89 ad       	ldd	r24, Y+57	; 0x39
    2aca:	88 23       	and	r24, r24
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <H_PushButton_u8_PushButtonRead+0x298>
    2ace:	09 c1       	rjmp	.+530    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e7       	ldi	r26, 0x70	; 112
    2ad6:	b2 e4       	ldi	r27, 0x42	; 66
    2ad8:	89 8f       	std	Y+25, r24	; 0x19
    2ada:	9a 8f       	std	Y+26, r25	; 0x1a
    2adc:	ab 8f       	std	Y+27, r26	; 0x1b
    2ade:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4a e7       	ldi	r20, 0x7A	; 122
    2aee:	53 e4       	ldi	r21, 0x43	; 67
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8d 8b       	std	Y+21, r24	; 0x15
    2afa:	9e 8b       	std	Y+22, r25	; 0x16
    2afc:	af 8b       	std	Y+23, r26	; 0x17
    2afe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b00:	6d 89       	ldd	r22, Y+21	; 0x15
    2b02:	7e 89       	ldd	r23, Y+22	; 0x16
    2b04:	8f 89       	ldd	r24, Y+23	; 0x17
    2b06:	98 8d       	ldd	r25, Y+24	; 0x18
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	2c f4       	brge	.+10     	; 0x2b22 <H_PushButton_u8_PushButtonRead+0x2ea>
		__ticks = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9c 8b       	std	Y+20, r25	; 0x14
    2b1e:	8b 8b       	std	Y+19, r24	; 0x13
    2b20:	3f c0       	rjmp	.+126    	; 0x2ba0 <H_PushButton_u8_PushButtonRead+0x368>
	else if (__tmp > 65535)
    2b22:	6d 89       	ldd	r22, Y+21	; 0x15
    2b24:	7e 89       	ldd	r23, Y+22	; 0x16
    2b26:	8f 89       	ldd	r24, Y+23	; 0x17
    2b28:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	4c f5       	brge	.+82     	; 0x2b8c <H_PushButton_u8_PushButtonRead+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e2       	ldi	r20, 0x20	; 32
    2b48:	51 e4       	ldi	r21, 0x41	; 65
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9c 8b       	std	Y+20, r25	; 0x14
    2b60:	8b 8b       	std	Y+19, r24	; 0x13
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <H_PushButton_u8_PushButtonRead+0x34a>
    2b64:	89 e1       	ldi	r24, 0x19	; 25
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9a 8b       	std	Y+18, r25	; 0x12
    2b6a:	89 8b       	std	Y+17, r24	; 0x11
    2b6c:	89 89       	ldd	r24, Y+17	; 0x11
    2b6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <H_PushButton_u8_PushButtonRead+0x338>
    2b74:	9a 8b       	std	Y+18, r25	; 0x12
    2b76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9c 8b       	std	Y+20, r25	; 0x14
    2b80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	8b 89       	ldd	r24, Y+19	; 0x13
    2b84:	9c 89       	ldd	r25, Y+20	; 0x14
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	69 f7       	brne	.-38     	; 0x2b64 <H_PushButton_u8_PushButtonRead+0x32c>
    2b8a:	14 c0       	rjmp	.+40     	; 0x2bb4 <H_PushButton_u8_PushButtonRead+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b90:	8f 89       	ldd	r24, Y+23	; 0x17
    2b92:	98 8d       	ldd	r25, Y+24	; 0x18
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9c 8b       	std	Y+20, r25	; 0x14
    2b9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba4:	98 8b       	std	Y+16, r25	; 0x10
    2ba6:	8f 87       	std	Y+15, r24	; 0x0f
    2ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2baa:	98 89       	ldd	r25, Y+16	; 0x10
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <H_PushButton_u8_PushButtonRead+0x374>
    2bb0:	98 8b       	std	Y+16, r25	; 0x10
    2bb2:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);          /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED)
    2bb4:	84 e0       	ldi	r24, 0x04	; 4
    2bb6:	64 e0       	ldi	r22, 0x04	; 4
    2bb8:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2bbc:	88 23       	and	r24, r24
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <H_PushButton_u8_PushButtonRead+0x38a>
    2bc0:	90 c0       	rjmp	.+288    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED);
    2bc2:	84 e0       	ldi	r24, 0x04	; 4
    2bc4:	64 e0       	ldi	r22, 0x04	; 4
    2bc6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2bca:	88 23       	and	r24, r24
    2bcc:	d1 f3       	breq	.-12     	; 0x2bc2 <H_PushButton_u8_PushButtonRead+0x38a>
				//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					Local_u8_PushButtonValue = PRESSED;
    2bce:	19 ae       	std	Y+57, r1	; 0x39
    2bd0:	88 c0       	rjmp	.+272    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
	///*****************************break case PUSHBUTTON3 **************************///

		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Read PUSHBUTTON4_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN);
    2bd2:	84 e0       	ldi	r24, 0x04	; 4
    2bd4:	65 e0       	ldi	r22, 0x05	; 5
    2bd6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2bda:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON4 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)      ///check if button is pressed
    2bdc:	89 ad       	ldd	r24, Y+57	; 0x39
    2bde:	88 23       	and	r24, r24
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <H_PushButton_u8_PushButtonRead+0x3ac>
    2be2:	7f c0       	rjmp	.+254    	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 e7       	ldi	r26, 0x70	; 112
    2bea:	b2 e4       	ldi	r27, 0x42	; 66
    2bec:	8b 87       	std	Y+11, r24	; 0x0b
    2bee:	9c 87       	std	Y+12, r25	; 0x0c
    2bf0:	ad 87       	std	Y+13, r26	; 0x0d
    2bf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a e7       	ldi	r20, 0x7A	; 122
    2c02:	53 e4       	ldi	r21, 0x43	; 67
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	8f 83       	std	Y+7, r24	; 0x07
    2c0e:	98 87       	std	Y+8, r25	; 0x08
    2c10:	a9 87       	std	Y+9, r26	; 0x09
    2c12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c14:	6f 81       	ldd	r22, Y+7	; 0x07
    2c16:	78 85       	ldd	r23, Y+8	; 0x08
    2c18:	89 85       	ldd	r24, Y+9	; 0x09
    2c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <H_PushButton_u8_PushButtonRead+0x3fe>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	9e 83       	std	Y+6, r25	; 0x06
    2c32:	8d 83       	std	Y+5, r24	; 0x05
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <H_PushButton_u8_PushButtonRead+0x47c>
	else if (__tmp > 65535)
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <H_PushButton_u8_PushButtonRead+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9e 83       	std	Y+6, r25	; 0x06
    2c74:	8d 83       	std	Y+5, r24	; 0x05
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <H_PushButton_u8_PushButtonRead+0x45e>
    2c78:	89 e1       	ldi	r24, 0x19	; 25
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9c 83       	std	Y+4, r25	; 0x04
    2c7e:	8b 83       	std	Y+3, r24	; 0x03
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	9c 81       	ldd	r25, Y+4	; 0x04
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <H_PushButton_u8_PushButtonRead+0x44c>
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <H_PushButton_u8_PushButtonRead+0x440>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <H_PushButton_u8_PushButtonRead+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca2:	78 85       	ldd	r23, Y+8	; 0x08
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <H_PushButton_u8_PushButtonRead+0x488>
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);         /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED)
    2cc8:	84 e0       	ldi	r24, 0x04	; 4
    2cca:	65 e0       	ldi	r22, 0x05	; 5
    2ccc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2cd0:	88 23       	and	r24, r24
    2cd2:	39 f4       	brne	.+14     	; 0x2ce2 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED);
    2cd4:	84 e0       	ldi	r24, 0x04	; 4
    2cd6:	65 e0       	ldi	r22, 0x05	; 5
    2cd8:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    2cdc:	88 23       	and	r24, r24
    2cde:	d1 f3       	breq	.-12     	; 0x2cd4 <H_PushButton_u8_PushButtonRead+0x49c>
				 //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					  Local_u8_PushButtonValue = PRESSED;
    2ce0:	19 ae       	std	Y+57, r1	; 0x39

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

	return Local_u8_PushButtonValue  ;
    2ce2:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2ce4:	ec 96       	adiw	r28, 0x3c	; 60
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <H_LED_Void_LedInit>:
#include "LED_Int.h"
#include "LED_Priv.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_LED_Void_LedInit(u8 Local_u8_ledId)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <H_LED_Void_LedInit+0x6>
    2cfc:	0f 92       	push	r0
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_ledId)
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	28 2f       	mov	r18, r24
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	3b 83       	std	Y+3, r19	; 0x03
    2d0c:	2a 83       	std	Y+2, r18	; 0x02
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	9b 81       	ldd	r25, Y+3	; 0x03
    2d12:	82 30       	cpi	r24, 0x02	; 2
    2d14:	91 05       	cpc	r25, r1
    2d16:	11 f1       	breq	.+68     	; 0x2d5c <H_LED_Void_LedInit+0x66>
    2d18:	2a 81       	ldd	r18, Y+2	; 0x02
    2d1a:	3b 81       	ldd	r19, Y+3	; 0x03
    2d1c:	23 30       	cpi	r18, 0x03	; 3
    2d1e:	31 05       	cpc	r19, r1
    2d20:	34 f4       	brge	.+12     	; 0x2d2e <H_LED_Void_LedInit+0x38>
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	9b 81       	ldd	r25, Y+3	; 0x03
    2d26:	81 30       	cpi	r24, 0x01	; 1
    2d28:	91 05       	cpc	r25, r1
    2d2a:	61 f0       	breq	.+24     	; 0x2d44 <H_LED_Void_LedInit+0x4e>
    2d2c:	22 c0       	rjmp	.+68     	; 0x2d72 <H_LED_Void_LedInit+0x7c>
    2d2e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d30:	3b 81       	ldd	r19, Y+3	; 0x03
    2d32:	23 30       	cpi	r18, 0x03	; 3
    2d34:	31 05       	cpc	r19, r1
    2d36:	61 f0       	breq	.+24     	; 0x2d50 <H_LED_Void_LedInit+0x5a>
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3c:	84 30       	cpi	r24, 0x04	; 4
    2d3e:	91 05       	cpc	r25, r1
    2d40:	99 f0       	breq	.+38     	; 0x2d68 <H_LED_Void_LedInit+0x72>
    2d42:	17 c0       	rjmp	.+46     	; 0x2d72 <H_LED_Void_LedInit+0x7c>
	{
	///******_Setting RED_LED Pin direction to OUTPUT _***********///
	case RED_LED:
		M_DIO_void_SetPinDirection(RED_LED_PORT, RED_LED_PIN, OUTPUT);
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	41 e0       	ldi	r20, 0x01	; 1
    2d4a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
    2d4e:	11 c0       	rjmp	.+34     	; 0x2d72 <H_LED_Void_LedInit+0x7c>
		break;
	///******_Setting GRN_LED Pin direction to OUTPUT _***********///
	case GRN_LED :
		M_DIO_void_SetPinDirection(GRN_LED_PORT ,GRN_LED_PIN , OUTPUT);
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	41 e0       	ldi	r20, 0x01	; 1
    2d56:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
    2d5a:	0b c0       	rjmp	.+22     	; 0x2d72 <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting BLUE_LED Pin direction to OUTPUT _***********///
	case BLUE_LED:
		M_DIO_void_SetPinDirection(BLUE_LED_PORT,BLUE_LED_PIN ,OUTPUT);
    2d5c:	83 e0       	ldi	r24, 0x03	; 3
    2d5e:	62 e0       	ldi	r22, 0x02	; 2
    2d60:	41 e0       	ldi	r20, 0x01	; 1
    2d62:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
    2d66:	05 c0       	rjmp	.+10     	; 0x2d72 <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting YELLOW_LED Pin direction to OUTPUT _***********///
	case YELLOW_LED:
			M_DIO_void_SetPinDirection(YELLOW_LED_PORT,YELLOW_LED_PIN ,OUTPUT);
    2d68:	83 e0       	ldi	r24, 0x03	; 3
    2d6a:	63 e0       	ldi	r22, 0x03	; 3
    2d6c:	41 e0       	ldi	r20, 0x01	; 1
    2d6e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
			break;
	default :               /*****error*****/                      break;
	}

}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <H_LED_Void_LedOn>:
void H_LED_Void_LedOn(u8 Local_u8_led)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <H_LED_Void_LedOn+0x6>
    2d84:	0f 92       	push	r0
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	3b 83       	std	Y+3, r19	; 0x03
    2d94:	2a 83       	std	Y+2, r18	; 0x02
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	82 30       	cpi	r24, 0x02	; 2
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	11 f1       	breq	.+68     	; 0x2de4 <H_LED_Void_LedOn+0x66>
    2da0:	2a 81       	ldd	r18, Y+2	; 0x02
    2da2:	3b 81       	ldd	r19, Y+3	; 0x03
    2da4:	23 30       	cpi	r18, 0x03	; 3
    2da6:	31 05       	cpc	r19, r1
    2da8:	34 f4       	brge	.+12     	; 0x2db6 <H_LED_Void_LedOn+0x38>
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	9b 81       	ldd	r25, Y+3	; 0x03
    2dae:	81 30       	cpi	r24, 0x01	; 1
    2db0:	91 05       	cpc	r25, r1
    2db2:	61 f0       	breq	.+24     	; 0x2dcc <H_LED_Void_LedOn+0x4e>
    2db4:	22 c0       	rjmp	.+68     	; 0x2dfa <H_LED_Void_LedOn+0x7c>
    2db6:	2a 81       	ldd	r18, Y+2	; 0x02
    2db8:	3b 81       	ldd	r19, Y+3	; 0x03
    2dba:	23 30       	cpi	r18, 0x03	; 3
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	61 f0       	breq	.+24     	; 0x2dd8 <H_LED_Void_LedOn+0x5a>
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc4:	84 30       	cpi	r24, 0x04	; 4
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	99 f0       	breq	.+38     	; 0x2df0 <H_LED_Void_LedOn+0x72>
    2dca:	17 c0       	rjmp	.+46     	; 0x2dfa <H_LED_Void_LedOn+0x7c>
		{
	    ///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
		case RED_LED:
             M_DIO_void_SetPinValue(RED_LED_PORT, RED_LED_PIN, HIGH);
    2dcc:	83 e0       	ldi	r24, 0x03	; 3
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	41 e0       	ldi	r20, 0x01	; 1
    2dd2:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2dd6:	11 c0       	rjmp	.+34     	; 0x2dfa <H_LED_Void_LedOn+0x7c>
		break;
		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
		case GRN_LED :
             M_DIO_void_SetPinValue(GRN_LED_PORT, GRN_LED_PIN, HIGH);
    2dd8:	83 e0       	ldi	r24, 0x03	; 3
    2dda:	61 e0       	ldi	r22, 0x01	; 1
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2de2:	0b c0       	rjmp	.+22     	; 0x2dfa <H_LED_Void_LedOn+0x7c>
        break;
        ///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
		case BLUE_LED :
             M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    2de4:	83 e0       	ldi	r24, 0x03	; 3
    2de6:	62 e0       	ldi	r22, 0x02	; 2
    2de8:	41 e0       	ldi	r20, 0x01	; 1
    2dea:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <H_LED_Void_LedOn+0x7c>
   		break;
   		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
		case YELLOW_LED :
		             M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    2df0:	83 e0       	ldi	r24, 0x03	; 3
    2df2:	63 e0       	ldi	r22, 0x03	; 3
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		   		break;
		default :          /*****error*****/         break;
		}

}
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <H_LED_Void_LedOff>:
void H_LED_Void_LedOff(u8 Local_u8_led)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <H_LED_Void_LedOff+0x6>
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	28 2f       	mov	r18, r24
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	3b 83       	std	Y+3, r19	; 0x03
    2e1c:	2a 83       	std	Y+2, r18	; 0x02
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	9b 81       	ldd	r25, Y+3	; 0x03
    2e22:	82 30       	cpi	r24, 0x02	; 2
    2e24:	91 05       	cpc	r25, r1
    2e26:	b1 f0       	breq	.+44     	; 0x2e54 <H_LED_Void_LedOff+0x4e>
    2e28:	2a 81       	ldd	r18, Y+2	; 0x02
    2e2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e2c:	23 30       	cpi	r18, 0x03	; 3
    2e2e:	31 05       	cpc	r19, r1
    2e30:	34 f4       	brge	.+12     	; 0x2e3e <H_LED_Void_LedOff+0x38>
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	9b 81       	ldd	r25, Y+3	; 0x03
    2e36:	81 30       	cpi	r24, 0x01	; 1
    2e38:	91 05       	cpc	r25, r1
    2e3a:	91 f0       	breq	.+36     	; 0x2e60 <H_LED_Void_LedOff+0x5a>
    2e3c:	22 c0       	rjmp	.+68     	; 0x2e82 <H_LED_Void_LedOff+0x7c>
    2e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    2e40:	3b 81       	ldd	r19, Y+3	; 0x03
    2e42:	23 30       	cpi	r18, 0x03	; 3
    2e44:	31 05       	cpc	r19, r1
    2e46:	91 f0       	breq	.+36     	; 0x2e6c <H_LED_Void_LedOff+0x66>
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4c:	84 30       	cpi	r24, 0x04	; 4
    2e4e:	91 05       	cpc	r25, r1
    2e50:	99 f0       	breq	.+38     	; 0x2e78 <H_LED_Void_LedOff+0x72>
    2e52:	17 c0       	rjmp	.+46     	; 0x2e82 <H_LED_Void_LedOff+0x7c>
			{
			///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
			case BLUE_LED:
				M_DIO_void_SetPinValue(BLUE_LED_PORT, BLUE_LED_PIN, LOW);
    2e54:	83 e0       	ldi	r24, 0x03	; 3
    2e56:	62 e0       	ldi	r22, 0x02	; 2
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2e5e:	11 c0       	rjmp	.+34     	; 0x2e82 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			case RED_LED :
				M_DIO_void_SetPinValue(RED_LED_PORT ,RED_LED_PIN, LOW);
    2e60:	83 e0       	ldi	r24, 0x03	; 3
    2e62:	60 e0       	ldi	r22, 0x00	; 0
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2e6a:	0b c0       	rjmp	.+22     	; 0x2e82 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
			case GRN_LED :
				M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    2e6c:	83 e0       	ldi	r24, 0x03	; 3
    2e6e:	61 e0       	ldi	r22, 0x01	; 1
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2e76:	05 c0       	rjmp	.+10     	; 0x2e82 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
			case YELLOW_LED :
			    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    2e78:	83 e0       	ldi	r24, 0x03	; 3
    2e7a:	63 e0       	ldi	r22, 0x03	; 3
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
					   		break;
			default :           /*****error*****/         break;
			}

}
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	08 95       	ret

00002e8e <H_LED_Void_LedTogg>:
void H_LED_Void_LedTogg(u8 Local_u8_led)
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <H_LED_Void_LedTogg+0x6>
    2e94:	0f 92       	push	r0
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	3b 83       	std	Y+3, r19	; 0x03
    2ea4:	2a 83       	std	Y+2, r18	; 0x02
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eaa:	82 30       	cpi	r24, 0x02	; 2
    2eac:	91 05       	cpc	r25, r1
    2eae:	b1 f0       	breq	.+44     	; 0x2edc <H_LED_Void_LedTogg+0x4e>
    2eb0:	2a 81       	ldd	r18, Y+2	; 0x02
    2eb2:	3b 81       	ldd	r19, Y+3	; 0x03
    2eb4:	23 30       	cpi	r18, 0x03	; 3
    2eb6:	31 05       	cpc	r19, r1
    2eb8:	34 f4       	brge	.+12     	; 0x2ec6 <H_LED_Void_LedTogg+0x38>
    2eba:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	89 f0       	breq	.+34     	; 0x2ee6 <H_LED_Void_LedTogg+0x58>
    2ec4:	1e c0       	rjmp	.+60     	; 0x2f02 <H_LED_Void_LedTogg+0x74>
    2ec6:	2a 81       	ldd	r18, Y+2	; 0x02
    2ec8:	3b 81       	ldd	r19, Y+3	; 0x03
    2eca:	23 30       	cpi	r18, 0x03	; 3
    2ecc:	31 05       	cpc	r19, r1
    2ece:	81 f0       	breq	.+32     	; 0x2ef0 <H_LED_Void_LedTogg+0x62>
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed4:	84 30       	cpi	r24, 0x04	; 4
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	81 f0       	breq	.+32     	; 0x2efa <H_LED_Void_LedTogg+0x6c>
    2eda:	13 c0       	rjmp	.+38     	; 0x2f02 <H_LED_Void_LedTogg+0x74>
		{
		  ///******_ Toggle  BLUE_LED Pin Value _***********///
		  case BLUE_LED:
			  M_DIO_void_PinTog(BLUE_LED_PORT, BLUE_LED_PIN);
    2edc:	83 e0       	ldi	r24, 0x03	; 3
    2ede:	62 e0       	ldi	r22, 0x02	; 2
    2ee0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <M_DIO_void_PinTog>
    2ee4:	0e c0       	rjmp	.+28     	; 0x2f02 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  RED_LED Pin Value _******************///
		  case RED_LED :
			  M_DIO_void_PinTog(RED_LED_PORT, RED_LED_PIN);
    2ee6:	83 e0       	ldi	r24, 0x03	; 3
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	0e 94 c0 0c 	call	0x1980	; 0x1980 <M_DIO_void_PinTog>
    2eee:	09 c0       	rjmp	.+18     	; 0x2f02 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  GRN_LED Pin Value _******************///
		  case GRN_LED :
			  M_DIO_void_PinTog(GRN_LED_PORT, GRN_LED_PIN);
    2ef0:	83 e0       	ldi	r24, 0x03	; 3
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <M_DIO_void_PinTog>
    2ef8:	04 c0       	rjmp	.+8      	; 0x2f02 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  YELLOW_LED Pin Value _******************///
		  case YELLOW_LED :
			  M_DIO_void_PinTog(YELLOW_LED_PORT,YELLOW_LED_PIN);
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	63 e0       	ldi	r22, 0x03	; 3
    2efe:	0e 94 c0 0c 	call	0x1980	; 0x1980 <M_DIO_void_PinTog>
		  break;

		  default :   /*****error*****/          break;
		}

}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <H_LED_Void_LedBlink>:
void H_LED_Void_LedBlink(u8 Local_u8_led)
{
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	eb 97       	sbiw	r28, 0x3b	; 59
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	89 af       	std	Y+57, r24	; 0x39
	///***switch case to loop on LEDs****//
     switch(Local_u8_led)
    2f24:	89 ad       	ldd	r24, Y+57	; 0x39
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	3b af       	std	Y+59, r19	; 0x3b
    2f2c:	2a af       	std	Y+58, r18	; 0x3a
    2f2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f30:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f32:	82 30       	cpi	r24, 0x02	; 2
    2f34:	91 05       	cpc	r25, r1
    2f36:	c9 f0       	breq	.+50     	; 0x2f6a <H_LED_Void_LedBlink+0x5c>
    2f38:	2a ad       	ldd	r18, Y+58	; 0x3a
    2f3a:	3b ad       	ldd	r19, Y+59	; 0x3b
    2f3c:	23 30       	cpi	r18, 0x03	; 3
    2f3e:	31 05       	cpc	r19, r1
    2f40:	3c f4       	brge	.+14     	; 0x2f50 <H_LED_Void_LedBlink+0x42>
    2f42:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f44:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	91 05       	cpc	r25, r1
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <H_LED_Void_LedBlink+0x40>
    2f4c:	8b c0       	rjmp	.+278    	; 0x3064 <H_LED_Void_LedBlink+0x156>
    2f4e:	00 c2       	rjmp	.+1024   	; 0x3350 <H_LED_Void_LedBlink+0x442>
    2f50:	2a ad       	ldd	r18, Y+58	; 0x3a
    2f52:	3b ad       	ldd	r19, Y+59	; 0x3b
    2f54:	23 30       	cpi	r18, 0x03	; 3
    2f56:	31 05       	cpc	r19, r1
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <H_LED_Void_LedBlink+0x4e>
    2f5a:	01 c1       	rjmp	.+514    	; 0x315e <H_LED_Void_LedBlink+0x250>
    2f5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f5e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f60:	84 30       	cpi	r24, 0x04	; 4
    2f62:	91 05       	cpc	r25, r1
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <H_LED_Void_LedBlink+0x5a>
    2f66:	78 c1       	rjmp	.+752    	; 0x3258 <H_LED_Void_LedBlink+0x34a>
    2f68:	f3 c1       	rjmp	.+998    	; 0x3350 <H_LED_Void_LedBlink+0x442>
	 	{
        ///******_ Blink  BLUE_LED Pin Value _******************///
	 	case BLUE_LED:
	 		///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    2f6a:	83 e0       	ldi	r24, 0x03	; 3
    2f6c:	62 e0       	ldi	r22, 0x02	; 2
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	90 e5       	ldi	r25, 0x50	; 80
    2f78:	a3 ec       	ldi	r26, 0xC3	; 195
    2f7a:	b7 e4       	ldi	r27, 0x47	; 71
    2f7c:	8d ab       	std	Y+53, r24	; 0x35
    2f7e:	9e ab       	std	Y+54, r25	; 0x36
    2f80:	af ab       	std	Y+55, r26	; 0x37
    2f82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f84:	6d a9       	ldd	r22, Y+53	; 0x35
    2f86:	7e a9       	ldd	r23, Y+54	; 0x36
    2f88:	8f a9       	ldd	r24, Y+55	; 0x37
    2f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	4a e7       	ldi	r20, 0x7A	; 122
    2f92:	53 e4       	ldi	r21, 0x43	; 67
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	89 ab       	std	Y+49, r24	; 0x31
    2f9e:	9a ab       	std	Y+50, r25	; 0x32
    2fa0:	ab ab       	std	Y+51, r26	; 0x33
    2fa2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fa4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fa8:	8b a9       	ldd	r24, Y+51	; 0x33
    2faa:	9c a9       	ldd	r25, Y+52	; 0x34
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e8       	ldi	r20, 0x80	; 128
    2fb2:	5f e3       	ldi	r21, 0x3F	; 63
    2fb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb8:	88 23       	and	r24, r24
    2fba:	2c f4       	brge	.+10     	; 0x2fc6 <H_LED_Void_LedBlink+0xb8>
		__ticks = 1;
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	98 ab       	std	Y+48, r25	; 0x30
    2fc2:	8f a7       	std	Y+47, r24	; 0x2f
    2fc4:	3f c0       	rjmp	.+126    	; 0x3044 <H_LED_Void_LedBlink+0x136>
	else if (__tmp > 65535)
    2fc6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fc8:	7a a9       	ldd	r23, Y+50	; 0x32
    2fca:	8b a9       	ldd	r24, Y+51	; 0x33
    2fcc:	9c a9       	ldd	r25, Y+52	; 0x34
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	3f ef       	ldi	r19, 0xFF	; 255
    2fd2:	4f e7       	ldi	r20, 0x7F	; 127
    2fd4:	57 e4       	ldi	r21, 0x47	; 71
    2fd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fda:	18 16       	cp	r1, r24
    2fdc:	4c f5       	brge	.+82     	; 0x3030 <H_LED_Void_LedBlink+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fde:	6d a9       	ldd	r22, Y+53	; 0x35
    2fe0:	7e a9       	ldd	r23, Y+54	; 0x36
    2fe2:	8f a9       	ldd	r24, Y+55	; 0x37
    2fe4:	98 ad       	ldd	r25, Y+56	; 0x38
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e2       	ldi	r20, 0x20	; 32
    2fec:	51 e4       	ldi	r21, 0x41	; 65
    2fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	98 ab       	std	Y+48, r25	; 0x30
    3004:	8f a7       	std	Y+47, r24	; 0x2f
    3006:	0f c0       	rjmp	.+30     	; 0x3026 <H_LED_Void_LedBlink+0x118>
    3008:	89 e1       	ldi	r24, 0x19	; 25
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	9e a7       	std	Y+46, r25	; 0x2e
    300e:	8d a7       	std	Y+45, r24	; 0x2d
    3010:	8d a5       	ldd	r24, Y+45	; 0x2d
    3012:	9e a5       	ldd	r25, Y+46	; 0x2e
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <H_LED_Void_LedBlink+0x106>
    3018:	9e a7       	std	Y+46, r25	; 0x2e
    301a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301c:	8f a5       	ldd	r24, Y+47	; 0x2f
    301e:	98 a9       	ldd	r25, Y+48	; 0x30
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	98 ab       	std	Y+48, r25	; 0x30
    3024:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3026:	8f a5       	ldd	r24, Y+47	; 0x2f
    3028:	98 a9       	ldd	r25, Y+48	; 0x30
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	69 f7       	brne	.-38     	; 0x3008 <H_LED_Void_LedBlink+0xfa>
    302e:	14 c0       	rjmp	.+40     	; 0x3058 <H_LED_Void_LedBlink+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3030:	69 a9       	ldd	r22, Y+49	; 0x31
    3032:	7a a9       	ldd	r23, Y+50	; 0x32
    3034:	8b a9       	ldd	r24, Y+51	; 0x33
    3036:	9c a9       	ldd	r25, Y+52	; 0x34
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	98 ab       	std	Y+48, r25	; 0x30
    3042:	8f a7       	std	Y+47, r24	; 0x2f
    3044:	8f a5       	ldd	r24, Y+47	; 0x2f
    3046:	98 a9       	ldd	r25, Y+48	; 0x30
    3048:	9c a7       	std	Y+44, r25	; 0x2c
    304a:	8b a7       	std	Y+43, r24	; 0x2b
    304c:	8b a5       	ldd	r24, Y+43	; 0x2b
    304e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <H_LED_Void_LedBlink+0x142>
    3054:	9c a7       	std	Y+44, r25	; 0x2c
    3056:	8b a7       	std	Y+43, r24	; 0x2b
	 		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
	 		///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, LOW);
    3058:	83 e0       	ldi	r24, 0x03	; 3
    305a:	62 e0       	ldi	r22, 0x02	; 2
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    3062:	76 c1       	rjmp	.+748    	; 0x3350 <H_LED_Void_LedBlink+0x442>
	 	break;
	    ///******_ Blink  RED_LED Pin Value _******************///
		case RED_LED :
			///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, HIGH);
    3064:	83 e0       	ldi	r24, 0x03	; 3
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	90 e5       	ldi	r25, 0x50	; 80
    3072:	a3 ec       	ldi	r26, 0xC3	; 195
    3074:	b7 e4       	ldi	r27, 0x47	; 71
    3076:	8f a3       	std	Y+39, r24	; 0x27
    3078:	98 a7       	std	Y+40, r25	; 0x28
    307a:	a9 a7       	std	Y+41, r26	; 0x29
    307c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307e:	6f a1       	ldd	r22, Y+39	; 0x27
    3080:	78 a5       	ldd	r23, Y+40	; 0x28
    3082:	89 a5       	ldd	r24, Y+41	; 0x29
    3084:	9a a5       	ldd	r25, Y+42	; 0x2a
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	4a e7       	ldi	r20, 0x7A	; 122
    308c:	53 e4       	ldi	r21, 0x43	; 67
    308e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	8b a3       	std	Y+35, r24	; 0x23
    3098:	9c a3       	std	Y+36, r25	; 0x24
    309a:	ad a3       	std	Y+37, r26	; 0x25
    309c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    309e:	6b a1       	ldd	r22, Y+35	; 0x23
    30a0:	7c a1       	ldd	r23, Y+36	; 0x24
    30a2:	8d a1       	ldd	r24, Y+37	; 0x25
    30a4:	9e a1       	ldd	r25, Y+38	; 0x26
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e8       	ldi	r20, 0x80	; 128
    30ac:	5f e3       	ldi	r21, 0x3F	; 63
    30ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b2:	88 23       	and	r24, r24
    30b4:	2c f4       	brge	.+10     	; 0x30c0 <H_LED_Void_LedBlink+0x1b2>
		__ticks = 1;
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9a a3       	std	Y+34, r25	; 0x22
    30bc:	89 a3       	std	Y+33, r24	; 0x21
    30be:	3f c0       	rjmp	.+126    	; 0x313e <H_LED_Void_LedBlink+0x230>
	else if (__tmp > 65535)
    30c0:	6b a1       	ldd	r22, Y+35	; 0x23
    30c2:	7c a1       	ldd	r23, Y+36	; 0x24
    30c4:	8d a1       	ldd	r24, Y+37	; 0x25
    30c6:	9e a1       	ldd	r25, Y+38	; 0x26
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	3f ef       	ldi	r19, 0xFF	; 255
    30cc:	4f e7       	ldi	r20, 0x7F	; 127
    30ce:	57 e4       	ldi	r21, 0x47	; 71
    30d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d4:	18 16       	cp	r1, r24
    30d6:	4c f5       	brge	.+82     	; 0x312a <H_LED_Void_LedBlink+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d8:	6f a1       	ldd	r22, Y+39	; 0x27
    30da:	78 a5       	ldd	r23, Y+40	; 0x28
    30dc:	89 a5       	ldd	r24, Y+41	; 0x29
    30de:	9a a5       	ldd	r25, Y+42	; 0x2a
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e2       	ldi	r20, 0x20	; 32
    30e6:	51 e4       	ldi	r21, 0x41	; 65
    30e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	bc 01       	movw	r22, r24
    30f2:	cd 01       	movw	r24, r26
    30f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	9a a3       	std	Y+34, r25	; 0x22
    30fe:	89 a3       	std	Y+33, r24	; 0x21
    3100:	0f c0       	rjmp	.+30     	; 0x3120 <H_LED_Void_LedBlink+0x212>
    3102:	89 e1       	ldi	r24, 0x19	; 25
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	98 a3       	std	Y+32, r25	; 0x20
    3108:	8f 8f       	std	Y+31, r24	; 0x1f
    310a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    310c:	98 a1       	ldd	r25, Y+32	; 0x20
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	f1 f7       	brne	.-4      	; 0x310e <H_LED_Void_LedBlink+0x200>
    3112:	98 a3       	std	Y+32, r25	; 0x20
    3114:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3116:	89 a1       	ldd	r24, Y+33	; 0x21
    3118:	9a a1       	ldd	r25, Y+34	; 0x22
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	9a a3       	std	Y+34, r25	; 0x22
    311e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3120:	89 a1       	ldd	r24, Y+33	; 0x21
    3122:	9a a1       	ldd	r25, Y+34	; 0x22
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	69 f7       	brne	.-38     	; 0x3102 <H_LED_Void_LedBlink+0x1f4>
    3128:	14 c0       	rjmp	.+40     	; 0x3152 <H_LED_Void_LedBlink+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    312a:	6b a1       	ldd	r22, Y+35	; 0x23
    312c:	7c a1       	ldd	r23, Y+36	; 0x24
    312e:	8d a1       	ldd	r24, Y+37	; 0x25
    3130:	9e a1       	ldd	r25, Y+38	; 0x26
    3132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	9a a3       	std	Y+34, r25	; 0x22
    313c:	89 a3       	std	Y+33, r24	; 0x21
    313e:	89 a1       	ldd	r24, Y+33	; 0x21
    3140:	9a a1       	ldd	r25, Y+34	; 0x22
    3142:	9e 8f       	std	Y+30, r25	; 0x1e
    3144:	8d 8f       	std	Y+29, r24	; 0x1d
    3146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	f1 f7       	brne	.-4      	; 0x314a <H_LED_Void_LedBlink+0x23c>
    314e:	9e 8f       	std	Y+30, r25	; 0x1e
    3150:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LED_DELAY_TIME); //delay for 10000ms
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, LOW);
    3152:	83 e0       	ldi	r24, 0x03	; 3
    3154:	60 e0       	ldi	r22, 0x00	; 0
    3156:	40 e0       	ldi	r20, 0x00	; 0
    3158:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    315c:	f9 c0       	rjmp	.+498    	; 0x3350 <H_LED_Void_LedBlink+0x442>
		break;
		///******_ Blink  GRN_LED Pin Value _******************///
     	case GRN_LED :
     		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, HIGH);
    315e:	83 e0       	ldi	r24, 0x03	; 3
    3160:	61 e0       	ldi	r22, 0x01	; 1
    3162:	41 e0       	ldi	r20, 0x01	; 1
    3164:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e5       	ldi	r25, 0x50	; 80
    316c:	a3 ec       	ldi	r26, 0xC3	; 195
    316e:	b7 e4       	ldi	r27, 0x47	; 71
    3170:	89 8f       	std	Y+25, r24	; 0x19
    3172:	9a 8f       	std	Y+26, r25	; 0x1a
    3174:	ab 8f       	std	Y+27, r26	; 0x1b
    3176:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3178:	69 8d       	ldd	r22, Y+25	; 0x19
    317a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    317e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4a e7       	ldi	r20, 0x7A	; 122
    3186:	53 e4       	ldi	r21, 0x43	; 67
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	8d 8b       	std	Y+21, r24	; 0x15
    3192:	9e 8b       	std	Y+22, r25	; 0x16
    3194:	af 8b       	std	Y+23, r26	; 0x17
    3196:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3198:	6d 89       	ldd	r22, Y+21	; 0x15
    319a:	7e 89       	ldd	r23, Y+22	; 0x16
    319c:	8f 89       	ldd	r24, Y+23	; 0x17
    319e:	98 8d       	ldd	r25, Y+24	; 0x18
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e8       	ldi	r20, 0x80	; 128
    31a6:	5f e3       	ldi	r21, 0x3F	; 63
    31a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ac:	88 23       	and	r24, r24
    31ae:	2c f4       	brge	.+10     	; 0x31ba <H_LED_Void_LedBlink+0x2ac>
		__ticks = 1;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9c 8b       	std	Y+20, r25	; 0x14
    31b6:	8b 8b       	std	Y+19, r24	; 0x13
    31b8:	3f c0       	rjmp	.+126    	; 0x3238 <H_LED_Void_LedBlink+0x32a>
	else if (__tmp > 65535)
    31ba:	6d 89       	ldd	r22, Y+21	; 0x15
    31bc:	7e 89       	ldd	r23, Y+22	; 0x16
    31be:	8f 89       	ldd	r24, Y+23	; 0x17
    31c0:	98 8d       	ldd	r25, Y+24	; 0x18
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	4f e7       	ldi	r20, 0x7F	; 127
    31c8:	57 e4       	ldi	r21, 0x47	; 71
    31ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ce:	18 16       	cp	r1, r24
    31d0:	4c f5       	brge	.+82     	; 0x3224 <H_LED_Void_LedBlink+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d2:	69 8d       	ldd	r22, Y+25	; 0x19
    31d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e2       	ldi	r20, 0x20	; 32
    31e0:	51 e4       	ldi	r21, 0x41	; 65
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9c 8b       	std	Y+20, r25	; 0x14
    31f8:	8b 8b       	std	Y+19, r24	; 0x13
    31fa:	0f c0       	rjmp	.+30     	; 0x321a <H_LED_Void_LedBlink+0x30c>
    31fc:	89 e1       	ldi	r24, 0x19	; 25
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9a 8b       	std	Y+18, r25	; 0x12
    3202:	89 8b       	std	Y+17, r24	; 0x11
    3204:	89 89       	ldd	r24, Y+17	; 0x11
    3206:	9a 89       	ldd	r25, Y+18	; 0x12
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <H_LED_Void_LedBlink+0x2fa>
    320c:	9a 8b       	std	Y+18, r25	; 0x12
    320e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3210:	8b 89       	ldd	r24, Y+19	; 0x13
    3212:	9c 89       	ldd	r25, Y+20	; 0x14
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	9c 8b       	std	Y+20, r25	; 0x14
    3218:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321a:	8b 89       	ldd	r24, Y+19	; 0x13
    321c:	9c 89       	ldd	r25, Y+20	; 0x14
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	69 f7       	brne	.-38     	; 0x31fc <H_LED_Void_LedBlink+0x2ee>
    3222:	14 c0       	rjmp	.+40     	; 0x324c <H_LED_Void_LedBlink+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3224:	6d 89       	ldd	r22, Y+21	; 0x15
    3226:	7e 89       	ldd	r23, Y+22	; 0x16
    3228:	8f 89       	ldd	r24, Y+23	; 0x17
    322a:	98 8d       	ldd	r25, Y+24	; 0x18
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9c 8b       	std	Y+20, r25	; 0x14
    3236:	8b 8b       	std	Y+19, r24	; 0x13
    3238:	8b 89       	ldd	r24, Y+19	; 0x13
    323a:	9c 89       	ldd	r25, Y+20	; 0x14
    323c:	98 8b       	std	Y+16, r25	; 0x10
    323e:	8f 87       	std	Y+15, r24	; 0x0f
    3240:	8f 85       	ldd	r24, Y+15	; 0x0f
    3242:	98 89       	ldd	r25, Y+16	; 0x10
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <H_LED_Void_LedBlink+0x336>
    3248:	98 8b       	std	Y+16, r25	; 0x10
    324a:	8f 87       	std	Y+15, r24	; 0x0f
     		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
     		///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	61 e0       	ldi	r22, 0x01	; 1
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    3256:	7c c0       	rjmp	.+248    	; 0x3350 <H_LED_Void_LedBlink+0x442>
     	break;

     	///******_ Blink  YELLOW_LED Pin Value _******************///
     	case YELLOW_LED :
		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	63 e0       	ldi	r22, 0x03	; 3
    325c:	41 e0       	ldi	r20, 0x01	; 1
    325e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e5       	ldi	r25, 0x50	; 80
    3266:	a3 ec       	ldi	r26, 0xC3	; 195
    3268:	b7 e4       	ldi	r27, 0x47	; 71
    326a:	8b 87       	std	Y+11, r24	; 0x0b
    326c:	9c 87       	std	Y+12, r25	; 0x0c
    326e:	ad 87       	std	Y+13, r26	; 0x0d
    3270:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a e7       	ldi	r20, 0x7A	; 122
    3280:	53 e4       	ldi	r21, 0x43	; 67
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	8f 83       	std	Y+7, r24	; 0x07
    328c:	98 87       	std	Y+8, r25	; 0x08
    328e:	a9 87       	std	Y+9, r26	; 0x09
    3290:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3292:	6f 81       	ldd	r22, Y+7	; 0x07
    3294:	78 85       	ldd	r23, Y+8	; 0x08
    3296:	89 85       	ldd	r24, Y+9	; 0x09
    3298:	9a 85       	ldd	r25, Y+10	; 0x0a
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e8       	ldi	r20, 0x80	; 128
    32a0:	5f e3       	ldi	r21, 0x3F	; 63
    32a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a6:	88 23       	and	r24, r24
    32a8:	2c f4       	brge	.+10     	; 0x32b4 <H_LED_Void_LedBlink+0x3a6>
		__ticks = 1;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9e 83       	std	Y+6, r25	; 0x06
    32b0:	8d 83       	std	Y+5, r24	; 0x05
    32b2:	3f c0       	rjmp	.+126    	; 0x3332 <H_LED_Void_LedBlink+0x424>
	else if (__tmp > 65535)
    32b4:	6f 81       	ldd	r22, Y+7	; 0x07
    32b6:	78 85       	ldd	r23, Y+8	; 0x08
    32b8:	89 85       	ldd	r24, Y+9	; 0x09
    32ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	3f ef       	ldi	r19, 0xFF	; 255
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	57 e4       	ldi	r21, 0x47	; 71
    32c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c8:	18 16       	cp	r1, r24
    32ca:	4c f5       	brge	.+82     	; 0x331e <H_LED_Void_LedBlink+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e2       	ldi	r20, 0x20	; 32
    32da:	51 e4       	ldi	r21, 0x41	; 65
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8d 83       	std	Y+5, r24	; 0x05
    32f4:	0f c0       	rjmp	.+30     	; 0x3314 <H_LED_Void_LedBlink+0x406>
    32f6:	89 e1       	ldi	r24, 0x19	; 25
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	9c 83       	std	Y+4, r25	; 0x04
    32fc:	8b 83       	std	Y+3, r24	; 0x03
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	9c 81       	ldd	r25, Y+4	; 0x04
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <H_LED_Void_LedBlink+0x3f4>
    3306:	9c 83       	std	Y+4, r25	; 0x04
    3308:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330a:	8d 81       	ldd	r24, Y+5	; 0x05
    330c:	9e 81       	ldd	r25, Y+6	; 0x06
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3314:	8d 81       	ldd	r24, Y+5	; 0x05
    3316:	9e 81       	ldd	r25, Y+6	; 0x06
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	69 f7       	brne	.-38     	; 0x32f6 <H_LED_Void_LedBlink+0x3e8>
    331c:	14 c0       	rjmp	.+40     	; 0x3346 <H_LED_Void_LedBlink+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331e:	6f 81       	ldd	r22, Y+7	; 0x07
    3320:	78 85       	ldd	r23, Y+8	; 0x08
    3322:	89 85       	ldd	r24, Y+9	; 0x09
    3324:	9a 85       	ldd	r25, Y+10	; 0x0a
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9e 83       	std	Y+6, r25	; 0x06
    3330:	8d 83       	std	Y+5, r24	; 0x05
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <H_LED_Void_LedBlink+0x430>
    3342:	9a 83       	std	Y+2, r25	; 0x02
    3344:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
		///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
		    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    3346:	83 e0       	ldi	r24, 0x03	; 3
    3348:	63 e0       	ldi	r22, 0x03	; 3
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
		break;


		default :   /*****error*****/    break;

}    	}
    3350:	eb 96       	adiw	r28, 0x3b	; 59
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <H_LCD_Void_LCDInt>:

/// ***************MACROS************//
/// **************FUNCTIONS********//

void H_LCD_Void_LCDInt(void)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	2e 97       	sbiw	r28, 0x0e	; 14
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON


#elif  LCD_MODE == Activate_4_bit_mode   ///****4_bit_mode**********///
	///**SetPinDirection for LCD_DATA_PINS from LCD_DATA4 to LCD_DATA7 to OUTPUT////
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA4_PIN,OUTPUT ); ///LCD_DATA4_PIN
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	64 e0       	ldi	r22, 0x04	; 4
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA5_PIN,OUTPUT ); ///LCD_DATA5_PIN
    3380:	82 e0       	ldi	r24, 0x02	; 2
    3382:	65 e0       	ldi	r22, 0x05	; 5
    3384:	41 e0       	ldi	r20, 0x01	; 1
    3386:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA6_PIN,OUTPUT ); ///LCD_DATA6_PIN
    338a:	82 e0       	ldi	r24, 0x02	; 2
    338c:	66 e0       	ldi	r22, 0x06	; 6
    338e:	41 e0       	ldi	r20, 0x01	; 1
    3390:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA7_PIN,OUTPUT ); ///LCD_DATA7_PIN
    3394:	82 e0       	ldi	r24, 0x02	; 2
    3396:	67 e0       	ldi	r22, 0x07	; 7
    3398:	41 e0       	ldi	r20, 0x01	; 1
    339a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT );
    339e:	84 e0       	ldi	r24, 0x04	; 4
    33a0:	67 e0       	ldi	r22, 0x07	; 7
    33a2:	41 e0       	ldi	r20, 0x01	; 1
    33a4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT );
    33a8:	84 e0       	ldi	r24, 0x04	; 4
    33aa:	66 e0       	ldi	r22, 0x06	; 6
    33ac:	41 e0       	ldi	r20, 0x01	; 1
    33ae:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	90 e4       	ldi	r25, 0x40	; 64
    33b6:	ac e1       	ldi	r26, 0x1C	; 28
    33b8:	b6 e4       	ldi	r27, 0x46	; 70
    33ba:	8b 87       	std	Y+11, r24	; 0x0b
    33bc:	9c 87       	std	Y+12, r25	; 0x0c
    33be:	ad 87       	std	Y+13, r26	; 0x0d
    33c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	4a e7       	ldi	r20, 0x7A	; 122
    33d0:	53 e4       	ldi	r21, 0x43	; 67
    33d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	8f 83       	std	Y+7, r24	; 0x07
    33dc:	98 87       	std	Y+8, r25	; 0x08
    33de:	a9 87       	std	Y+9, r26	; 0x09
    33e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33e2:	6f 81       	ldd	r22, Y+7	; 0x07
    33e4:	78 85       	ldd	r23, Y+8	; 0x08
    33e6:	89 85       	ldd	r24, Y+9	; 0x09
    33e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	40 e8       	ldi	r20, 0x80	; 128
    33f0:	5f e3       	ldi	r21, 0x3F	; 63
    33f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33f6:	88 23       	and	r24, r24
    33f8:	2c f4       	brge	.+10     	; 0x3404 <H_LCD_Void_LCDInt+0xa2>
		__ticks = 1;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	9e 83       	std	Y+6, r25	; 0x06
    3400:	8d 83       	std	Y+5, r24	; 0x05
    3402:	3f c0       	rjmp	.+126    	; 0x3482 <H_LCD_Void_LCDInt+0x120>
	else if (__tmp > 65535)
    3404:	6f 81       	ldd	r22, Y+7	; 0x07
    3406:	78 85       	ldd	r23, Y+8	; 0x08
    3408:	89 85       	ldd	r24, Y+9	; 0x09
    340a:	9a 85       	ldd	r25, Y+10	; 0x0a
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	3f ef       	ldi	r19, 0xFF	; 255
    3410:	4f e7       	ldi	r20, 0x7F	; 127
    3412:	57 e4       	ldi	r21, 0x47	; 71
    3414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3418:	18 16       	cp	r1, r24
    341a:	4c f5       	brge	.+82     	; 0x346e <H_LCD_Void_LCDInt+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    341c:	6b 85       	ldd	r22, Y+11	; 0x0b
    341e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3420:	8d 85       	ldd	r24, Y+13	; 0x0d
    3422:	9e 85       	ldd	r25, Y+14	; 0x0e
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	40 e2       	ldi	r20, 0x20	; 32
    342a:	51 e4       	ldi	r21, 0x41	; 65
    342c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	9e 83       	std	Y+6, r25	; 0x06
    3442:	8d 83       	std	Y+5, r24	; 0x05
    3444:	0f c0       	rjmp	.+30     	; 0x3464 <H_LCD_Void_LCDInt+0x102>
    3446:	89 e1       	ldi	r24, 0x19	; 25
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	9c 83       	std	Y+4, r25	; 0x04
    344c:	8b 83       	std	Y+3, r24	; 0x03
    344e:	8b 81       	ldd	r24, Y+3	; 0x03
    3450:	9c 81       	ldd	r25, Y+4	; 0x04
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	f1 f7       	brne	.-4      	; 0x3452 <H_LCD_Void_LCDInt+0xf0>
    3456:	9c 83       	std	Y+4, r25	; 0x04
    3458:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    345a:	8d 81       	ldd	r24, Y+5	; 0x05
    345c:	9e 81       	ldd	r25, Y+6	; 0x06
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	9e 83       	std	Y+6, r25	; 0x06
    3462:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	9e 81       	ldd	r25, Y+6	; 0x06
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	69 f7       	brne	.-38     	; 0x3446 <H_LCD_Void_LCDInt+0xe4>
    346c:	14 c0       	rjmp	.+40     	; 0x3496 <H_LCD_Void_LCDInt+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346e:	6f 81       	ldd	r22, Y+7	; 0x07
    3470:	78 85       	ldd	r23, Y+8	; 0x08
    3472:	89 85       	ldd	r24, Y+9	; 0x09
    3474:	9a 85       	ldd	r25, Y+10	; 0x0a
    3476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	9e 83       	std	Y+6, r25	; 0x06
    3480:	8d 83       	std	Y+5, r24	; 0x05
    3482:	8d 81       	ldd	r24, Y+5	; 0x05
    3484:	9e 81       	ldd	r25, Y+6	; 0x06
    3486:	9a 83       	std	Y+2, r25	; 0x02
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	9a 81       	ldd	r25, Y+2	; 0x02
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	f1 f7       	brne	.-4      	; 0x348e <H_LCD_Void_LCDInt+0x12c>
    3492:	9a 83       	std	Y+2, r25	; 0x02
    3494:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);   /// delay for 1 second to give LCD Microcontroller time to start
	///****************  LCD Commands***********///
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command1);  ///
    3496:	83 e3       	ldi	r24, 0x33	; 51
    3498:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command2);  /// set 4_bit_mode
    349c:	82 e3       	ldi	r24, 0x32	; 50
    349e:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command3);  ///
    34a2:	88 e2       	ldi	r24, 0x28	; 40
    34a4:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON
    34a8:	8c e0       	ldi	r24, 0x0C	; 12
    34aa:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Return_Home);         /// LCD start from home
    34ae:	82 e0       	ldi	r24, 0x02	; 2
    34b0:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Clear_screen);        /// Clear LCD screen
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <H_LCD_Void_LCDWriteCommand>

#endif
}
    34ba:	2e 96       	adiw	r28, 0x0e	; 14
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <H_LCD_Void_LCDDisplayCharacter>:
///***********Function to DisplayCharacter on the LCD*****8///
void H_LCD_Void_LCDDisplayCharacter(u8 Local_u8_character)
{
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	e9 97       	sbiw	r28, 0x39	; 57
    34d6:	0f b6       	in	r0, 0x3f	; 63
    34d8:	f8 94       	cli
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	cd bf       	out	0x3d, r28	; 61
    34e0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    34e2:	84 e0       	ldi	r24, 0x04	; 4
    34e4:	66 e0       	ldi	r22, 0x06	; 6
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_character& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    34ec:	a8 e3       	ldi	r26, 0x38	; 56
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	89 ad       	ldd	r24, Y+57	; 0x39
    34f2:	98 2f       	mov	r25, r24
    34f4:	90 7f       	andi	r25, 0xF0	; 240
    34f6:	e8 e3       	ldi	r30, 0x38	; 56
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	8f 70       	andi	r24, 0x0F	; 15
    34fe:	89 2b       	or	r24, r25
    3500:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3502:	84 e0       	ldi	r24, 0x04	; 4
    3504:	67 e0       	ldi	r22, 0x07	; 7
    3506:	41 e0       	ldi	r20, 0x01	; 1
    3508:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	a0 e8       	ldi	r26, 0x80	; 128
    3512:	bf e3       	ldi	r27, 0x3F	; 63
    3514:	8d ab       	std	Y+53, r24	; 0x35
    3516:	9e ab       	std	Y+54, r25	; 0x36
    3518:	af ab       	std	Y+55, r26	; 0x37
    351a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    351c:	6d a9       	ldd	r22, Y+53	; 0x35
    351e:	7e a9       	ldd	r23, Y+54	; 0x36
    3520:	8f a9       	ldd	r24, Y+55	; 0x37
    3522:	98 ad       	ldd	r25, Y+56	; 0x38
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	4a e7       	ldi	r20, 0x7A	; 122
    352a:	53 e4       	ldi	r21, 0x43	; 67
    352c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	89 ab       	std	Y+49, r24	; 0x31
    3536:	9a ab       	std	Y+50, r25	; 0x32
    3538:	ab ab       	std	Y+51, r26	; 0x33
    353a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    353c:	69 a9       	ldd	r22, Y+49	; 0x31
    353e:	7a a9       	ldd	r23, Y+50	; 0x32
    3540:	8b a9       	ldd	r24, Y+51	; 0x33
    3542:	9c a9       	ldd	r25, Y+52	; 0x34
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e8       	ldi	r20, 0x80	; 128
    354a:	5f e3       	ldi	r21, 0x3F	; 63
    354c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3550:	88 23       	and	r24, r24
    3552:	2c f4       	brge	.+10     	; 0x355e <H_LCD_Void_LCDDisplayCharacter+0x92>
		__ticks = 1;
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	98 ab       	std	Y+48, r25	; 0x30
    355a:	8f a7       	std	Y+47, r24	; 0x2f
    355c:	3f c0       	rjmp	.+126    	; 0x35dc <H_LCD_Void_LCDDisplayCharacter+0x110>
	else if (__tmp > 65535)
    355e:	69 a9       	ldd	r22, Y+49	; 0x31
    3560:	7a a9       	ldd	r23, Y+50	; 0x32
    3562:	8b a9       	ldd	r24, Y+51	; 0x33
    3564:	9c a9       	ldd	r25, Y+52	; 0x34
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	3f ef       	ldi	r19, 0xFF	; 255
    356a:	4f e7       	ldi	r20, 0x7F	; 127
    356c:	57 e4       	ldi	r21, 0x47	; 71
    356e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3572:	18 16       	cp	r1, r24
    3574:	4c f5       	brge	.+82     	; 0x35c8 <H_LCD_Void_LCDDisplayCharacter+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3576:	6d a9       	ldd	r22, Y+53	; 0x35
    3578:	7e a9       	ldd	r23, Y+54	; 0x36
    357a:	8f a9       	ldd	r24, Y+55	; 0x37
    357c:	98 ad       	ldd	r25, Y+56	; 0x38
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	40 e2       	ldi	r20, 0x20	; 32
    3584:	51 e4       	ldi	r21, 0x41	; 65
    3586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	bc 01       	movw	r22, r24
    3590:	cd 01       	movw	r24, r26
    3592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	98 ab       	std	Y+48, r25	; 0x30
    359c:	8f a7       	std	Y+47, r24	; 0x2f
    359e:	0f c0       	rjmp	.+30     	; 0x35be <H_LCD_Void_LCDDisplayCharacter+0xf2>
    35a0:	89 e1       	ldi	r24, 0x19	; 25
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	9e a7       	std	Y+46, r25	; 0x2e
    35a6:	8d a7       	std	Y+45, r24	; 0x2d
    35a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    35aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	f1 f7       	brne	.-4      	; 0x35ac <H_LCD_Void_LCDDisplayCharacter+0xe0>
    35b0:	9e a7       	std	Y+46, r25	; 0x2e
    35b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b6:	98 a9       	ldd	r25, Y+48	; 0x30
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	98 ab       	std	Y+48, r25	; 0x30
    35bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35be:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c0:	98 a9       	ldd	r25, Y+48	; 0x30
    35c2:	00 97       	sbiw	r24, 0x00	; 0
    35c4:	69 f7       	brne	.-38     	; 0x35a0 <H_LCD_Void_LCDDisplayCharacter+0xd4>
    35c6:	14 c0       	rjmp	.+40     	; 0x35f0 <H_LCD_Void_LCDDisplayCharacter+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c8:	69 a9       	ldd	r22, Y+49	; 0x31
    35ca:	7a a9       	ldd	r23, Y+50	; 0x32
    35cc:	8b a9       	ldd	r24, Y+51	; 0x33
    35ce:	9c a9       	ldd	r25, Y+52	; 0x34
    35d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	98 ab       	std	Y+48, r25	; 0x30
    35da:	8f a7       	std	Y+47, r24	; 0x2f
    35dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35de:	98 a9       	ldd	r25, Y+48	; 0x30
    35e0:	9c a7       	std	Y+44, r25	; 0x2c
    35e2:	8b a7       	std	Y+43, r24	; 0x2b
    35e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    35e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    35e8:	01 97       	sbiw	r24, 0x01	; 1
    35ea:	f1 f7       	brne	.-4      	; 0x35e8 <H_LCD_Void_LCDDisplayCharacter+0x11c>
    35ec:	9c a7       	std	Y+44, r25	; 0x2c
    35ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    35f0:	84 e0       	ldi	r24, 0x04	; 4
    35f2:	67 e0       	ldi	r22, 0x07	; 7
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	a0 e8       	ldi	r26, 0x80	; 128
    3600:	bf e3       	ldi	r27, 0x3F	; 63
    3602:	8f a3       	std	Y+39, r24	; 0x27
    3604:	98 a7       	std	Y+40, r25	; 0x28
    3606:	a9 a7       	std	Y+41, r26	; 0x29
    3608:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360a:	6f a1       	ldd	r22, Y+39	; 0x27
    360c:	78 a5       	ldd	r23, Y+40	; 0x28
    360e:	89 a5       	ldd	r24, Y+41	; 0x29
    3610:	9a a5       	ldd	r25, Y+42	; 0x2a
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	4a e7       	ldi	r20, 0x7A	; 122
    3618:	53 e4       	ldi	r21, 0x43	; 67
    361a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	8b a3       	std	Y+35, r24	; 0x23
    3624:	9c a3       	std	Y+36, r25	; 0x24
    3626:	ad a3       	std	Y+37, r26	; 0x25
    3628:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    362a:	6b a1       	ldd	r22, Y+35	; 0x23
    362c:	7c a1       	ldd	r23, Y+36	; 0x24
    362e:	8d a1       	ldd	r24, Y+37	; 0x25
    3630:	9e a1       	ldd	r25, Y+38	; 0x26
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e8       	ldi	r20, 0x80	; 128
    3638:	5f e3       	ldi	r21, 0x3F	; 63
    363a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    363e:	88 23       	and	r24, r24
    3640:	2c f4       	brge	.+10     	; 0x364c <H_LCD_Void_LCDDisplayCharacter+0x180>
		__ticks = 1;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	9a a3       	std	Y+34, r25	; 0x22
    3648:	89 a3       	std	Y+33, r24	; 0x21
    364a:	3f c0       	rjmp	.+126    	; 0x36ca <H_LCD_Void_LCDDisplayCharacter+0x1fe>
	else if (__tmp > 65535)
    364c:	6b a1       	ldd	r22, Y+35	; 0x23
    364e:	7c a1       	ldd	r23, Y+36	; 0x24
    3650:	8d a1       	ldd	r24, Y+37	; 0x25
    3652:	9e a1       	ldd	r25, Y+38	; 0x26
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	3f ef       	ldi	r19, 0xFF	; 255
    3658:	4f e7       	ldi	r20, 0x7F	; 127
    365a:	57 e4       	ldi	r21, 0x47	; 71
    365c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3660:	18 16       	cp	r1, r24
    3662:	4c f5       	brge	.+82     	; 0x36b6 <H_LCD_Void_LCDDisplayCharacter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3664:	6f a1       	ldd	r22, Y+39	; 0x27
    3666:	78 a5       	ldd	r23, Y+40	; 0x28
    3668:	89 a5       	ldd	r24, Y+41	; 0x29
    366a:	9a a5       	ldd	r25, Y+42	; 0x2a
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e2       	ldi	r20, 0x20	; 32
    3672:	51 e4       	ldi	r21, 0x41	; 65
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9a a3       	std	Y+34, r25	; 0x22
    368a:	89 a3       	std	Y+33, r24	; 0x21
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <H_LCD_Void_LCDDisplayCharacter+0x1e0>
    368e:	89 e1       	ldi	r24, 0x19	; 25
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	98 a3       	std	Y+32, r25	; 0x20
    3694:	8f 8f       	std	Y+31, r24	; 0x1f
    3696:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3698:	98 a1       	ldd	r25, Y+32	; 0x20
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <H_LCD_Void_LCDDisplayCharacter+0x1ce>
    369e:	98 a3       	std	Y+32, r25	; 0x20
    36a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a2:	89 a1       	ldd	r24, Y+33	; 0x21
    36a4:	9a a1       	ldd	r25, Y+34	; 0x22
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	9a a3       	std	Y+34, r25	; 0x22
    36aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ac:	89 a1       	ldd	r24, Y+33	; 0x21
    36ae:	9a a1       	ldd	r25, Y+34	; 0x22
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	69 f7       	brne	.-38     	; 0x368e <H_LCD_Void_LCDDisplayCharacter+0x1c2>
    36b4:	14 c0       	rjmp	.+40     	; 0x36de <H_LCD_Void_LCDDisplayCharacter+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b6:	6b a1       	ldd	r22, Y+35	; 0x23
    36b8:	7c a1       	ldd	r23, Y+36	; 0x24
    36ba:	8d a1       	ldd	r24, Y+37	; 0x25
    36bc:	9e a1       	ldd	r25, Y+38	; 0x26
    36be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	9a a3       	std	Y+34, r25	; 0x22
    36c8:	89 a3       	std	Y+33, r24	; 0x21
    36ca:	89 a1       	ldd	r24, Y+33	; 0x21
    36cc:	9a a1       	ldd	r25, Y+34	; 0x22
    36ce:	9e 8f       	std	Y+30, r25	; 0x1e
    36d0:	8d 8f       	std	Y+29, r24	; 0x1d
    36d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <H_LCD_Void_LCDDisplayCharacter+0x20a>
    36da:	9e 8f       	std	Y+30, r25	; 0x1e
    36dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_character << 4 ) & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    36de:	a8 e3       	ldi	r26, 0x38	; 56
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	89 ad       	ldd	r24, Y+57	; 0x39
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	82 95       	swap	r24
    36ea:	92 95       	swap	r25
    36ec:	90 7f       	andi	r25, 0xF0	; 240
    36ee:	98 27       	eor	r25, r24
    36f0:	80 7f       	andi	r24, 0xF0	; 240
    36f2:	98 27       	eor	r25, r24
    36f4:	98 2f       	mov	r25, r24
    36f6:	e8 e3       	ldi	r30, 0x38	; 56
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	8f 70       	andi	r24, 0x0F	; 15
    36fe:	89 2b       	or	r24, r25
    3700:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3702:	84 e0       	ldi	r24, 0x04	; 4
    3704:	67 e0       	ldi	r22, 0x07	; 7
    3706:	41 e0       	ldi	r20, 0x01	; 1
    3708:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	a0 e8       	ldi	r26, 0x80	; 128
    3712:	bf e3       	ldi	r27, 0x3F	; 63
    3714:	89 8f       	std	Y+25, r24	; 0x19
    3716:	9a 8f       	std	Y+26, r25	; 0x1a
    3718:	ab 8f       	std	Y+27, r26	; 0x1b
    371a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    371c:	69 8d       	ldd	r22, Y+25	; 0x19
    371e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3720:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3722:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	4a e7       	ldi	r20, 0x7A	; 122
    372a:	53 e4       	ldi	r21, 0x43	; 67
    372c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	8d 8b       	std	Y+21, r24	; 0x15
    3736:	9e 8b       	std	Y+22, r25	; 0x16
    3738:	af 8b       	std	Y+23, r26	; 0x17
    373a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    373c:	6d 89       	ldd	r22, Y+21	; 0x15
    373e:	7e 89       	ldd	r23, Y+22	; 0x16
    3740:	8f 89       	ldd	r24, Y+23	; 0x17
    3742:	98 8d       	ldd	r25, Y+24	; 0x18
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	40 e8       	ldi	r20, 0x80	; 128
    374a:	5f e3       	ldi	r21, 0x3F	; 63
    374c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3750:	88 23       	and	r24, r24
    3752:	2c f4       	brge	.+10     	; 0x375e <H_LCD_Void_LCDDisplayCharacter+0x292>
		__ticks = 1;
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9c 8b       	std	Y+20, r25	; 0x14
    375a:	8b 8b       	std	Y+19, r24	; 0x13
    375c:	3f c0       	rjmp	.+126    	; 0x37dc <H_LCD_Void_LCDDisplayCharacter+0x310>
	else if (__tmp > 65535)
    375e:	6d 89       	ldd	r22, Y+21	; 0x15
    3760:	7e 89       	ldd	r23, Y+22	; 0x16
    3762:	8f 89       	ldd	r24, Y+23	; 0x17
    3764:	98 8d       	ldd	r25, Y+24	; 0x18
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	3f ef       	ldi	r19, 0xFF	; 255
    376a:	4f e7       	ldi	r20, 0x7F	; 127
    376c:	57 e4       	ldi	r21, 0x47	; 71
    376e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3772:	18 16       	cp	r1, r24
    3774:	4c f5       	brge	.+82     	; 0x37c8 <H_LCD_Void_LCDDisplayCharacter+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3776:	69 8d       	ldd	r22, Y+25	; 0x19
    3778:	7a 8d       	ldd	r23, Y+26	; 0x1a
    377a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    377c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e2       	ldi	r20, 0x20	; 32
    3784:	51 e4       	ldi	r21, 0x41	; 65
    3786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	bc 01       	movw	r22, r24
    3790:	cd 01       	movw	r24, r26
    3792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	9c 8b       	std	Y+20, r25	; 0x14
    379c:	8b 8b       	std	Y+19, r24	; 0x13
    379e:	0f c0       	rjmp	.+30     	; 0x37be <H_LCD_Void_LCDDisplayCharacter+0x2f2>
    37a0:	89 e1       	ldi	r24, 0x19	; 25
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	9a 8b       	std	Y+18, r25	; 0x12
    37a6:	89 8b       	std	Y+17, r24	; 0x11
    37a8:	89 89       	ldd	r24, Y+17	; 0x11
    37aa:	9a 89       	ldd	r25, Y+18	; 0x12
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	f1 f7       	brne	.-4      	; 0x37ac <H_LCD_Void_LCDDisplayCharacter+0x2e0>
    37b0:	9a 8b       	std	Y+18, r25	; 0x12
    37b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b4:	8b 89       	ldd	r24, Y+19	; 0x13
    37b6:	9c 89       	ldd	r25, Y+20	; 0x14
    37b8:	01 97       	sbiw	r24, 0x01	; 1
    37ba:	9c 8b       	std	Y+20, r25	; 0x14
    37bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37be:	8b 89       	ldd	r24, Y+19	; 0x13
    37c0:	9c 89       	ldd	r25, Y+20	; 0x14
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	69 f7       	brne	.-38     	; 0x37a0 <H_LCD_Void_LCDDisplayCharacter+0x2d4>
    37c6:	14 c0       	rjmp	.+40     	; 0x37f0 <H_LCD_Void_LCDDisplayCharacter+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c8:	6d 89       	ldd	r22, Y+21	; 0x15
    37ca:	7e 89       	ldd	r23, Y+22	; 0x16
    37cc:	8f 89       	ldd	r24, Y+23	; 0x17
    37ce:	98 8d       	ldd	r25, Y+24	; 0x18
    37d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	9c 8b       	std	Y+20, r25	; 0x14
    37da:	8b 8b       	std	Y+19, r24	; 0x13
    37dc:	8b 89       	ldd	r24, Y+19	; 0x13
    37de:	9c 89       	ldd	r25, Y+20	; 0x14
    37e0:	98 8b       	std	Y+16, r25	; 0x10
    37e2:	8f 87       	std	Y+15, r24	; 0x0f
    37e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e6:	98 89       	ldd	r25, Y+16	; 0x10
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <H_LCD_Void_LCDDisplayCharacter+0x31c>
    37ec:	98 8b       	std	Y+16, r25	; 0x10
    37ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    37f0:	84 e0       	ldi	r24, 0x04	; 4
    37f2:	67 e0       	ldi	r22, 0x07	; 7
    37f4:	40 e0       	ldi	r20, 0x00	; 0
    37f6:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	a0 ea       	ldi	r26, 0xA0	; 160
    3800:	b0 e4       	ldi	r27, 0x40	; 64
    3802:	8b 87       	std	Y+11, r24	; 0x0b
    3804:	9c 87       	std	Y+12, r25	; 0x0c
    3806:	ad 87       	std	Y+13, r26	; 0x0d
    3808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380a:	6b 85       	ldd	r22, Y+11	; 0x0b
    380c:	7c 85       	ldd	r23, Y+12	; 0x0c
    380e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3810:	9e 85       	ldd	r25, Y+14	; 0x0e
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	4a e7       	ldi	r20, 0x7A	; 122
    3818:	53 e4       	ldi	r21, 0x43	; 67
    381a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	8f 83       	std	Y+7, r24	; 0x07
    3824:	98 87       	std	Y+8, r25	; 0x08
    3826:	a9 87       	std	Y+9, r26	; 0x09
    3828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    382a:	6f 81       	ldd	r22, Y+7	; 0x07
    382c:	78 85       	ldd	r23, Y+8	; 0x08
    382e:	89 85       	ldd	r24, Y+9	; 0x09
    3830:	9a 85       	ldd	r25, Y+10	; 0x0a
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e8       	ldi	r20, 0x80	; 128
    3838:	5f e3       	ldi	r21, 0x3F	; 63
    383a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    383e:	88 23       	and	r24, r24
    3840:	2c f4       	brge	.+10     	; 0x384c <H_LCD_Void_LCDDisplayCharacter+0x380>
		__ticks = 1;
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	8d 83       	std	Y+5, r24	; 0x05
    384a:	3f c0       	rjmp	.+126    	; 0x38ca <H_LCD_Void_LCDDisplayCharacter+0x3fe>
	else if (__tmp > 65535)
    384c:	6f 81       	ldd	r22, Y+7	; 0x07
    384e:	78 85       	ldd	r23, Y+8	; 0x08
    3850:	89 85       	ldd	r24, Y+9	; 0x09
    3852:	9a 85       	ldd	r25, Y+10	; 0x0a
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	3f ef       	ldi	r19, 0xFF	; 255
    3858:	4f e7       	ldi	r20, 0x7F	; 127
    385a:	57 e4       	ldi	r21, 0x47	; 71
    385c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3860:	18 16       	cp	r1, r24
    3862:	4c f5       	brge	.+82     	; 0x38b6 <H_LCD_Void_LCDDisplayCharacter+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3864:	6b 85       	ldd	r22, Y+11	; 0x0b
    3866:	7c 85       	ldd	r23, Y+12	; 0x0c
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e2       	ldi	r20, 0x20	; 32
    3872:	51 e4       	ldi	r21, 0x41	; 65
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	9e 83       	std	Y+6, r25	; 0x06
    388a:	8d 83       	std	Y+5, r24	; 0x05
    388c:	0f c0       	rjmp	.+30     	; 0x38ac <H_LCD_Void_LCDDisplayCharacter+0x3e0>
    388e:	89 e1       	ldi	r24, 0x19	; 25
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	9c 83       	std	Y+4, r25	; 0x04
    3894:	8b 83       	std	Y+3, r24	; 0x03
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	9c 81       	ldd	r25, Y+4	; 0x04
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <H_LCD_Void_LCDDisplayCharacter+0x3ce>
    389e:	9c 83       	std	Y+4, r25	; 0x04
    38a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	9e 81       	ldd	r25, Y+6	; 0x06
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	9e 81       	ldd	r25, Y+6	; 0x06
    38b0:	00 97       	sbiw	r24, 0x00	; 0
    38b2:	69 f7       	brne	.-38     	; 0x388e <H_LCD_Void_LCDDisplayCharacter+0x3c2>
    38b4:	14 c0       	rjmp	.+40     	; 0x38de <H_LCD_Void_LCDDisplayCharacter+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b6:	6f 81       	ldd	r22, Y+7	; 0x07
    38b8:	78 85       	ldd	r23, Y+8	; 0x08
    38ba:	89 85       	ldd	r24, Y+9	; 0x09
    38bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	9a 83       	std	Y+2, r25	; 0x02
    38d0:	89 83       	std	Y+1, r24	; 0x01
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <H_LCD_Void_LCDDisplayCharacter+0x40a>
    38da:	9a 83       	std	Y+2, r25	; 0x02
    38dc:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    38de:	e9 96       	adiw	r28, 0x39	; 57
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
    38ea:	cf 91       	pop	r28
    38ec:	df 91       	pop	r29
    38ee:	08 95       	ret

000038f0 <H_LCD_Void_LCDWriteCommand>:
///***********Function to write a command to LCD*****8///
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    38f0:	df 93       	push	r29
    38f2:	cf 93       	push	r28
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	e9 97       	sbiw	r28, 0x39	; 57
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3906:	84 e0       	ldi	r24, 0x04	; 4
    3908:	66 e0       	ldi	r22, 0x06	; 6
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_Command & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    3910:	a8 e3       	ldi	r26, 0x38	; 56
    3912:	b0 e0       	ldi	r27, 0x00	; 0
    3914:	89 ad       	ldd	r24, Y+57	; 0x39
    3916:	98 2f       	mov	r25, r24
    3918:	90 7f       	andi	r25, 0xF0	; 240
    391a:	e8 e3       	ldi	r30, 0x38	; 56
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	80 81       	ld	r24, Z
    3920:	8f 70       	andi	r24, 0x0F	; 15
    3922:	89 2b       	or	r24, r25
    3924:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3926:	84 e0       	ldi	r24, 0x04	; 4
    3928:	67 e0       	ldi	r22, 0x07	; 7
    392a:	41 e0       	ldi	r20, 0x01	; 1
    392c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	a0 e8       	ldi	r26, 0x80	; 128
    3936:	bf e3       	ldi	r27, 0x3F	; 63
    3938:	8d ab       	std	Y+53, r24	; 0x35
    393a:	9e ab       	std	Y+54, r25	; 0x36
    393c:	af ab       	std	Y+55, r26	; 0x37
    393e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3940:	6d a9       	ldd	r22, Y+53	; 0x35
    3942:	7e a9       	ldd	r23, Y+54	; 0x36
    3944:	8f a9       	ldd	r24, Y+55	; 0x37
    3946:	98 ad       	ldd	r25, Y+56	; 0x38
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	4a e7       	ldi	r20, 0x7A	; 122
    394e:	53 e4       	ldi	r21, 0x43	; 67
    3950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	89 ab       	std	Y+49, r24	; 0x31
    395a:	9a ab       	std	Y+50, r25	; 0x32
    395c:	ab ab       	std	Y+51, r26	; 0x33
    395e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3960:	69 a9       	ldd	r22, Y+49	; 0x31
    3962:	7a a9       	ldd	r23, Y+50	; 0x32
    3964:	8b a9       	ldd	r24, Y+51	; 0x33
    3966:	9c a9       	ldd	r25, Y+52	; 0x34
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	40 e8       	ldi	r20, 0x80	; 128
    396e:	5f e3       	ldi	r21, 0x3F	; 63
    3970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3974:	88 23       	and	r24, r24
    3976:	2c f4       	brge	.+10     	; 0x3982 <H_LCD_Void_LCDWriteCommand+0x92>
		__ticks = 1;
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	98 ab       	std	Y+48, r25	; 0x30
    397e:	8f a7       	std	Y+47, r24	; 0x2f
    3980:	3f c0       	rjmp	.+126    	; 0x3a00 <H_LCD_Void_LCDWriteCommand+0x110>
	else if (__tmp > 65535)
    3982:	69 a9       	ldd	r22, Y+49	; 0x31
    3984:	7a a9       	ldd	r23, Y+50	; 0x32
    3986:	8b a9       	ldd	r24, Y+51	; 0x33
    3988:	9c a9       	ldd	r25, Y+52	; 0x34
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	3f ef       	ldi	r19, 0xFF	; 255
    398e:	4f e7       	ldi	r20, 0x7F	; 127
    3990:	57 e4       	ldi	r21, 0x47	; 71
    3992:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3996:	18 16       	cp	r1, r24
    3998:	4c f5       	brge	.+82     	; 0x39ec <H_LCD_Void_LCDWriteCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399a:	6d a9       	ldd	r22, Y+53	; 0x35
    399c:	7e a9       	ldd	r23, Y+54	; 0x36
    399e:	8f a9       	ldd	r24, Y+55	; 0x37
    39a0:	98 ad       	ldd	r25, Y+56	; 0x38
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e2       	ldi	r20, 0x20	; 32
    39a8:	51 e4       	ldi	r21, 0x41	; 65
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	98 ab       	std	Y+48, r25	; 0x30
    39c0:	8f a7       	std	Y+47, r24	; 0x2f
    39c2:	0f c0       	rjmp	.+30     	; 0x39e2 <H_LCD_Void_LCDWriteCommand+0xf2>
    39c4:	89 e1       	ldi	r24, 0x19	; 25
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	9e a7       	std	Y+46, r25	; 0x2e
    39ca:	8d a7       	std	Y+45, r24	; 0x2d
    39cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    39ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <H_LCD_Void_LCDWriteCommand+0xe0>
    39d4:	9e a7       	std	Y+46, r25	; 0x2e
    39d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    39da:	98 a9       	ldd	r25, Y+48	; 0x30
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	98 ab       	std	Y+48, r25	; 0x30
    39e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e4:	98 a9       	ldd	r25, Y+48	; 0x30
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	69 f7       	brne	.-38     	; 0x39c4 <H_LCD_Void_LCDWriteCommand+0xd4>
    39ea:	14 c0       	rjmp	.+40     	; 0x3a14 <H_LCD_Void_LCDWriteCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ec:	69 a9       	ldd	r22, Y+49	; 0x31
    39ee:	7a a9       	ldd	r23, Y+50	; 0x32
    39f0:	8b a9       	ldd	r24, Y+51	; 0x33
    39f2:	9c a9       	ldd	r25, Y+52	; 0x34
    39f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	98 ab       	std	Y+48, r25	; 0x30
    39fe:	8f a7       	std	Y+47, r24	; 0x2f
    3a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a02:	98 a9       	ldd	r25, Y+48	; 0x30
    3a04:	9c a7       	std	Y+44, r25	; 0x2c
    3a06:	8b a7       	std	Y+43, r24	; 0x2b
    3a08:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	f1 f7       	brne	.-4      	; 0x3a0c <H_LCD_Void_LCDWriteCommand+0x11c>
    3a10:	9c a7       	std	Y+44, r25	; 0x2c
    3a12:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    3a14:	84 e0       	ldi	r24, 0x04	; 4
    3a16:	67 e0       	ldi	r22, 0x07	; 7
    3a18:	40 e0       	ldi	r20, 0x00	; 0
    3a1a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	a0 e8       	ldi	r26, 0x80	; 128
    3a24:	bf e3       	ldi	r27, 0x3F	; 63
    3a26:	8f a3       	std	Y+39, r24	; 0x27
    3a28:	98 a7       	std	Y+40, r25	; 0x28
    3a2a:	a9 a7       	std	Y+41, r26	; 0x29
    3a2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2e:	6f a1       	ldd	r22, Y+39	; 0x27
    3a30:	78 a5       	ldd	r23, Y+40	; 0x28
    3a32:	89 a5       	ldd	r24, Y+41	; 0x29
    3a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	4a e7       	ldi	r20, 0x7A	; 122
    3a3c:	53 e4       	ldi	r21, 0x43	; 67
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	8b a3       	std	Y+35, r24	; 0x23
    3a48:	9c a3       	std	Y+36, r25	; 0x24
    3a4a:	ad a3       	std	Y+37, r26	; 0x25
    3a4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    3a50:	7c a1       	ldd	r23, Y+36	; 0x24
    3a52:	8d a1       	ldd	r24, Y+37	; 0x25
    3a54:	9e a1       	ldd	r25, Y+38	; 0x26
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e8       	ldi	r20, 0x80	; 128
    3a5c:	5f e3       	ldi	r21, 0x3F	; 63
    3a5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a62:	88 23       	and	r24, r24
    3a64:	2c f4       	brge	.+10     	; 0x3a70 <H_LCD_Void_LCDWriteCommand+0x180>
		__ticks = 1;
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	9a a3       	std	Y+34, r25	; 0x22
    3a6c:	89 a3       	std	Y+33, r24	; 0x21
    3a6e:	3f c0       	rjmp	.+126    	; 0x3aee <H_LCD_Void_LCDWriteCommand+0x1fe>
	else if (__tmp > 65535)
    3a70:	6b a1       	ldd	r22, Y+35	; 0x23
    3a72:	7c a1       	ldd	r23, Y+36	; 0x24
    3a74:	8d a1       	ldd	r24, Y+37	; 0x25
    3a76:	9e a1       	ldd	r25, Y+38	; 0x26
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	3f ef       	ldi	r19, 0xFF	; 255
    3a7c:	4f e7       	ldi	r20, 0x7F	; 127
    3a7e:	57 e4       	ldi	r21, 0x47	; 71
    3a80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a84:	18 16       	cp	r1, r24
    3a86:	4c f5       	brge	.+82     	; 0x3ada <H_LCD_Void_LCDWriteCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a88:	6f a1       	ldd	r22, Y+39	; 0x27
    3a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    3a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	40 e2       	ldi	r20, 0x20	; 32
    3a96:	51 e4       	ldi	r21, 0x41	; 65
    3a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	bc 01       	movw	r22, r24
    3aa2:	cd 01       	movw	r24, r26
    3aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	9a a3       	std	Y+34, r25	; 0x22
    3aae:	89 a3       	std	Y+33, r24	; 0x21
    3ab0:	0f c0       	rjmp	.+30     	; 0x3ad0 <H_LCD_Void_LCDWriteCommand+0x1e0>
    3ab2:	89 e1       	ldi	r24, 0x19	; 25
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	98 a3       	std	Y+32, r25	; 0x20
    3ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    3aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3abc:	98 a1       	ldd	r25, Y+32	; 0x20
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	f1 f7       	brne	.-4      	; 0x3abe <H_LCD_Void_LCDWriteCommand+0x1ce>
    3ac2:	98 a3       	std	Y+32, r25	; 0x20
    3ac4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	9a a3       	std	Y+34, r25	; 0x22
    3ace:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad4:	00 97       	sbiw	r24, 0x00	; 0
    3ad6:	69 f7       	brne	.-38     	; 0x3ab2 <H_LCD_Void_LCDWriteCommand+0x1c2>
    3ad8:	14 c0       	rjmp	.+40     	; 0x3b02 <H_LCD_Void_LCDWriteCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ada:	6b a1       	ldd	r22, Y+35	; 0x23
    3adc:	7c a1       	ldd	r23, Y+36	; 0x24
    3ade:	8d a1       	ldd	r24, Y+37	; 0x25
    3ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	9a a3       	std	Y+34, r25	; 0x22
    3aec:	89 a3       	std	Y+33, r24	; 0x21
    3aee:	89 a1       	ldd	r24, Y+33	; 0x21
    3af0:	9a a1       	ldd	r25, Y+34	; 0x22
    3af2:	9e 8f       	std	Y+30, r25	; 0x1e
    3af4:	8d 8f       	std	Y+29, r24	; 0x1d
    3af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3af8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <H_LCD_Void_LCDWriteCommand+0x20a>
    3afe:	9e 8f       	std	Y+30, r25	; 0x1e
    3b00:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_Command << 4)& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    3b02:	a8 e3       	ldi	r26, 0x38	; 56
    3b04:	b0 e0       	ldi	r27, 0x00	; 0
    3b06:	89 ad       	ldd	r24, Y+57	; 0x39
    3b08:	88 2f       	mov	r24, r24
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	82 95       	swap	r24
    3b0e:	92 95       	swap	r25
    3b10:	90 7f       	andi	r25, 0xF0	; 240
    3b12:	98 27       	eor	r25, r24
    3b14:	80 7f       	andi	r24, 0xF0	; 240
    3b16:	98 27       	eor	r25, r24
    3b18:	98 2f       	mov	r25, r24
    3b1a:	e8 e3       	ldi	r30, 0x38	; 56
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	80 81       	ld	r24, Z
    3b20:	8f 70       	andi	r24, 0x0F	; 15
    3b22:	89 2b       	or	r24, r25
    3b24:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3b26:	84 e0       	ldi	r24, 0x04	; 4
    3b28:	67 e0       	ldi	r22, 0x07	; 7
    3b2a:	41 e0       	ldi	r20, 0x01	; 1
    3b2c:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	a0 e8       	ldi	r26, 0x80	; 128
    3b36:	bf e3       	ldi	r27, 0x3F	; 63
    3b38:	89 8f       	std	Y+25, r24	; 0x19
    3b3a:	9a 8f       	std	Y+26, r25	; 0x1a
    3b3c:	ab 8f       	std	Y+27, r26	; 0x1b
    3b3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b40:	69 8d       	ldd	r22, Y+25	; 0x19
    3b42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	4a e7       	ldi	r20, 0x7A	; 122
    3b4e:	53 e4       	ldi	r21, 0x43	; 67
    3b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	8d 8b       	std	Y+21, r24	; 0x15
    3b5a:	9e 8b       	std	Y+22, r25	; 0x16
    3b5c:	af 8b       	std	Y+23, r26	; 0x17
    3b5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b60:	6d 89       	ldd	r22, Y+21	; 0x15
    3b62:	7e 89       	ldd	r23, Y+22	; 0x16
    3b64:	8f 89       	ldd	r24, Y+23	; 0x17
    3b66:	98 8d       	ldd	r25, Y+24	; 0x18
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	40 e8       	ldi	r20, 0x80	; 128
    3b6e:	5f e3       	ldi	r21, 0x3F	; 63
    3b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b74:	88 23       	and	r24, r24
    3b76:	2c f4       	brge	.+10     	; 0x3b82 <H_LCD_Void_LCDWriteCommand+0x292>
		__ticks = 1;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	9c 8b       	std	Y+20, r25	; 0x14
    3b7e:	8b 8b       	std	Y+19, r24	; 0x13
    3b80:	3f c0       	rjmp	.+126    	; 0x3c00 <H_LCD_Void_LCDWriteCommand+0x310>
	else if (__tmp > 65535)
    3b82:	6d 89       	ldd	r22, Y+21	; 0x15
    3b84:	7e 89       	ldd	r23, Y+22	; 0x16
    3b86:	8f 89       	ldd	r24, Y+23	; 0x17
    3b88:	98 8d       	ldd	r25, Y+24	; 0x18
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	3f ef       	ldi	r19, 0xFF	; 255
    3b8e:	4f e7       	ldi	r20, 0x7F	; 127
    3b90:	57 e4       	ldi	r21, 0x47	; 71
    3b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b96:	18 16       	cp	r1, r24
    3b98:	4c f5       	brge	.+82     	; 0x3bec <H_LCD_Void_LCDWriteCommand+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e2       	ldi	r20, 0x20	; 32
    3ba8:	51 e4       	ldi	r21, 0x41	; 65
    3baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	bc 01       	movw	r22, r24
    3bb4:	cd 01       	movw	r24, r26
    3bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	9c 8b       	std	Y+20, r25	; 0x14
    3bc0:	8b 8b       	std	Y+19, r24	; 0x13
    3bc2:	0f c0       	rjmp	.+30     	; 0x3be2 <H_LCD_Void_LCDWriteCommand+0x2f2>
    3bc4:	89 e1       	ldi	r24, 0x19	; 25
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	9a 8b       	std	Y+18, r25	; 0x12
    3bca:	89 8b       	std	Y+17, r24	; 0x11
    3bcc:	89 89       	ldd	r24, Y+17	; 0x11
    3bce:	9a 89       	ldd	r25, Y+18	; 0x12
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	f1 f7       	brne	.-4      	; 0x3bd0 <H_LCD_Void_LCDWriteCommand+0x2e0>
    3bd4:	9a 8b       	std	Y+18, r25	; 0x12
    3bd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bda:	9c 89       	ldd	r25, Y+20	; 0x14
    3bdc:	01 97       	sbiw	r24, 0x01	; 1
    3bde:	9c 8b       	std	Y+20, r25	; 0x14
    3be0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be2:	8b 89       	ldd	r24, Y+19	; 0x13
    3be4:	9c 89       	ldd	r25, Y+20	; 0x14
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	69 f7       	brne	.-38     	; 0x3bc4 <H_LCD_Void_LCDWriteCommand+0x2d4>
    3bea:	14 c0       	rjmp	.+40     	; 0x3c14 <H_LCD_Void_LCDWriteCommand+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bec:	6d 89       	ldd	r22, Y+21	; 0x15
    3bee:	7e 89       	ldd	r23, Y+22	; 0x16
    3bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    3bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    3bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	9c 8b       	std	Y+20, r25	; 0x14
    3bfe:	8b 8b       	std	Y+19, r24	; 0x13
    3c00:	8b 89       	ldd	r24, Y+19	; 0x13
    3c02:	9c 89       	ldd	r25, Y+20	; 0x14
    3c04:	98 8b       	std	Y+16, r25	; 0x10
    3c06:	8f 87       	std	Y+15, r24	; 0x0f
    3c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c0a:	98 89       	ldd	r25, Y+16	; 0x10
    3c0c:	01 97       	sbiw	r24, 0x01	; 1
    3c0e:	f1 f7       	brne	.-4      	; 0x3c0c <H_LCD_Void_LCDWriteCommand+0x31c>
    3c10:	98 8b       	std	Y+16, r25	; 0x10
    3c12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    3c14:	84 e0       	ldi	r24, 0x04	; 4
    3c16:	67 e0       	ldi	r22, 0x07	; 7
    3c18:	40 e0       	ldi	r20, 0x00	; 0
    3c1a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	a0 ea       	ldi	r26, 0xA0	; 160
    3c24:	b0 e4       	ldi	r27, 0x40	; 64
    3c26:	8b 87       	std	Y+11, r24	; 0x0b
    3c28:	9c 87       	std	Y+12, r25	; 0x0c
    3c2a:	ad 87       	std	Y+13, r26	; 0x0d
    3c2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	4a e7       	ldi	r20, 0x7A	; 122
    3c3c:	53 e4       	ldi	r21, 0x43	; 67
    3c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	8f 83       	std	Y+7, r24	; 0x07
    3c48:	98 87       	std	Y+8, r25	; 0x08
    3c4a:	a9 87       	std	Y+9, r26	; 0x09
    3c4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c50:	78 85       	ldd	r23, Y+8	; 0x08
    3c52:	89 85       	ldd	r24, Y+9	; 0x09
    3c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e8       	ldi	r20, 0x80	; 128
    3c5c:	5f e3       	ldi	r21, 0x3F	; 63
    3c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c62:	88 23       	and	r24, r24
    3c64:	2c f4       	brge	.+10     	; 0x3c70 <H_LCD_Void_LCDWriteCommand+0x380>
		__ticks = 1;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	9e 83       	std	Y+6, r25	; 0x06
    3c6c:	8d 83       	std	Y+5, r24	; 0x05
    3c6e:	3f c0       	rjmp	.+126    	; 0x3cee <H_LCD_Void_LCDWriteCommand+0x3fe>
	else if (__tmp > 65535)
    3c70:	6f 81       	ldd	r22, Y+7	; 0x07
    3c72:	78 85       	ldd	r23, Y+8	; 0x08
    3c74:	89 85       	ldd	r24, Y+9	; 0x09
    3c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	3f ef       	ldi	r19, 0xFF	; 255
    3c7c:	4f e7       	ldi	r20, 0x7F	; 127
    3c7e:	57 e4       	ldi	r21, 0x47	; 71
    3c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c84:	18 16       	cp	r1, r24
    3c86:	4c f5       	brge	.+82     	; 0x3cda <H_LCD_Void_LCDWriteCommand+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e2       	ldi	r20, 0x20	; 32
    3c96:	51 e4       	ldi	r21, 0x41	; 65
    3c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	bc 01       	movw	r22, r24
    3ca2:	cd 01       	movw	r24, r26
    3ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	9e 83       	std	Y+6, r25	; 0x06
    3cae:	8d 83       	std	Y+5, r24	; 0x05
    3cb0:	0f c0       	rjmp	.+30     	; 0x3cd0 <H_LCD_Void_LCDWriteCommand+0x3e0>
    3cb2:	89 e1       	ldi	r24, 0x19	; 25
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	9c 83       	std	Y+4, r25	; 0x04
    3cb8:	8b 83       	std	Y+3, r24	; 0x03
    3cba:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	f1 f7       	brne	.-4      	; 0x3cbe <H_LCD_Void_LCDWriteCommand+0x3ce>
    3cc2:	9c 83       	std	Y+4, r25	; 0x04
    3cc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	9e 83       	std	Y+6, r25	; 0x06
    3cce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	69 f7       	brne	.-38     	; 0x3cb2 <H_LCD_Void_LCDWriteCommand+0x3c2>
    3cd8:	14 c0       	rjmp	.+40     	; 0x3d02 <H_LCD_Void_LCDWriteCommand+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cda:	6f 81       	ldd	r22, Y+7	; 0x07
    3cdc:	78 85       	ldd	r23, Y+8	; 0x08
    3cde:	89 85       	ldd	r24, Y+9	; 0x09
    3ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	9e 83       	std	Y+6, r25	; 0x06
    3cec:	8d 83       	std	Y+5, r24	; 0x05
    3cee:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf2:	9a 83       	std	Y+2, r25	; 0x02
    3cf4:	89 83       	std	Y+1, r24	; 0x01
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <H_LCD_Void_LCDWriteCommand+0x40a>
    3cfe:	9a 83       	std	Y+2, r25	; 0x02
    3d00:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    3d02:	e9 96       	adiw	r28, 0x39	; 57
    3d04:	0f b6       	in	r0, 0x3f	; 63
    3d06:	f8 94       	cli
    3d08:	de bf       	out	0x3e, r29	; 62
    3d0a:	0f be       	out	0x3f, r0	; 63
    3d0c:	cd bf       	out	0x3d, r28	; 61
    3d0e:	cf 91       	pop	r28
    3d10:	df 91       	pop	r29
    3d12:	08 95       	ret

00003d14 <H_Lcd_void_LCDWriteString>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
    3d14:	df 93       	push	r29
    3d16:	cf 93       	push	r28
    3d18:	00 d0       	rcall	.+0      	; 0x3d1a <H_Lcd_void_LCDWriteString+0x6>
    3d1a:	0f 92       	push	r0
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	9b 83       	std	Y+3, r25	; 0x03
    3d22:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
    3d24:	19 82       	std	Y+1, r1	; 0x01
    3d26:	0e c0       	rjmp	.+28     	; 0x3d44 <H_Lcd_void_LCDWriteString+0x30>
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
	{
//// call  H_LCD_Void_LCDDisplayCharacter and give it the location of the character on the string
		H_LCD_Void_LCDDisplayCharacter(Local_u8_PTR[Local_u8_Counter]);
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	28 2f       	mov	r18, r24
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d30:	9b 81       	ldd	r25, Y+3	; 0x03
    3d32:	fc 01       	movw	r30, r24
    3d34:	e2 0f       	add	r30, r18
    3d36:	f3 1f       	adc	r31, r19
    3d38:	80 81       	ld	r24, Z
    3d3a:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	8f 5f       	subi	r24, 0xFF	; 255
    3d42:	89 83       	std	Y+1, r24	; 0x01
}
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	28 2f       	mov	r18, r24
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d4e:	fc 01       	movw	r30, r24
    3d50:	e2 0f       	add	r30, r18
    3d52:	f3 1f       	adc	r31, r19
    3d54:	80 81       	ld	r24, Z
    3d56:	88 23       	and	r24, r24
    3d58:	39 f7       	brne	.-50     	; 0x3d28 <H_Lcd_void_LCDWriteString+0x14>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
	}


}
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	08 95       	ret

00003d66 <H_Lcd_void_LCDWriteNum>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteNum(s32 Local_s2_Number )
{
    3d66:	0f 93       	push	r16
    3d68:	1f 93       	push	r17
    3d6a:	df 93       	push	r29
    3d6c:	cf 93       	push	r28
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
    3d72:	61 97       	sbiw	r28, 0x11	; 17
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	f8 94       	cli
    3d78:	de bf       	out	0x3e, r29	; 62
    3d7a:	0f be       	out	0x3f, r0	; 63
    3d7c:	cd bf       	out	0x3d, r28	; 61
    3d7e:	6e 87       	std	Y+14, r22	; 0x0e
    3d80:	7f 87       	std	Y+15, r23	; 0x0f
    3d82:	88 8b       	std	Y+16, r24	; 0x10
    3d84:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8_arr[12]={0};   /// loacal array to store the number of column of the lcd
    3d86:	8c e0       	ldi	r24, 0x0C	; 12
    3d88:	fe 01       	movw	r30, r28
    3d8a:	32 96       	adiw	r30, 0x02	; 2
    3d8c:	df 01       	movw	r26, r30
    3d8e:	98 2f       	mov	r25, r24
    3d90:	1d 92       	st	X+, r1
    3d92:	9a 95       	dec	r25
    3d94:	e9 f7       	brne	.-6      	; 0x3d90 <H_Lcd_void_LCDWriteNum+0x2a>
    s8 Local_s8_Counter =0;    /// local counter for for loop
    3d96:	19 82       	std	Y+1, r1	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    3d98:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d9c:	a8 89       	ldd	r26, Y+16	; 0x10
    3d9e:	b9 89       	ldd	r27, Y+17	; 0x11
    3da0:	bb 23       	and	r27, r27
    3da2:	0c f0       	brlt	.+2      	; 0x3da6 <H_Lcd_void_LCDWriteNum+0x40>
    3da4:	42 c0       	rjmp	.+132    	; 0x3e2a <H_Lcd_void_LCDWriteNum+0xc4>
    {
     H_LCD_Void_LCDDisplayCharacter('-');
    3da6:	8d e2       	ldi	r24, 0x2D	; 45
    3da8:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
     Local_s2_Number = Local_s2_Number * -1 ;
    3dac:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dae:	9f 85       	ldd	r25, Y+15	; 0x0f
    3db0:	a8 89       	ldd	r26, Y+16	; 0x10
    3db2:	b9 89       	ldd	r27, Y+17	; 0x11
    3db4:	b0 95       	com	r27
    3db6:	a0 95       	com	r26
    3db8:	90 95       	com	r25
    3dba:	81 95       	neg	r24
    3dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbe:	af 4f       	sbci	r26, 0xFF	; 255
    3dc0:	bf 4f       	sbci	r27, 0xFF	; 255
    3dc2:	8e 87       	std	Y+14, r24	; 0x0e
    3dc4:	9f 87       	std	Y+15, r25	; 0x0f
    3dc6:	a8 8b       	std	Y+16, r26	; 0x10
    3dc8:	b9 8b       	std	Y+17, r27	; 0x11
    3dca:	2f c0       	rjmp	.+94     	; 0x3e2a <H_Lcd_void_LCDWriteNum+0xc4>
    }
    while(Local_s2_Number !=0)
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	08 2f       	mov	r16, r24
    3dd0:	11 27       	eor	r17, r17
    3dd2:	07 fd       	sbrc	r16, 7
    3dd4:	10 95       	com	r17
    3dd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dda:	a8 89       	ldd	r26, Y+16	; 0x10
    3ddc:	b9 89       	ldd	r27, Y+17	; 0x11
    3dde:	2a e0       	ldi	r18, 0x0A	; 10
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	40 e0       	ldi	r20, 0x00	; 0
    3de4:	50 e0       	ldi	r21, 0x00	; 0
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__divmodsi4>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	28 2f       	mov	r18, r24
    3df4:	ce 01       	movw	r24, r28
    3df6:	02 96       	adiw	r24, 0x02	; 2
    3df8:	fc 01       	movw	r30, r24
    3dfa:	e0 0f       	add	r30, r16
    3dfc:	f1 1f       	adc	r31, r17
    3dfe:	20 83       	st	Z, r18
    	Local_s2_Number /=10;
    3e00:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e02:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e04:	a8 89       	ldd	r26, Y+16	; 0x10
    3e06:	b9 89       	ldd	r27, Y+17	; 0x11
    3e08:	2a e0       	ldi	r18, 0x0A	; 10
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e0       	ldi	r20, 0x00	; 0
    3e0e:	50 e0       	ldi	r21, 0x00	; 0
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__divmodsi4>
    3e18:	da 01       	movw	r26, r20
    3e1a:	c9 01       	movw	r24, r18
    3e1c:	8e 87       	std	Y+14, r24	; 0x0e
    3e1e:	9f 87       	std	Y+15, r25	; 0x0f
    3e20:	a8 8b       	std	Y+16, r26	; 0x10
    3e22:	b9 8b       	std	Y+17, r27	; 0x11
    	Local_s8_Counter ++;
    3e24:	89 81       	ldd	r24, Y+1	; 0x01
    3e26:	8f 5f       	subi	r24, 0xFF	; 255
    3e28:	89 83       	std	Y+1, r24	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    {
     H_LCD_Void_LCDDisplayCharacter('-');
     Local_s2_Number = Local_s2_Number * -1 ;
    }
    while(Local_s2_Number !=0)
    3e2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e2e:	a8 89       	ldd	r26, Y+16	; 0x10
    3e30:	b9 89       	ldd	r27, Y+17	; 0x11
    3e32:	00 97       	sbiw	r24, 0x00	; 0
    3e34:	a1 05       	cpc	r26, r1
    3e36:	b1 05       	cpc	r27, r1
    3e38:	49 f6       	brne	.-110    	; 0x3dcc <H_Lcd_void_LCDWriteNum+0x66>
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    	Local_s2_Number /=10;
    	Local_s8_Counter ++;
    }
    Local_s8_Counter--;
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	81 50       	subi	r24, 0x01	; 1
    3e3e:	89 83       	std	Y+1, r24	; 0x01
   do
    {
    	H_LCD_Void_LCDDisplayCharacter(Local_u8_arr [Local_s8_Counter] + 48);
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	28 2f       	mov	r18, r24
    3e44:	33 27       	eor	r19, r19
    3e46:	27 fd       	sbrc	r18, 7
    3e48:	30 95       	com	r19
    3e4a:	ce 01       	movw	r24, r28
    3e4c:	02 96       	adiw	r24, 0x02	; 2
    3e4e:	fc 01       	movw	r30, r24
    3e50:	e2 0f       	add	r30, r18
    3e52:	f3 1f       	adc	r31, r19
    3e54:	80 81       	ld	r24, Z
    3e56:	80 5d       	subi	r24, 0xD0	; 208
    3e58:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
    	Local_s8_Counter--;
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	81 50       	subi	r24, 0x01	; 1
    3e60:	89 83       	std	Y+1, r24	; 0x01
    } while(Local_s8_Counter >= 0);
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	88 23       	and	r24, r24
    3e66:	64 f7       	brge	.-40     	; 0x3e40 <H_Lcd_void_LCDWriteNum+0xda>

}
    3e68:	61 96       	adiw	r28, 0x11	; 17
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	f8 94       	cli
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	08 95       	ret

00003e7e <H_Lcd_void_LCDGoToXY>:
/// ********function To Select Row and Column	 on LCD   *****///
void H_Lcd_void_LCDGoToXY(u8 Local_u8_Row,u8 Local_u8_Column)
{
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	00 d0       	rcall	.+0      	; 0x3e84 <H_Lcd_void_LCDGoToXY+0x6>
    3e84:	00 d0       	rcall	.+0      	; 0x3e86 <H_Lcd_void_LCDGoToXY+0x8>
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	8b 83       	std	Y+3, r24	; 0x03
    3e8c:	6c 83       	std	Y+4, r22	; 0x04
 if(Local_u8_Row >= 0 && Local_u8_Row <= 1 && Local_u8_Column >= 0 && Local_u8_Column <= 15)
    3e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e90:	82 30       	cpi	r24, 0x02	; 2
    3e92:	a8 f4       	brcc	.+42     	; 0x3ebe <H_Lcd_void_LCDGoToXY+0x40>
    3e94:	8c 81       	ldd	r24, Y+4	; 0x04
    3e96:	80 31       	cpi	r24, 0x10	; 16
    3e98:	90 f4       	brcc	.+36     	; 0x3ebe <H_Lcd_void_LCDGoToXY+0x40>
		{

			u8 Arr[2]={SET_ROW0_COL0, SET_ROW1_COL0};
    3e9a:	80 e8       	ldi	r24, 0x80	; 128
    3e9c:	89 83       	std	Y+1, r24	; 0x01
    3e9e:	80 ec       	ldi	r24, 0xC0	; 192
    3ea0:	8a 83       	std	Y+2, r24	; 0x02
			H_LCD_Void_LCDWriteCommand(Arr[Local_u8_Row]+ Local_u8_Column);
    3ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	01 96       	adiw	r24, 0x01	; 1
    3eac:	fc 01       	movw	r30, r24
    3eae:	e2 0f       	add	r30, r18
    3eb0:	f3 1f       	adc	r31, r19
    3eb2:	90 81       	ld	r25, Z
    3eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    3eb6:	89 0f       	add	r24, r25
    3eb8:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <H_LCD_Void_LCDWriteCommand>
    3ebc:	04 c0       	rjmp	.+8      	; 0x3ec6 <H_Lcd_void_LCDGoToXY+0x48>
		}
 else
 {
	 H_Lcd_void_LCDWriteString("wrong input!!");
    3ebe:	80 e6       	ldi	r24, 0x60	; 96
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <H_Lcd_void_LCDWriteString>
 }

}
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	08 95       	ret

00003ed4 <H_Lcd_void_LCDClockDisplay>:
/// ********function To Display a clock format on LCD  *****///
void H_Lcd_void_LCDClockDisplay(u8 Local_u8_Hours,u8 Local_u8_Minutes,u8 Local_u8_Seconds)
{
    3ed4:	df 93       	push	r29
    3ed6:	cf 93       	push	r28
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	29 97       	sbiw	r28, 0x09	; 9
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	89 83       	std	Y+1, r24	; 0x01
    3eea:	6a 83       	std	Y+2, r22	; 0x02
    3eec:	4b 83       	std	Y+3, r20	; 0x03
	H_Lcd_void_LCDWriteString("Clock");
    3eee:	8e e6       	ldi	r24, 0x6E	; 110
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <H_Lcd_void_LCDWriteString>
	if((Local_u8_Hours > 9) | (Local_u8_Minutes >9) | (Local_u8_Seconds > 9))
    3ef6:	19 86       	std	Y+9, r1	; 0x09
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	8a 30       	cpi	r24, 0x0A	; 10
    3efc:	10 f0       	brcs	.+4      	; 0x3f02 <H_Lcd_void_LCDClockDisplay+0x2e>
    3efe:	21 e0       	ldi	r18, 0x01	; 1
    3f00:	29 87       	std	Y+9, r18	; 0x09
    3f02:	18 86       	std	Y+8, r1	; 0x08
    3f04:	8a 81       	ldd	r24, Y+2	; 0x02
    3f06:	8a 30       	cpi	r24, 0x0A	; 10
    3f08:	10 f0       	brcs	.+4      	; 0x3f0e <H_Lcd_void_LCDClockDisplay+0x3a>
    3f0a:	31 e0       	ldi	r19, 0x01	; 1
    3f0c:	38 87       	std	Y+8, r19	; 0x08
    3f0e:	89 85       	ldd	r24, Y+9	; 0x09
    3f10:	98 85       	ldd	r25, Y+8	; 0x08
    3f12:	89 2b       	or	r24, r25
    3f14:	28 2f       	mov	r18, r24
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	3f 83       	std	Y+7, r19	; 0x07
    3f1a:	2e 83       	std	Y+6, r18	; 0x06
    3f1c:	1d 82       	std	Y+5, r1	; 0x05
    3f1e:	1c 82       	std	Y+4, r1	; 0x04
    3f20:	8b 81       	ldd	r24, Y+3	; 0x03
    3f22:	8a 30       	cpi	r24, 0x0A	; 10
    3f24:	20 f0       	brcs	.+8      	; 0x3f2e <H_Lcd_void_LCDClockDisplay+0x5a>
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	9d 83       	std	Y+5, r25	; 0x05
    3f2c:	8c 83       	std	Y+4, r24	; 0x04
    3f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    3f30:	9f 81       	ldd	r25, Y+7	; 0x07
    3f32:	2c 81       	ldd	r18, Y+4	; 0x04
    3f34:	3d 81       	ldd	r19, Y+5	; 0x05
    3f36:	82 2b       	or	r24, r18
    3f38:	93 2b       	or	r25, r19
    3f3a:	00 97       	sbiw	r24, 0x00	; 0
    3f3c:	d1 f1       	breq	.+116    	; 0x3fb2 <H_Lcd_void_LCDClockDisplay+0xde>
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	67 e0       	ldi	r22, 0x07	; 7
    3f42:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <H_Lcd_void_LCDGoToXY>
	    H_Lcd_void_LCDWriteString("H :M :S");
    3f46:	84 e7       	ldi	r24, 0x74	; 116
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	67 e0       	ldi	r22, 0x07	; 7
    3f52:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    3f56:	89 81       	ldd	r24, Y+1	; 0x01
    3f58:	88 2f       	mov	r24, r24
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	a0 e0       	ldi	r26, 0x00	; 0
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Hours <= 9)
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	8a 30       	cpi	r24, 0x0A	; 10
    3f6c:	18 f4       	brcc	.+6      	; 0x3f74 <H_Lcd_void_LCDClockDisplay+0xa0>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    3f6e:	80 e2       	ldi	r24, 0x20	; 32
    3f70:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    3f74:	8a e3       	ldi	r24, 0x3A	; 58
    3f76:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    3f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7c:	88 2f       	mov	r24, r24
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	a0 e0       	ldi	r26, 0x00	; 0
    3f82:	b0 e0       	ldi	r27, 0x00	; 0
    3f84:	bc 01       	movw	r22, r24
    3f86:	cd 01       	movw	r24, r26
    3f88:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Minutes <= 9)
    3f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8e:	8a 30       	cpi	r24, 0x0A	; 10
    3f90:	18 f4       	brcc	.+6      	; 0x3f98 <H_Lcd_void_LCDClockDisplay+0xc4>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    3f92:	80 e2       	ldi	r24, 0x20	; 32
    3f94:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    3f98:	8a e3       	ldi	r24, 0x3A	; 58
    3f9a:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    3f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa0:	88 2f       	mov	r24, r24
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	a0 e0       	ldi	r26, 0x00	; 0
    3fa6:	b0 e0       	ldi	r27, 0x00	; 0
    3fa8:	bc 01       	movw	r22, r24
    3faa:	cd 01       	movw	r24, r26
    3fac:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <H_Lcd_void_LCDWriteNum>
    3fb0:	2d c0       	rjmp	.+90     	; 0x400c <H_Lcd_void_LCDClockDisplay+0x138>

	}
	else
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	67 e0       	ldi	r22, 0x07	; 7
    3fb6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteString("H:M:S");
    3fba:	8c e7       	ldi	r24, 0x7C	; 124
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	67 e0       	ldi	r22, 0x07	; 7
    3fc6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	88 2f       	mov	r24, r24
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	a0 e0       	ldi	r26, 0x00	; 0
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    3fdc:	8a e3       	ldi	r24, 0x3A	; 58
    3fde:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    3fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe4:	88 2f       	mov	r24, r24
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	a0 e0       	ldi	r26, 0x00	; 0
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	bc 01       	movw	r22, r24
    3fee:	cd 01       	movw	r24, r26
    3ff0:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    3ff4:	8a e3       	ldi	r24, 0x3A	; 58
    3ff6:	0e 94 66 1a 	call	0x34cc	; 0x34cc <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    3ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffc:	88 2f       	mov	r24, r24
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	a0 e0       	ldi	r26, 0x00	; 0
    4002:	b0 e0       	ldi	r27, 0x00	; 0
    4004:	bc 01       	movw	r22, r24
    4006:	cd 01       	movw	r24, r26
    4008:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <H_Lcd_void_LCDWriteNum>
	}


}
    400c:	29 96       	adiw	r28, 0x09	; 9
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	f8 94       	cli
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	cf 91       	pop	r28
    401a:	df 91       	pop	r29
    401c:	08 95       	ret

0000401e <H_Lcd_void_LCDClear>:
/// ********function To screen LCD screen *****///
void H_Lcd_void_LCDClear(void)
{
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(Clear_screen);
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <H_LCD_Void_LCDWriteCommand>
}
    402c:	cf 91       	pop	r28
    402e:	df 91       	pop	r29
    4030:	08 95       	ret

00004032 <H_KEYPAD_void_KeyPadInt>:
#include "KeyPad_Int.h"

///*****************Functions**********//

void H_KEYPAD_void_KeyPadInt(void)
{
    4032:	df 93       	push	r29
    4034:	cf 93       	push	r28
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62

	///***************** _ Set Row Pins Direction as input**********//
	M_DIO_void_SetPinDirection(ROWS_PORT, Row1_PIN, OUTPUT);  ///Set_Row_1_Pin_Direction
    403a:	82 e0       	ldi	r24, 0x02	; 2
    403c:	60 e0       	ldi	r22, 0x00	; 0
    403e:	41 e0       	ldi	r20, 0x01	; 1
    4040:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row2_PIN, OUTPUT);  ///Set_Row_2_Pin_Direction
    4044:	82 e0       	ldi	r24, 0x02	; 2
    4046:	61 e0       	ldi	r22, 0x01	; 1
    4048:	41 e0       	ldi	r20, 0x01	; 1
    404a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row3_PIN, OUTPUT);  ///Set_Row_3_Pin_Direction
    404e:	82 e0       	ldi	r24, 0x02	; 2
    4050:	62 e0       	ldi	r22, 0x02	; 2
    4052:	41 e0       	ldi	r20, 0x01	; 1
    4054:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row4_PIN, OUTPUT);  ///Set_Row_4_Pin_Direction
    4058:	82 e0       	ldi	r24, 0x02	; 2
    405a:	63 e0       	ldi	r22, 0x03	; 3
    405c:	41 e0       	ldi	r20, 0x01	; 1
    405e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>

	///***************** _ Set Columns Pins Direction as input**********//
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col1_PIN, INPUT);  ///Set_Column_1_Pin_Value
    4062:	84 e0       	ldi	r24, 0x04	; 4
    4064:	62 e0       	ldi	r22, 0x02	; 2
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col2_PIN, INPUT);  ///Set_Column_2_Pin_Value
    406c:	84 e0       	ldi	r24, 0x04	; 4
    406e:	63 e0       	ldi	r22, 0x03	; 3
    4070:	40 e0       	ldi	r20, 0x00	; 0
    4072:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col3_PIN, INPUT);  ///Set_Column_3_Pin_Value
    4076:	84 e0       	ldi	r24, 0x04	; 4
    4078:	64 e0       	ldi	r22, 0x04	; 4
    407a:	40 e0       	ldi	r20, 0x00	; 0
    407c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col4_PIN, INPUT);  ///Set_Column_4_Pin_Value
    4080:	84 e0       	ldi	r24, 0x04	; 4
    4082:	65 e0       	ldi	r22, 0x05	; 5
    4084:	40 e0       	ldi	r20, 0x00	; 0
    4086:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>

	///***************** _ Set Row Pins Value to HIGH **********//
	M_DIO_void_SetPinValue(ROWS_PORT, Row1_PIN, HIGH);  ///Set_Row_1_Pin_Direction
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	60 e0       	ldi	r22, 0x00	; 0
    408e:	41 e0       	ldi	r20, 0x01	; 1
    4090:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row2_PIN, HIGH);  ///Set_Row_2_Pin_Direction
    4094:	82 e0       	ldi	r24, 0x02	; 2
    4096:	61 e0       	ldi	r22, 0x01	; 1
    4098:	41 e0       	ldi	r20, 0x01	; 1
    409a:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row3_PIN, HIGH);  ///Set_Row_3_Pin_Direction
    409e:	82 e0       	ldi	r24, 0x02	; 2
    40a0:	62 e0       	ldi	r22, 0x02	; 2
    40a2:	41 e0       	ldi	r20, 0x01	; 1
    40a4:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row4_PIN, HIGH);  ///Set_Row_4_Pin_Direction
    40a8:	82 e0       	ldi	r24, 0x02	; 2
    40aa:	63 e0       	ldi	r22, 0x03	; 3
    40ac:	41 e0       	ldi	r20, 0x01	; 1
    40ae:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>



}
    40b2:	cf 91       	pop	r28
    40b4:	df 91       	pop	r29
    40b6:	08 95       	ret

000040b8 <H_KEYPAD_void_KeyPadRead>:
u8 H_KEYPAD_void_KeyPadRead(void)
{
    40b8:	df 93       	push	r29
    40ba:	cf 93       	push	r28
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	a6 97       	sbiw	r28, 0x26	; 38
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	cd bf       	out	0x3d, r28	; 61
#if KEYPAD_MODEDL == MODEL_A

	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
    40cc:	ce 01       	movw	r24, r28
    40ce:	42 96       	adiw	r24, 0x12	; 18
    40d0:	9b a3       	std	Y+35, r25	; 0x23
    40d2:	8a a3       	std	Y+34, r24	; 0x22
    40d4:	ea e8       	ldi	r30, 0x8A	; 138
    40d6:	f1 e0       	ldi	r31, 0x01	; 1
    40d8:	fd a3       	std	Y+37, r31	; 0x25
    40da:	ec a3       	std	Y+36, r30	; 0x24
    40dc:	f0 e1       	ldi	r31, 0x10	; 16
    40de:	fe a3       	std	Y+38, r31	; 0x26
    40e0:	ec a1       	ldd	r30, Y+36	; 0x24
    40e2:	fd a1       	ldd	r31, Y+37	; 0x25
    40e4:	00 80       	ld	r0, Z
    40e6:	8c a1       	ldd	r24, Y+36	; 0x24
    40e8:	9d a1       	ldd	r25, Y+37	; 0x25
    40ea:	01 96       	adiw	r24, 0x01	; 1
    40ec:	9d a3       	std	Y+37, r25	; 0x25
    40ee:	8c a3       	std	Y+36, r24	; 0x24
    40f0:	ea a1       	ldd	r30, Y+34	; 0x22
    40f2:	fb a1       	ldd	r31, Y+35	; 0x23
    40f4:	00 82       	st	Z, r0
    40f6:	8a a1       	ldd	r24, Y+34	; 0x22
    40f8:	9b a1       	ldd	r25, Y+35	; 0x23
    40fa:	01 96       	adiw	r24, 0x01	; 1
    40fc:	9b a3       	std	Y+35, r25	; 0x23
    40fe:	8a a3       	std	Y+34, r24	; 0x22
    4100:	9e a1       	ldd	r25, Y+38	; 0x26
    4102:	91 50       	subi	r25, 0x01	; 1
    4104:	9e a3       	std	Y+38, r25	; 0x26
    4106:	ee a1       	ldd	r30, Y+38	; 0x26
    4108:	ee 23       	and	r30, r30
    410a:	51 f7       	brne	.-44     	; 0x40e0 <H_KEYPAD_void_KeyPadRead+0x28>
	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
#endif
	u8 Local_u8_Col =0;            /// local columns counter
    410c:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8_Row =0;            /// local Rows counter
    410e:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	8f 87       	std	Y+15, r24	; 0x0f

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    4114:	18 8a       	std	Y+16, r1	; 0x10
    4116:	ad c0       	rjmp	.+346    	; 0x4272 <H_KEYPAD_void_KeyPadRead+0x1ba>
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
    4118:	82 e0       	ldi	r24, 0x02	; 2
    411a:	68 89       	ldd	r22, Y+16	; 0x10
    411c:	40 e0       	ldi	r20, 0x00	; 0
    411e:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    4122:	82 e0       	ldi	r24, 0x02	; 2
    4124:	89 8b       	std	Y+17, r24	; 0x11
    4126:	99 c0       	rjmp	.+306    	; 0x425a <H_KEYPAD_void_KeyPadRead+0x1a2>
		{

		   ///**************Read_Local Column Pin value**********
		   /// ************** check if button is pressed********
		   if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    4128:	84 e0       	ldi	r24, 0x04	; 4
    412a:	69 89       	ldd	r22, Y+17	; 0x11
    412c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    4130:	88 23       	and	r24, r24
    4132:	09 f0       	breq	.+2      	; 0x4136 <H_KEYPAD_void_KeyPadRead+0x7e>
    4134:	8f c0       	rjmp	.+286    	; 0x4254 <H_KEYPAD_void_KeyPadRead+0x19c>
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	a0 ef       	ldi	r26, 0xF0	; 240
    413c:	b2 e4       	ldi	r27, 0x42	; 66
    413e:	8b 87       	std	Y+11, r24	; 0x0b
    4140:	9c 87       	std	Y+12, r25	; 0x0c
    4142:	ad 87       	std	Y+13, r26	; 0x0d
    4144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4146:	6b 85       	ldd	r22, Y+11	; 0x0b
    4148:	7c 85       	ldd	r23, Y+12	; 0x0c
    414a:	8d 85       	ldd	r24, Y+13	; 0x0d
    414c:	9e 85       	ldd	r25, Y+14	; 0x0e
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	4a e7       	ldi	r20, 0x7A	; 122
    4154:	53 e4       	ldi	r21, 0x43	; 67
    4156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	8f 83       	std	Y+7, r24	; 0x07
    4160:	98 87       	std	Y+8, r25	; 0x08
    4162:	a9 87       	std	Y+9, r26	; 0x09
    4164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4166:	6f 81       	ldd	r22, Y+7	; 0x07
    4168:	78 85       	ldd	r23, Y+8	; 0x08
    416a:	89 85       	ldd	r24, Y+9	; 0x09
    416c:	9a 85       	ldd	r25, Y+10	; 0x0a
    416e:	20 e0       	ldi	r18, 0x00	; 0
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	40 e8       	ldi	r20, 0x80	; 128
    4174:	5f e3       	ldi	r21, 0x3F	; 63
    4176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    417a:	88 23       	and	r24, r24
    417c:	2c f4       	brge	.+10     	; 0x4188 <H_KEYPAD_void_KeyPadRead+0xd0>
		__ticks = 1;
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	9e 83       	std	Y+6, r25	; 0x06
    4184:	8d 83       	std	Y+5, r24	; 0x05
    4186:	3f c0       	rjmp	.+126    	; 0x4206 <H_KEYPAD_void_KeyPadRead+0x14e>
	else if (__tmp > 65535)
    4188:	6f 81       	ldd	r22, Y+7	; 0x07
    418a:	78 85       	ldd	r23, Y+8	; 0x08
    418c:	89 85       	ldd	r24, Y+9	; 0x09
    418e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	3f ef       	ldi	r19, 0xFF	; 255
    4194:	4f e7       	ldi	r20, 0x7F	; 127
    4196:	57 e4       	ldi	r21, 0x47	; 71
    4198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    419c:	18 16       	cp	r1, r24
    419e:	4c f5       	brge	.+82     	; 0x41f2 <H_KEYPAD_void_KeyPadRead+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	40 e2       	ldi	r20, 0x20	; 32
    41ae:	51 e4       	ldi	r21, 0x41	; 65
    41b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	bc 01       	movw	r22, r24
    41ba:	cd 01       	movw	r24, r26
    41bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	9e 83       	std	Y+6, r25	; 0x06
    41c6:	8d 83       	std	Y+5, r24	; 0x05
    41c8:	0f c0       	rjmp	.+30     	; 0x41e8 <H_KEYPAD_void_KeyPadRead+0x130>
    41ca:	89 e1       	ldi	r24, 0x19	; 25
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	9c 83       	std	Y+4, r25	; 0x04
    41d0:	8b 83       	std	Y+3, r24	; 0x03
    41d2:	8b 81       	ldd	r24, Y+3	; 0x03
    41d4:	9c 81       	ldd	r25, Y+4	; 0x04
    41d6:	01 97       	sbiw	r24, 0x01	; 1
    41d8:	f1 f7       	brne	.-4      	; 0x41d6 <H_KEYPAD_void_KeyPadRead+0x11e>
    41da:	9c 83       	std	Y+4, r25	; 0x04
    41dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41de:	8d 81       	ldd	r24, Y+5	; 0x05
    41e0:	9e 81       	ldd	r25, Y+6	; 0x06
    41e2:	01 97       	sbiw	r24, 0x01	; 1
    41e4:	9e 83       	std	Y+6, r25	; 0x06
    41e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ea:	9e 81       	ldd	r25, Y+6	; 0x06
    41ec:	00 97       	sbiw	r24, 0x00	; 0
    41ee:	69 f7       	brne	.-38     	; 0x41ca <H_KEYPAD_void_KeyPadRead+0x112>
    41f0:	14 c0       	rjmp	.+40     	; 0x421a <H_KEYPAD_void_KeyPadRead+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f2:	6f 81       	ldd	r22, Y+7	; 0x07
    41f4:	78 85       	ldd	r23, Y+8	; 0x08
    41f6:	89 85       	ldd	r24, Y+9	; 0x09
    41f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	9e 83       	std	Y+6, r25	; 0x06
    4204:	8d 83       	std	Y+5, r24	; 0x05
    4206:	8d 81       	ldd	r24, Y+5	; 0x05
    4208:	9e 81       	ldd	r25, Y+6	; 0x06
    420a:	9a 83       	std	Y+2, r25	; 0x02
    420c:	89 83       	std	Y+1, r24	; 0x01
    420e:	89 81       	ldd	r24, Y+1	; 0x01
    4210:	9a 81       	ldd	r25, Y+2	; 0x02
    4212:	01 97       	sbiw	r24, 0x01	; 1
    4214:	f1 f7       	brne	.-4      	; 0x4212 <H_KEYPAD_void_KeyPadRead+0x15a>
    4216:	9a 83       	std	Y+2, r25	; 0x02
    4218:	89 83       	std	Y+1, r24	; 0x01
		   {   ////*******delay for DEBOUNCING
			   _delay_ms(KEYPAD_DEBOUNCING_TIME);
			   /// ************** check again if button is pressed********
			    if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    421a:	84 e0       	ldi	r24, 0x04	; 4
    421c:	69 89       	ldd	r22, Y+17	; 0x11
    421e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_U8_PinRead>
    4222:	88 23       	and	r24, r24
    4224:	b9 f4       	brne	.+46     	; 0x4254 <H_KEYPAD_void_KeyPadRead+0x19c>
		     	{
	            ///********if button is pressed set Local_u8_Read  ********
				  Local_u8_Read =Local_u8_Arr [Local_u8_Row][Local_u8_Col - 2] ;
    4226:	88 89       	ldd	r24, Y+16	; 0x10
    4228:	28 2f       	mov	r18, r24
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	89 89       	ldd	r24, Y+17	; 0x11
    422e:	88 2f       	mov	r24, r24
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	ac 01       	movw	r20, r24
    4234:	42 50       	subi	r20, 0x02	; 2
    4236:	50 40       	sbci	r21, 0x00	; 0
    4238:	22 0f       	add	r18, r18
    423a:	33 1f       	adc	r19, r19
    423c:	22 0f       	add	r18, r18
    423e:	33 1f       	adc	r19, r19
    4240:	ce 01       	movw	r24, r28
    4242:	01 96       	adiw	r24, 0x01	; 1
    4244:	82 0f       	add	r24, r18
    4246:	93 1f       	adc	r25, r19
    4248:	84 0f       	add	r24, r20
    424a:	95 1f       	adc	r25, r21
    424c:	fc 01       	movw	r30, r24
    424e:	71 96       	adiw	r30, 0x11	; 17
    4250:	80 81       	ld	r24, Z
    4252:	8f 87       	std	Y+15, r24	; 0x0f
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    4254:	89 89       	ldd	r24, Y+17	; 0x11
    4256:	8f 5f       	subi	r24, 0xFF	; 255
    4258:	89 8b       	std	Y+17, r24	; 0x11
    425a:	89 89       	ldd	r24, Y+17	; 0x11
    425c:	86 30       	cpi	r24, 0x06	; 6
    425e:	08 f4       	brcc	.+2      	; 0x4262 <H_KEYPAD_void_KeyPadRead+0x1aa>
    4260:	63 cf       	rjmp	.-314    	; 0x4128 <H_KEYPAD_void_KeyPadRead+0x70>

			    }
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
    4262:	82 e0       	ldi	r24, 0x02	; 2
    4264:	68 89       	ldd	r22, Y+16	; 0x10
    4266:	41 e0       	ldi	r20, 0x01	; 1
    4268:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
	u8 Local_u8_Row =0;            /// local Rows counter
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    426c:	88 89       	ldd	r24, Y+16	; 0x10
    426e:	8f 5f       	subi	r24, 0xFF	; 255
    4270:	88 8b       	std	Y+16, r24	; 0x10
    4272:	88 89       	ldd	r24, Y+16	; 0x10
    4274:	84 30       	cpi	r24, 0x04	; 4
    4276:	08 f4       	brcc	.+2      	; 0x427a <H_KEYPAD_void_KeyPadRead+0x1c2>
    4278:	4f cf       	rjmp	.-354    	; 0x4118 <H_KEYPAD_void_KeyPadRead+0x60>
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
	}
    return Local_u8_Read ;
    427a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    427c:	a6 96       	adiw	r28, 0x26	; 38
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	cf 91       	pop	r28
    428a:	df 91       	pop	r29
    428c:	08 95       	ret

0000428e <H_BUZ_Void_BUZint>:

///***************** Functions **********//

///  H_BUZ_Void_BUZint function to initialize  Buzzer
void H_BUZ_Void_BUZint(void)
{
    428e:	df 93       	push	r29
    4290:	cf 93       	push	r28
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
   M_DIO_void_SetPinDirection(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    4296:	83 e0       	ldi	r24, 0x03	; 3
    4298:	65 e0       	ldi	r22, 0x05	; 5
    429a:	41 e0       	ldi	r20, 0x01	; 1
    429c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_DIO_void_SetPinDirection>
}
    42a0:	cf 91       	pop	r28
    42a2:	df 91       	pop	r29
    42a4:	08 95       	ret

000042a6 <H_BUZ_Void_BUZSetON>:
void H_BUZ_Void_BUZSetON(void)
{
    42a6:	df 93       	push	r29
    42a8:	cf 93       	push	r28
    42aa:	cd b7       	in	r28, 0x3d	; 61
    42ac:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
    42ae:	83 e0       	ldi	r24, 0x03	; 3
    42b0:	65 e0       	ldi	r22, 0x05	; 5
    42b2:	41 e0       	ldi	r20, 0x01	; 1
    42b4:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
}
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <H_BUZ_Void_BUZSetOFF>:
void H_BUZ_Void_BUZSetOFF(void)
{
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	cd b7       	in	r28, 0x3d	; 61
    42c4:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
    42c6:	83 e0       	ldi	r24, 0x03	; 3
    42c8:	65 e0       	ldi	r22, 0x05	; 5
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_DIO_void_SetPinValue>
}
    42d0:	cf 91       	pop	r28
    42d2:	df 91       	pop	r29
    42d4:	08 95       	ret

000042d6 <main>:
#include "main.h"      ///*** this is a header file to contain all includes of Application



int main ()
{
    42d6:	df 93       	push	r29
    42d8:	cf 93       	push	r28
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
    42de:	2e 97       	sbiw	r28, 0x0e	; 14
    42e0:	0f b6       	in	r0, 0x3f	; 63
    42e2:	f8 94       	cli
    42e4:	de bf       	out	0x3e, r29	; 62
    42e6:	0f be       	out	0x3f, r0	; 63
    42e8:	cd bf       	out	0x3d, r28	; 61
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	90 e4       	ldi	r25, 0x40	; 64
    42ee:	ac e1       	ldi	r26, 0x1C	; 28
    42f0:	b6 e4       	ldi	r27, 0x46	; 70
    42f2:	8b 87       	std	Y+11, r24	; 0x0b
    42f4:	9c 87       	std	Y+12, r25	; 0x0c
    42f6:	ad 87       	std	Y+13, r26	; 0x0d
    42f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    42fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    42fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4300:	9e 85       	ldd	r25, Y+14	; 0x0e
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	4a e7       	ldi	r20, 0x7A	; 122
    4308:	53 e4       	ldi	r21, 0x43	; 67
    430a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	8f 83       	std	Y+7, r24	; 0x07
    4314:	98 87       	std	Y+8, r25	; 0x08
    4316:	a9 87       	std	Y+9, r26	; 0x09
    4318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    431a:	6f 81       	ldd	r22, Y+7	; 0x07
    431c:	78 85       	ldd	r23, Y+8	; 0x08
    431e:	89 85       	ldd	r24, Y+9	; 0x09
    4320:	9a 85       	ldd	r25, Y+10	; 0x0a
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	40 e8       	ldi	r20, 0x80	; 128
    4328:	5f e3       	ldi	r21, 0x3F	; 63
    432a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    432e:	88 23       	and	r24, r24
    4330:	2c f4       	brge	.+10     	; 0x433c <main+0x66>
		__ticks = 1;
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	9e 83       	std	Y+6, r25	; 0x06
    4338:	8d 83       	std	Y+5, r24	; 0x05
    433a:	3f c0       	rjmp	.+126    	; 0x43ba <main+0xe4>
	else if (__tmp > 65535)
    433c:	6f 81       	ldd	r22, Y+7	; 0x07
    433e:	78 85       	ldd	r23, Y+8	; 0x08
    4340:	89 85       	ldd	r24, Y+9	; 0x09
    4342:	9a 85       	ldd	r25, Y+10	; 0x0a
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	3f ef       	ldi	r19, 0xFF	; 255
    4348:	4f e7       	ldi	r20, 0x7F	; 127
    434a:	57 e4       	ldi	r21, 0x47	; 71
    434c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4350:	18 16       	cp	r1, r24
    4352:	4c f5       	brge	.+82     	; 0x43a6 <main+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4354:	6b 85       	ldd	r22, Y+11	; 0x0b
    4356:	7c 85       	ldd	r23, Y+12	; 0x0c
    4358:	8d 85       	ldd	r24, Y+13	; 0x0d
    435a:	9e 85       	ldd	r25, Y+14	; 0x0e
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e2       	ldi	r20, 0x20	; 32
    4362:	51 e4       	ldi	r21, 0x41	; 65
    4364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4368:	dc 01       	movw	r26, r24
    436a:	cb 01       	movw	r24, r22
    436c:	bc 01       	movw	r22, r24
    436e:	cd 01       	movw	r24, r26
    4370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	9e 83       	std	Y+6, r25	; 0x06
    437a:	8d 83       	std	Y+5, r24	; 0x05
    437c:	0f c0       	rjmp	.+30     	; 0x439c <main+0xc6>
    437e:	89 e1       	ldi	r24, 0x19	; 25
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	9c 83       	std	Y+4, r25	; 0x04
    4384:	8b 83       	std	Y+3, r24	; 0x03
    4386:	8b 81       	ldd	r24, Y+3	; 0x03
    4388:	9c 81       	ldd	r25, Y+4	; 0x04
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	f1 f7       	brne	.-4      	; 0x438a <main+0xb4>
    438e:	9c 83       	std	Y+4, r25	; 0x04
    4390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4392:	8d 81       	ldd	r24, Y+5	; 0x05
    4394:	9e 81       	ldd	r25, Y+6	; 0x06
    4396:	01 97       	sbiw	r24, 0x01	; 1
    4398:	9e 83       	std	Y+6, r25	; 0x06
    439a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439c:	8d 81       	ldd	r24, Y+5	; 0x05
    439e:	9e 81       	ldd	r25, Y+6	; 0x06
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	69 f7       	brne	.-38     	; 0x437e <main+0xa8>
    43a4:	14 c0       	rjmp	.+40     	; 0x43ce <main+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a6:	6f 81       	ldd	r22, Y+7	; 0x07
    43a8:	78 85       	ldd	r23, Y+8	; 0x08
    43aa:	89 85       	ldd	r24, Y+9	; 0x09
    43ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	9e 83       	std	Y+6, r25	; 0x06
    43b8:	8d 83       	std	Y+5, r24	; 0x05
    43ba:	8d 81       	ldd	r24, Y+5	; 0x05
    43bc:	9e 81       	ldd	r25, Y+6	; 0x06
    43be:	9a 83       	std	Y+2, r25	; 0x02
    43c0:	89 83       	std	Y+1, r24	; 0x01
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
    43c4:	9a 81       	ldd	r25, Y+2	; 0x02
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <main+0xf0>
    43ca:	9a 83       	std	Y+2, r25	; 0x02
    43cc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10000);       //// delay for 10 sec then light again
      H_LED_Void_LedInit(BLUE_LED);          //// Initialize  BLUE    LED
    43ce:	82 e0       	ldi	r24, 0x02	; 2
    43d0:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <H_LED_Void_LedInit>
      H_LED_Void_LedInit(RED_LED);           //// Initialize  RED     LED
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <H_LED_Void_LedInit>
      H_LED_Void_LedInit(GRN_LED);           //// Initialize  GREEN   LED
    43da:	83 e0       	ldi	r24, 0x03	; 3
    43dc:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <H_LED_Void_LedInit>
      H_LED_Void_LedInit(YELLOW_LED);       ////  Initialize  YELLOW  LED
    43e0:	84 e0       	ldi	r24, 0x04	; 4
    43e2:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <H_LED_Void_LedInit>

      H_LED_Void_LedOn(BLUE_LED);            //// Turn ON     BLUE    LED
    43e6:	82 e0       	ldi	r24, 0x02	; 2
    43e8:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <H_LED_Void_LedOn>
      H_LED_Void_LedOn(RED_LED);             //// Turn ON     RED     LED
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <H_LED_Void_LedOn>
      H_LED_Void_LedOn(GRN_LED);             //// Turn ON     GREEN   LED
    43f2:	83 e0       	ldi	r24, 0x03	; 3
    43f4:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <H_LED_Void_LedOn>
      H_LED_Void_LedOn(YELLOW_LED);         ////  Turn ON     YELLOW  LED
    43f8:	84 e0       	ldi	r24, 0x04	; 4
    43fa:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <H_LED_Void_LedOn>

      M_WDT_void_WDTEnable();             /////// Enable  WDT Watch dog Timer
    43fe:	0e 94 75 07 	call	0xeea	; 0xeea <M_WDT_void_WDTEnable>
       //M_WDT_void_WDTDisable();          /////// Disable  WDT Watch dog Timer

    while (1)
       {

          M_WDT_void_WDTRefresh();     /////// Refresh  WDT Watch dog Timer
    4402:	0e 94 ad 07 	call	0xf5a	; 0xf5a <M_WDT_void_WDTRefresh>
    4406:	fd cf       	rjmp	.-6      	; 0x4402 <main+0x12c>

00004408 <__mulsi3>:
    4408:	62 9f       	mul	r22, r18
    440a:	d0 01       	movw	r26, r0
    440c:	73 9f       	mul	r23, r19
    440e:	f0 01       	movw	r30, r0
    4410:	82 9f       	mul	r24, r18
    4412:	e0 0d       	add	r30, r0
    4414:	f1 1d       	adc	r31, r1
    4416:	64 9f       	mul	r22, r20
    4418:	e0 0d       	add	r30, r0
    441a:	f1 1d       	adc	r31, r1
    441c:	92 9f       	mul	r25, r18
    441e:	f0 0d       	add	r31, r0
    4420:	83 9f       	mul	r24, r19
    4422:	f0 0d       	add	r31, r0
    4424:	74 9f       	mul	r23, r20
    4426:	f0 0d       	add	r31, r0
    4428:	65 9f       	mul	r22, r21
    442a:	f0 0d       	add	r31, r0
    442c:	99 27       	eor	r25, r25
    442e:	72 9f       	mul	r23, r18
    4430:	b0 0d       	add	r27, r0
    4432:	e1 1d       	adc	r30, r1
    4434:	f9 1f       	adc	r31, r25
    4436:	63 9f       	mul	r22, r19
    4438:	b0 0d       	add	r27, r0
    443a:	e1 1d       	adc	r30, r1
    443c:	f9 1f       	adc	r31, r25
    443e:	bd 01       	movw	r22, r26
    4440:	cf 01       	movw	r24, r30
    4442:	11 24       	eor	r1, r1
    4444:	08 95       	ret

00004446 <__udivmodqi4>:
    4446:	99 1b       	sub	r25, r25
    4448:	79 e0       	ldi	r23, 0x09	; 9
    444a:	04 c0       	rjmp	.+8      	; 0x4454 <__udivmodqi4_ep>

0000444c <__udivmodqi4_loop>:
    444c:	99 1f       	adc	r25, r25
    444e:	96 17       	cp	r25, r22
    4450:	08 f0       	brcs	.+2      	; 0x4454 <__udivmodqi4_ep>
    4452:	96 1b       	sub	r25, r22

00004454 <__udivmodqi4_ep>:
    4454:	88 1f       	adc	r24, r24
    4456:	7a 95       	dec	r23
    4458:	c9 f7       	brne	.-14     	; 0x444c <__udivmodqi4_loop>
    445a:	80 95       	com	r24
    445c:	08 95       	ret

0000445e <__divmodhi4>:
    445e:	97 fb       	bst	r25, 7
    4460:	09 2e       	mov	r0, r25
    4462:	07 26       	eor	r0, r23
    4464:	0a d0       	rcall	.+20     	; 0x447a <__divmodhi4_neg1>
    4466:	77 fd       	sbrc	r23, 7
    4468:	04 d0       	rcall	.+8      	; 0x4472 <__divmodhi4_neg2>
    446a:	49 d0       	rcall	.+146    	; 0x44fe <__udivmodhi4>
    446c:	06 d0       	rcall	.+12     	; 0x447a <__divmodhi4_neg1>
    446e:	00 20       	and	r0, r0
    4470:	1a f4       	brpl	.+6      	; 0x4478 <__divmodhi4_exit>

00004472 <__divmodhi4_neg2>:
    4472:	70 95       	com	r23
    4474:	61 95       	neg	r22
    4476:	7f 4f       	sbci	r23, 0xFF	; 255

00004478 <__divmodhi4_exit>:
    4478:	08 95       	ret

0000447a <__divmodhi4_neg1>:
    447a:	f6 f7       	brtc	.-4      	; 0x4478 <__divmodhi4_exit>
    447c:	90 95       	com	r25
    447e:	81 95       	neg	r24
    4480:	9f 4f       	sbci	r25, 0xFF	; 255
    4482:	08 95       	ret

00004484 <__udivmodsi4>:
    4484:	a1 e2       	ldi	r26, 0x21	; 33
    4486:	1a 2e       	mov	r1, r26
    4488:	aa 1b       	sub	r26, r26
    448a:	bb 1b       	sub	r27, r27
    448c:	fd 01       	movw	r30, r26
    448e:	0d c0       	rjmp	.+26     	; 0x44aa <__udivmodsi4_ep>

00004490 <__udivmodsi4_loop>:
    4490:	aa 1f       	adc	r26, r26
    4492:	bb 1f       	adc	r27, r27
    4494:	ee 1f       	adc	r30, r30
    4496:	ff 1f       	adc	r31, r31
    4498:	a2 17       	cp	r26, r18
    449a:	b3 07       	cpc	r27, r19
    449c:	e4 07       	cpc	r30, r20
    449e:	f5 07       	cpc	r31, r21
    44a0:	20 f0       	brcs	.+8      	; 0x44aa <__udivmodsi4_ep>
    44a2:	a2 1b       	sub	r26, r18
    44a4:	b3 0b       	sbc	r27, r19
    44a6:	e4 0b       	sbc	r30, r20
    44a8:	f5 0b       	sbc	r31, r21

000044aa <__udivmodsi4_ep>:
    44aa:	66 1f       	adc	r22, r22
    44ac:	77 1f       	adc	r23, r23
    44ae:	88 1f       	adc	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	1a 94       	dec	r1
    44b4:	69 f7       	brne	.-38     	; 0x4490 <__udivmodsi4_loop>
    44b6:	60 95       	com	r22
    44b8:	70 95       	com	r23
    44ba:	80 95       	com	r24
    44bc:	90 95       	com	r25
    44be:	9b 01       	movw	r18, r22
    44c0:	ac 01       	movw	r20, r24
    44c2:	bd 01       	movw	r22, r26
    44c4:	cf 01       	movw	r24, r30
    44c6:	08 95       	ret

000044c8 <__divmodsi4>:
    44c8:	97 fb       	bst	r25, 7
    44ca:	09 2e       	mov	r0, r25
    44cc:	05 26       	eor	r0, r21
    44ce:	0e d0       	rcall	.+28     	; 0x44ec <__divmodsi4_neg1>
    44d0:	57 fd       	sbrc	r21, 7
    44d2:	04 d0       	rcall	.+8      	; 0x44dc <__divmodsi4_neg2>
    44d4:	d7 df       	rcall	.-82     	; 0x4484 <__udivmodsi4>
    44d6:	0a d0       	rcall	.+20     	; 0x44ec <__divmodsi4_neg1>
    44d8:	00 1c       	adc	r0, r0
    44da:	38 f4       	brcc	.+14     	; 0x44ea <__divmodsi4_exit>

000044dc <__divmodsi4_neg2>:
    44dc:	50 95       	com	r21
    44de:	40 95       	com	r20
    44e0:	30 95       	com	r19
    44e2:	21 95       	neg	r18
    44e4:	3f 4f       	sbci	r19, 0xFF	; 255
    44e6:	4f 4f       	sbci	r20, 0xFF	; 255
    44e8:	5f 4f       	sbci	r21, 0xFF	; 255

000044ea <__divmodsi4_exit>:
    44ea:	08 95       	ret

000044ec <__divmodsi4_neg1>:
    44ec:	f6 f7       	brtc	.-4      	; 0x44ea <__divmodsi4_exit>
    44ee:	90 95       	com	r25
    44f0:	80 95       	com	r24
    44f2:	70 95       	com	r23
    44f4:	61 95       	neg	r22
    44f6:	7f 4f       	sbci	r23, 0xFF	; 255
    44f8:	8f 4f       	sbci	r24, 0xFF	; 255
    44fa:	9f 4f       	sbci	r25, 0xFF	; 255
    44fc:	08 95       	ret

000044fe <__udivmodhi4>:
    44fe:	aa 1b       	sub	r26, r26
    4500:	bb 1b       	sub	r27, r27
    4502:	51 e1       	ldi	r21, 0x11	; 17
    4504:	07 c0       	rjmp	.+14     	; 0x4514 <__udivmodhi4_ep>

00004506 <__udivmodhi4_loop>:
    4506:	aa 1f       	adc	r26, r26
    4508:	bb 1f       	adc	r27, r27
    450a:	a6 17       	cp	r26, r22
    450c:	b7 07       	cpc	r27, r23
    450e:	10 f0       	brcs	.+4      	; 0x4514 <__udivmodhi4_ep>
    4510:	a6 1b       	sub	r26, r22
    4512:	b7 0b       	sbc	r27, r23

00004514 <__udivmodhi4_ep>:
    4514:	88 1f       	adc	r24, r24
    4516:	99 1f       	adc	r25, r25
    4518:	5a 95       	dec	r21
    451a:	a9 f7       	brne	.-22     	; 0x4506 <__udivmodhi4_loop>
    451c:	80 95       	com	r24
    451e:	90 95       	com	r25
    4520:	bc 01       	movw	r22, r24
    4522:	cd 01       	movw	r24, r26
    4524:	08 95       	ret

00004526 <__prologue_saves__>:
    4526:	2f 92       	push	r2
    4528:	3f 92       	push	r3
    452a:	4f 92       	push	r4
    452c:	5f 92       	push	r5
    452e:	6f 92       	push	r6
    4530:	7f 92       	push	r7
    4532:	8f 92       	push	r8
    4534:	9f 92       	push	r9
    4536:	af 92       	push	r10
    4538:	bf 92       	push	r11
    453a:	cf 92       	push	r12
    453c:	df 92       	push	r13
    453e:	ef 92       	push	r14
    4540:	ff 92       	push	r15
    4542:	0f 93       	push	r16
    4544:	1f 93       	push	r17
    4546:	cf 93       	push	r28
    4548:	df 93       	push	r29
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	ca 1b       	sub	r28, r26
    4550:	db 0b       	sbc	r29, r27
    4552:	0f b6       	in	r0, 0x3f	; 63
    4554:	f8 94       	cli
    4556:	de bf       	out	0x3e, r29	; 62
    4558:	0f be       	out	0x3f, r0	; 63
    455a:	cd bf       	out	0x3d, r28	; 61
    455c:	09 94       	ijmp

0000455e <__epilogue_restores__>:
    455e:	2a 88       	ldd	r2, Y+18	; 0x12
    4560:	39 88       	ldd	r3, Y+17	; 0x11
    4562:	48 88       	ldd	r4, Y+16	; 0x10
    4564:	5f 84       	ldd	r5, Y+15	; 0x0f
    4566:	6e 84       	ldd	r6, Y+14	; 0x0e
    4568:	7d 84       	ldd	r7, Y+13	; 0x0d
    456a:	8c 84       	ldd	r8, Y+12	; 0x0c
    456c:	9b 84       	ldd	r9, Y+11	; 0x0b
    456e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4570:	b9 84       	ldd	r11, Y+9	; 0x09
    4572:	c8 84       	ldd	r12, Y+8	; 0x08
    4574:	df 80       	ldd	r13, Y+7	; 0x07
    4576:	ee 80       	ldd	r14, Y+6	; 0x06
    4578:	fd 80       	ldd	r15, Y+5	; 0x05
    457a:	0c 81       	ldd	r16, Y+4	; 0x04
    457c:	1b 81       	ldd	r17, Y+3	; 0x03
    457e:	aa 81       	ldd	r26, Y+2	; 0x02
    4580:	b9 81       	ldd	r27, Y+1	; 0x01
    4582:	ce 0f       	add	r28, r30
    4584:	d1 1d       	adc	r29, r1
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	f8 94       	cli
    458a:	de bf       	out	0x3e, r29	; 62
    458c:	0f be       	out	0x3f, r0	; 63
    458e:	cd bf       	out	0x3d, r28	; 61
    4590:	ed 01       	movw	r28, r26
    4592:	08 95       	ret

00004594 <_exit>:
    4594:	f8 94       	cli

00004596 <__stop_program>:
    4596:	ff cf       	rjmp	.-2      	; 0x4596 <__stop_program>
